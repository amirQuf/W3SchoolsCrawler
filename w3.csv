id,url,doc,label
0,https://www.w3schools.com/html/default.asp,"HTML Tutorial

❮ Home
Next ❯


HTML is the standard markup language for Web pages.
With HTML you can create your own Website.
HTML is easy to learn - You will enjoy it!
Study our free HTML Tutorial »
Watch our Video Tutorial »NEW


Easy Learning with HTML ""Try it Yourself""
With our ""Try it Yourself"" editor, you can edit the HTML code and view the 
result:

Example

<!DOCTYPE html>
<html><head><title>Page Title</title>
</head><body><h1>This is a Heading</h1><p>This is a paragraph.</p>
</body></html>

Try it Yourself »

Click on the ""Try it Yourself"" button to see how it works.

HTML Examples
In this HTML tutorial, you will find more than 200 examples. With our online 
""Try it Yourself"" editor, you can edit and test each example yourself!
Go to HTML Examples!







HTML Exercises
This HTML tutorial also contains nearly 100 HTML exercises.

Test Yourself With Exercises

Exercise:
Add a ""tooltip"" to the paragraph below with the text ""About W3Schools"".

<p =""About W3Schools"">W3Schools is a web developer's site.</p>


Submit Answer »
Start the Exercise



HTML Quiz Test
Test your HTML skills with our HTML Quiz!
Start HTML Quiz!

HTML References
At W3Schools you will find complete references about HTML elements, 
attributes, events, color names, entities, character-sets, URL encoding, 
language codes, HTTP messages, browser support, and more:


HTML Elements


Browser Support


Attributes


Global Attributes


Event Attributes


Color Names


Canvas


Audio/Video DOM


Character Sets


URL Encoding


Language Codes


Country Codes


HTTP Messages


Px to Em Converter


Keyboard Shortcuts



  

#w3_cert_badge {
  position: absolute;
  right: 5%;
  width: 220px;
  transform: rotate(10deg);
  bottom: -20%;
}

#w3_cert_arrow {
  position: absolute;
  right: 220px;
  width: 220px;
  transform: rotate(10deg);
  bottom: 0;
  z-index: 1;
}

#getdiploma {
  position: relative;
  padding: 0 60px 50px 60px;
  margin-bottom: 125px;
  border-radius: 16px;
  background-color: #282A35;
  color: #FFC0C7;
  font-family: 'Source Sans Pro', sans-serif;
}

#getdiploma h2 {
  font-size:50px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma p {
  font-size: 42px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma a {
  border-radius: 50px;
  mxargin-top: 50px;
  font-size: 18px;
  background-color: #04AA6D;
  padding: 17px 55px
}

#getdiploma a:hover,
#getdiploma a:active {
  background-color: #059862 !important;
}


@media screen and (max-width: 1442px) {
  #w3_cert_arrow {
    right: 212px;
    bottom: -15px;
  }
}


@media screen and (max-width: 1202px) {
  #w3_cert_arrow {
    display: none;
  }
}

@media screen and (max-width: 992px) {
  #w3_cert_arrow {
    display: block;
  }
}


@media screen and (max-width: 800px) {
  #w3_cert_arrow {
    display: none;
  }
  #getdiploma h2 {
    font-size: 44px;
  }
  #getdiploma p {
    font-size: 30px;
  }

  #getdiploma a {
    width: 100%;
  }
  #w3_cert_badge {
    top: -16px;
    right: -8px;
    width: 100px;
  }
  #getdiploma  {
    margin-bottom: 55px;
  }
}


Kickstart your career
Get certified by completing the  course

var foldername;
function getCourseFolder() {
  var pathname = window.location.pathname;
  if (pathname.substr(0,1) == ""/"") {pathname = pathname.substr(1);}
  pos = pathname.indexOf(""/"");
  foldername = pathname.substr(0, pos);
  foldername = foldername.toUpperCase();
  if (foldername == ""JS"") foldername = ""JavaScript"";
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") {
    document.getElementById(""hey"").innerText = ""a"";
  }
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") foldername = """";
  if (foldername == ""CS"") foldername = ""C#"";
  if (foldername == ""CYBERSECURITY"") foldername = ""Cyber Security"";  
  if (foldername == ""CPP"") foldername = ""C++"";
  document.getElementById(""coursetopic"").innerText = foldername;
}
getCourseFolder();

Get certified




.cls-1{fill:#04aa6b;}.cls-2{font-size:23px;}.cls-2,.cls-3,.cls-4{fill:#fff;}.cls-2,.cls-3{font-family:RobotoMono-Medium, Roboto Mono;font-weight:500;}.cls-3{font-size:20.08px;}w3schools CERTIFIED  .  2022





❮ Home
Next ❯",html
0,https://www.w3schools.com/html/default.asp,"HTML Tutorial

❮ Home
Next ❯


HTML is the standard markup language for Web pages.
With HTML you can create your own Website.
HTML is easy to learn - You will enjoy it!
Study our free HTML Tutorial »
Watch our Video Tutorial »NEW


Easy Learning with HTML ""Try it Yourself""
With our ""Try it Yourself"" editor, you can edit the HTML code and view the 
result:

Example

<!DOCTYPE html>
<html><head><title>Page Title</title>
</head><body><h1>This is a Heading</h1><p>This is a paragraph.</p>
</body></html>

Try it Yourself »

Click on the ""Try it Yourself"" button to see how it works.

HTML Examples
In this HTML tutorial, you will find more than 200 examples. With our online 
""Try it Yourself"" editor, you can edit and test each example yourself!
Go to HTML Examples!







HTML Exercises
This HTML tutorial also contains nearly 100 HTML exercises.

Test Yourself With Exercises

Exercise:
Add a ""tooltip"" to the paragraph below with the text ""About W3Schools"".

<p =""About W3Schools"">W3Schools is a web developer's site.</p>


Submit Answer »
Start the Exercise



HTML Quiz Test
Test your HTML skills with our HTML Quiz!
Start HTML Quiz!

HTML References
At W3Schools you will find complete references about HTML elements, 
attributes, events, color names, entities, character-sets, URL encoding, 
language codes, HTTP messages, browser support, and more:


HTML Elements


Browser Support


Attributes


Global Attributes


Event Attributes


Color Names


Canvas


Audio/Video DOM


Character Sets


URL Encoding


Language Codes


Country Codes


HTTP Messages


Px to Em Converter


Keyboard Shortcuts



  

#w3_cert_badge {
  position: absolute;
  right: 5%;
  width: 220px;
  transform: rotate(10deg);
  bottom: -20%;
}

#w3_cert_arrow {
  position: absolute;
  right: 220px;
  width: 220px;
  transform: rotate(10deg);
  bottom: 0;
  z-index: 1;
}

#getdiploma {
  position: relative;
  padding: 0 60px 50px 60px;
  margin-bottom: 125px;
  border-radius: 16px;
  background-color: #282A35;
  color: #FFC0C7;
  font-family: 'Source Sans Pro', sans-serif;
}

#getdiploma h2 {
  font-size:50px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma p {
  font-size: 42px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma a {
  border-radius: 50px;
  mxargin-top: 50px;
  font-size: 18px;
  background-color: #04AA6D;
  padding: 17px 55px
}

#getdiploma a:hover,
#getdiploma a:active {
  background-color: #059862 !important;
}


@media screen and (max-width: 1442px) {
  #w3_cert_arrow {
    right: 212px;
    bottom: -15px;
  }
}


@media screen and (max-width: 1202px) {
  #w3_cert_arrow {
    display: none;
  }
}

@media screen and (max-width: 992px) {
  #w3_cert_arrow {
    display: block;
  }
}


@media screen and (max-width: 800px) {
  #w3_cert_arrow {
    display: none;
  }
  #getdiploma h2 {
    font-size: 44px;
  }
  #getdiploma p {
    font-size: 30px;
  }

  #getdiploma a {
    width: 100%;
  }
  #w3_cert_badge {
    top: -16px;
    right: -8px;
    width: 100px;
  }
  #getdiploma  {
    margin-bottom: 55px;
  }
}


Kickstart your career
Get certified by completing the  course

var foldername;
function getCourseFolder() {
  var pathname = window.location.pathname;
  if (pathname.substr(0,1) == ""/"") {pathname = pathname.substr(1);}
  pos = pathname.indexOf(""/"");
  foldername = pathname.substr(0, pos);
  foldername = foldername.toUpperCase();
  if (foldername == ""JS"") foldername = ""JavaScript"";
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") {
    document.getElementById(""hey"").innerText = ""a"";
  }
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") foldername = """";
  if (foldername == ""CS"") foldername = ""C#"";
  if (foldername == ""CYBERSECURITY"") foldername = ""Cyber Security"";  
  if (foldername == ""CPP"") foldername = ""C++"";
  document.getElementById(""coursetopic"").innerText = foldername;
}
getCourseFolder();

Get certified




.cls-1{fill:#04aa6b;}.cls-2{font-size:23px;}.cls-2,.cls-3,.cls-4{fill:#fff;}.cls-2,.cls-3{font-family:RobotoMono-Medium, Roboto Mono;font-weight:500;}.cls-3{font-size:20.08px;}w3schools CERTIFIED  .  2022





❮ Home
Next ❯",html
1,https://www.w3schools.com/html/html_intro.asp,"HTML Introduction

❮ Previous
Next ❯


HTML is the standard markup language for creating Web pages.

What is HTML?

HTML stands for Hyper Text Markup Language
HTML is the standard markup language for creating Web pages
HTML describes the structure of a Web page
HTML consists of a series of elements
HTML elements tell the browser how to display the content
HTML elements label pieces of content such as ""this is a heading"", ""this 
  is a paragraph"", ""this is a link"", etc.


A Simple HTML Document

Example

 <!DOCTYPE html>
<html><head><title>Page Title</title>
 </head>
<body><h1>My First Heading</h1><p>My first paragraph.</p>
    </body></html>

Try it Yourself »

Example Explained

The <!DOCTYPE html> declaration defines 
that this document is an HTML5 document
The <html> element is the root element of an HTML 
page
The <head> element contains meta information about the 
 HTML page
The <title> element specifies a title for the 
 HTML page (which is shown in the browser's title bar or in the page's tab)
The <body> element defines the 
 document's body, and is a container for all the visible contents, such as 
 headings, paragraphs, images, hyperlinks, tables, lists, etc.
The <h1> element defines a large heading
The <p> element defines a paragraph


What is an HTML Element?
An HTML element is defined by a start tag, some content, and an end tag:

<tagname>Content goes here...</tagname>

The HTML element is everything from the start tag to the end tag:

<h1>My 
  First Heading</h1>


<p>My first paragraph.</p>



Start tag
Element content
End tag


<h1>
My First Heading
</h1>


<p>
My first paragraph.
</p>


<br>
none
none



Note: Some HTML elements have no content (like the <br> 
element). These elements are called empty elements. Empty elements do not have an end tag!








Web Browsers
The purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them 
correctly.
A browser does not display the HTML tags, but uses them to determine how to display the document:


HTML Page Structure
Below is a visualization of an HTML page structure:
<html>
<head>
<title>Page title</title>

</head>

<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

</body>

</html>


Note: The content inside the <body> section (the white area above) 
will be displayed in a browser. The content inside the <title> element will be 
shown in the browser's title bar or in the page's tab.


HTML History
Since the early days of the World Wide Web, there have been many versions of HTML:


Year
Version


1989
Tim Berners-Lee invented www


1991
Tim Berners-Lee invented HTML


1993
Dave Raggett drafted HTML+


1995
HTML Working Group defined HTML 2.0


1997
W3C Recommendation: HTML 3.2


1999
W3C Recommendation: HTML 4.01


2000
W3C Recommendation: XHTML 1.0


2008
WHATWG HTML5 First Public Draft


2012
WHATWG HTML5 Living Standard


2014
W3C Recommendation: HTML5


2016
W3C Candidate Recommendation: HTML 5.1


2017
W3C Recommendation: HTML5.1 2nd Edition


2017
W3C Recommendation: HTML5.2



This tutorial follows the latest HTML5 standard.



❮ Previous
Next ❯",html
1,https://www.w3schools.com/html/html_intro.asp,"HTML Introduction

❮ Previous
Next ❯


HTML is the standard markup language for creating Web pages.

What is HTML?

HTML stands for Hyper Text Markup Language
HTML is the standard markup language for creating Web pages
HTML describes the structure of a Web page
HTML consists of a series of elements
HTML elements tell the browser how to display the content
HTML elements label pieces of content such as ""this is a heading"", ""this 
  is a paragraph"", ""this is a link"", etc.


A Simple HTML Document

Example

 <!DOCTYPE html>
<html><head><title>Page Title</title>
 </head>
<body><h1>My First Heading</h1><p>My first paragraph.</p>
    </body></html>

Try it Yourself »

Example Explained

The <!DOCTYPE html> declaration defines 
that this document is an HTML5 document
The <html> element is the root element of an HTML 
page
The <head> element contains meta information about the 
 HTML page
The <title> element specifies a title for the 
 HTML page (which is shown in the browser's title bar or in the page's tab)
The <body> element defines the 
 document's body, and is a container for all the visible contents, such as 
 headings, paragraphs, images, hyperlinks, tables, lists, etc.
The <h1> element defines a large heading
The <p> element defines a paragraph


What is an HTML Element?
An HTML element is defined by a start tag, some content, and an end tag:

<tagname>Content goes here...</tagname>

The HTML element is everything from the start tag to the end tag:

<h1>My 
  First Heading</h1>


<p>My first paragraph.</p>



Start tag
Element content
End tag


<h1>
My First Heading
</h1>


<p>
My first paragraph.
</p>


<br>
none
none



Note: Some HTML elements have no content (like the <br> 
element). These elements are called empty elements. Empty elements do not have an end tag!








Web Browsers
The purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them 
correctly.
A browser does not display the HTML tags, but uses them to determine how to display the document:


HTML Page Structure
Below is a visualization of an HTML page structure:
<html>
<head>
<title>Page title</title>

</head>

<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

</body>

</html>


Note: The content inside the <body> section (the white area above) 
will be displayed in a browser. The content inside the <title> element will be 
shown in the browser's title bar or in the page's tab.


HTML History
Since the early days of the World Wide Web, there have been many versions of HTML:


Year
Version


1989
Tim Berners-Lee invented www


1991
Tim Berners-Lee invented HTML


1993
Dave Raggett drafted HTML+


1995
HTML Working Group defined HTML 2.0


1997
W3C Recommendation: HTML 3.2


1999
W3C Recommendation: HTML 4.01


2000
W3C Recommendation: XHTML 1.0


2008
WHATWG HTML5 First Public Draft


2012
WHATWG HTML5 Living Standard


2014
W3C Recommendation: HTML5


2016
W3C Candidate Recommendation: HTML 5.1


2017
W3C Recommendation: HTML5.1 2nd Edition


2017
W3C Recommendation: HTML5.2



This tutorial follows the latest HTML5 standard.



❮ Previous
Next ❯",html
2,https://www.w3schools.com/html/html_editors.asp,"HTML Editors

❮ Previous
Next ❯


A simple text editor is all you need to learn HTML.

Learn HTML Using Notepad or TextEdit
Web pages can be created and modified by using professional HTML editors.
However, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).
We believe in that using a simple text editor is a good way to learn HTML.
Follow the steps below to create your first web page with Notepad or TextEdit.

Step 1: Open Notepad (PC)
Windows 8 or later:
Open the Start Screen (the window symbol at the bottom left on your screen). Type Notepad.
Windows 7 or earlier:
Open Start > 
Programs > Accessories > Notepad

Step 1: Open TextEdit (Mac)
Open Finder > Applications > TextEdit
Also change some preferences to get the application to 
save files correctly.
In Preferences > Format > 
choose ""Plain Text""
Then under ""Open and Save"", check the box that says ""Display HTML files as HTML code instead of formatted text"".
Then open a new document to place the code.

Step 2: Write Some HTML
Write or copy the following HTML code into Notepad:


<!DOCTYPE html><html><body><h1>My First Heading</h1>
<p>My first paragraph.</p></body></html>









Step 3: Save the HTML Page
Save the file on your computer. Select File > Save as in the Notepad menu.
Name the file ""index.htm"" and set the encoding to 
UTF-8 (which is the preferred encoding for HTML files).


Tip: You can use either .htm or .html as file extension. There is no difference, it is up to you.


Step 4: View the HTML Page in Your Browser
Open the saved HTML file in your favorite browser (double click on the file, 
or right-click - and choose ""Open with"").
The result will look much like this:


W3Schools Online Editor - ""Try it Yourself""
With our free online editor, you can edit the HTML code and view the result in your browser.
It is the perfect tool when you want to test code fast. It also has color 
coding and the ability to save and share code with others:

Example

<!DOCTYPE html>
<html><head><title>Page Title</title>
</head><body><h1>This is a Heading</h1><p>This is a paragraph.</p>
</body></html>

Try it Yourself »

Click on the ""Try it Yourself"" button to see how it works.

W3Schools Spaces
If you want to create your own website and save your code online, try our 
free website builder, called W3schools Spaces:


Get your own Website



❮ Previous
Next ❯",html
2,https://www.w3schools.com/html/html_editors.asp,"HTML Editors

❮ Previous
Next ❯


A simple text editor is all you need to learn HTML.

Learn HTML Using Notepad or TextEdit
Web pages can be created and modified by using professional HTML editors.
However, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).
We believe in that using a simple text editor is a good way to learn HTML.
Follow the steps below to create your first web page with Notepad or TextEdit.

Step 1: Open Notepad (PC)
Windows 8 or later:
Open the Start Screen (the window symbol at the bottom left on your screen). Type Notepad.
Windows 7 or earlier:
Open Start > 
Programs > Accessories > Notepad

Step 1: Open TextEdit (Mac)
Open Finder > Applications > TextEdit
Also change some preferences to get the application to 
save files correctly.
In Preferences > Format > 
choose ""Plain Text""
Then under ""Open and Save"", check the box that says ""Display HTML files as HTML code instead of formatted text"".
Then open a new document to place the code.

Step 2: Write Some HTML
Write or copy the following HTML code into Notepad:


<!DOCTYPE html><html><body><h1>My First Heading</h1>
<p>My first paragraph.</p></body></html>









Step 3: Save the HTML Page
Save the file on your computer. Select File > Save as in the Notepad menu.
Name the file ""index.htm"" and set the encoding to 
UTF-8 (which is the preferred encoding for HTML files).


Tip: You can use either .htm or .html as file extension. There is no difference, it is up to you.


Step 4: View the HTML Page in Your Browser
Open the saved HTML file in your favorite browser (double click on the file, 
or right-click - and choose ""Open with"").
The result will look much like this:


W3Schools Online Editor - ""Try it Yourself""
With our free online editor, you can edit the HTML code and view the result in your browser.
It is the perfect tool when you want to test code fast. It also has color 
coding and the ability to save and share code with others:

Example

<!DOCTYPE html>
<html><head><title>Page Title</title>
</head><body><h1>This is a Heading</h1><p>This is a paragraph.</p>
</body></html>

Try it Yourself »

Click on the ""Try it Yourself"" button to see how it works.

W3Schools Spaces
If you want to create your own website and save your code online, try our 
free website builder, called W3schools Spaces:


Get your own Website



❮ Previous
Next ❯",html
3,https://www.w3schools.com/html/html_basic.asp,"HTML Basic Examples

❮ Previous
Next ❯


In this chapter we will show some basic HTML examples.
Don't worry if we use tags you have not learned about yet.

HTML Documents
All HTML documents must start with a document type declaration: <!DOCTYPE html>.
The HTML document itself begins with <html> and ends with </html>.
The visible part of the HTML document is between <body> and </body>. 

Example

<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>
Try it Yourself »


The <!DOCTYPE> Declaration
The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.
It must only appear once, at the top of the page (before any HTML tags). 
The <!DOCTYPE> declaration is not case sensitive.
The <!DOCTYPE> declaration for HTML5 is:


<!DOCTYPE html>


HTML Headings
HTML headings are defined with the <h1> to <h6> tags.
<h1> defines the most important heading. <h6> defines the least important 
heading: 

Example

<h1>This is heading 1</h1>
<h2>This is heading 2</h2>
<h3>This is heading 3</h3>

Try it Yourself »








HTML Paragraphs
HTML paragraphs are defined with the <p> tag:

Example

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

Try it Yourself »


HTML Links
HTML links are defined with the <a> tag:

Example

<a href=""https://www.w3schools.com"">This is a link</a>

Try it Yourself »

The link's destination is specified in the href attribute. 
Attributes are used to provide additional information about HTML elements.
You will learn more about attributes in a later chapter.

HTML Images
HTML images are defined with the <img> tag.
The source file (src), alternative text (alt), 
width, and height are provided as attributes:

Example

<img src=""w3schools.jpg"" alt=""W3Schools.com"" width=""104"" height=""142"">

Try it Yourself »


How to View HTML Source?
Have you ever seen a Web page and wondered ""Hey! How did they do that?""
View HTML Source Code:
Right-click in an HTML page and select ""View Page Source"" (in 
Chrome) or ""View Source"" (in Edge), or similar in other browsers. This will open a window 
containing the HTML source code of the page.
Inspect an HTML Element:
Right-click on an element (or a blank area), and choose ""Inspect"" or 
""Inspect Element"" to see what elements are made up of (you will see both 
the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the 
Elements or Styles panel that opens.


❮ Previous
Next ❯",html
3,https://www.w3schools.com/html/html_basic.asp,"HTML Basic Examples

❮ Previous
Next ❯


In this chapter we will show some basic HTML examples.
Don't worry if we use tags you have not learned about yet.

HTML Documents
All HTML documents must start with a document type declaration: <!DOCTYPE html>.
The HTML document itself begins with <html> and ends with </html>.
The visible part of the HTML document is between <body> and </body>. 

Example

<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>
Try it Yourself »


The <!DOCTYPE> Declaration
The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.
It must only appear once, at the top of the page (before any HTML tags). 
The <!DOCTYPE> declaration is not case sensitive.
The <!DOCTYPE> declaration for HTML5 is:


<!DOCTYPE html>


HTML Headings
HTML headings are defined with the <h1> to <h6> tags.
<h1> defines the most important heading. <h6> defines the least important 
heading: 

Example

<h1>This is heading 1</h1>
<h2>This is heading 2</h2>
<h3>This is heading 3</h3>

Try it Yourself »








HTML Paragraphs
HTML paragraphs are defined with the <p> tag:

Example

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

Try it Yourself »


HTML Links
HTML links are defined with the <a> tag:

Example

<a href=""https://www.w3schools.com"">This is a link</a>

Try it Yourself »

The link's destination is specified in the href attribute. 
Attributes are used to provide additional information about HTML elements.
You will learn more about attributes in a later chapter.

HTML Images
HTML images are defined with the <img> tag.
The source file (src), alternative text (alt), 
width, and height are provided as attributes:

Example

<img src=""w3schools.jpg"" alt=""W3Schools.com"" width=""104"" height=""142"">

Try it Yourself »


How to View HTML Source?
Have you ever seen a Web page and wondered ""Hey! How did they do that?""
View HTML Source Code:
Right-click in an HTML page and select ""View Page Source"" (in 
Chrome) or ""View Source"" (in Edge), or similar in other browsers. This will open a window 
containing the HTML source code of the page.
Inspect an HTML Element:
Right-click on an element (or a blank area), and choose ""Inspect"" or 
""Inspect Element"" to see what elements are made up of (you will see both 
the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the 
Elements or Styles panel that opens.


❮ Previous
Next ❯",html
4,https://www.w3schools.com/html/html_elements.asp,"HTML Elements

❮ Previous
Next ❯


An HTML element is defined by a start tag, some content, and an 
end tag.

HTML Elements
The HTML element is everything from the start tag to the end tag:

<tagname>Content goes here...</tagname>

Examples of some HTML elements:

<h1>My 
  First Heading</h1>


<p>My first paragraph.</p>



Start tag
Element content
End tag


<h1>
My First Heading
</h1>


<p>
My first paragraph.
</p>


<br>
none
none



Note: Some HTML elements have no content (like the <br> 
element). These elements are called empty elements. Empty elements do not have an end tag!


Nested HTML Elements
HTML elements can be nested (this means that elements can contain other elements).
All HTML documents consist of nested HTML elements.
The following example contains four HTML elements (<html>, <body>, <h1> 
and <p>):

Example

<!DOCTYPE html>
<html><body>
 <h1>My First Heading</h1><p>My first paragraph.</p>
</body></html>

Try it Yourself »

Example Explained
The <html> element is the root element 
and it defines the whole HTML document.
It has a start tag <html> and an end tag </html>.
Then, inside the <html> element there is 
a <body> 
element:


<body>
 <h1>My First Heading</h1><p>My first paragraph.</p>
</body>

The <body> element defines the 
document's body.
It has a start tag <body> and an end tag </body>.
Then, inside the <body> element there 
are two other elements:
<h1> and 
<p>:


 <h1>My First Heading</h1><p>My first paragraph.</p>
The <h1> element defines a heading.
It has a start tag <h1> and an end tag </h1>:


<h1>My First Heading</h1>


The <p> element defines a paragraph.
It has a start tag <p> and an end tag </p>:


<p>My first paragraph.</p>









Never Skip the End Tag
Some HTML elements will display correctly, even if you forget the end tag:

Example

<html><body>
 <p>This is a paragraph
 <p>This is a paragraph
</body></html>
Try it Yourself »

However, never rely on this! Unexpected results and errors may occur if you forget the end tag!

Empty HTML Elements
HTML elements with no content are called empty elements.
The <br> tag defines a line break, and 
is an empty element without a closing tag:

Example

  <p>This is a <br> paragraph with a line break.</p>
Try it Yourself »


HTML is Not Case Sensitive
HTML tags are not case sensitive: <P> means the same as <p>.
The HTML standard does not require lowercase tags, but W3C
recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.

At W3Schools we always use lowercase tag names.


HTML Tag Reference
W3Schools' tag reference contains additional information about these tags and their attributes.


Tag
Description


<html>
Defines the root of an HTML document


<body>
Defines the document's body


<h1> to <h6>
Defines HTML headings



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
4,https://www.w3schools.com/html/html_elements.asp,"HTML Elements

❮ Previous
Next ❯


An HTML element is defined by a start tag, some content, and an 
end tag.

HTML Elements
The HTML element is everything from the start tag to the end tag:

<tagname>Content goes here...</tagname>

Examples of some HTML elements:

<h1>My 
  First Heading</h1>


<p>My first paragraph.</p>



Start tag
Element content
End tag


<h1>
My First Heading
</h1>


<p>
My first paragraph.
</p>


<br>
none
none



Note: Some HTML elements have no content (like the <br> 
element). These elements are called empty elements. Empty elements do not have an end tag!


Nested HTML Elements
HTML elements can be nested (this means that elements can contain other elements).
All HTML documents consist of nested HTML elements.
The following example contains four HTML elements (<html>, <body>, <h1> 
and <p>):

Example

<!DOCTYPE html>
<html><body>
 <h1>My First Heading</h1><p>My first paragraph.</p>
</body></html>

Try it Yourself »

Example Explained
The <html> element is the root element 
and it defines the whole HTML document.
It has a start tag <html> and an end tag </html>.
Then, inside the <html> element there is 
a <body> 
element:


<body>
 <h1>My First Heading</h1><p>My first paragraph.</p>
</body>

The <body> element defines the 
document's body.
It has a start tag <body> and an end tag </body>.
Then, inside the <body> element there 
are two other elements:
<h1> and 
<p>:


 <h1>My First Heading</h1><p>My first paragraph.</p>
The <h1> element defines a heading.
It has a start tag <h1> and an end tag </h1>:


<h1>My First Heading</h1>


The <p> element defines a paragraph.
It has a start tag <p> and an end tag </p>:


<p>My first paragraph.</p>









Never Skip the End Tag
Some HTML elements will display correctly, even if you forget the end tag:

Example

<html><body>
 <p>This is a paragraph
 <p>This is a paragraph
</body></html>
Try it Yourself »

However, never rely on this! Unexpected results and errors may occur if you forget the end tag!

Empty HTML Elements
HTML elements with no content are called empty elements.
The <br> tag defines a line break, and 
is an empty element without a closing tag:

Example

  <p>This is a <br> paragraph with a line break.</p>
Try it Yourself »


HTML is Not Case Sensitive
HTML tags are not case sensitive: <P> means the same as <p>.
The HTML standard does not require lowercase tags, but W3C
recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.

At W3Schools we always use lowercase tag names.


HTML Tag Reference
W3Schools' tag reference contains additional information about these tags and their attributes.


Tag
Description


<html>
Defines the root of an HTML document


<body>
Defines the document's body


<h1> to <h6>
Defines HTML headings



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
5,https://www.w3schools.com/html/html_attributes.asp,"HTML Attributes

❮ Previous
Next ❯


HTML attributes provide additional information about HTML elements.

HTML Attributes

All HTML elements can have attributes
Attributes provide additional information about elements
Attributes are always specified in the start tag
Attributes usually come in name/value pairs like: name=""value""


The href Attribute
The <a> tag defines a hyperlink. The 
href attribute specifies the URL of the page 
the link goes to:

Example

<a href=""https://www.w3schools.com"">Visit W3Schools</a>

Try it Yourself »

You will learn more about links in our HTML Links
chapter.

The src Attribute
The <img> tag is used to embed an 
image in an HTML page. The src attribute 
specifies the path to the image to be displayed:

Example

<img src=""img_girl.jpg"">

Try it Yourself »

There are two ways to specify the URL in the src 
attribute:
1. Absolute URL - Links to an external image that is hosted 
on another website. Example: src=""https://www.w3schools.com/images/img_girl.jpg"".
Notes: External images might be under copyright. If you do 
not get permission to use it, you may be in violation of copyright laws. In 
addition, you cannot control external images; it can suddenly be removed or 
changed.
2. Relative URL - Links to an image that is hosted within 
the website. Here, the URL does not include the domain name. If the URL begins 
without a slash, it will be relative to the current page. Example: src=""img_girl.jpg"". 
If the URL begins with a slash, it will be relative to the domain. Example: src=""/images/img_girl.jpg"".
Tip: It is almost always best to use relative URLs. They 
will not break if you change domain.

The width and height Attributes
The <img> tag should also contain the
width and 
height attributes, which specifies the width and 
height of the image (in pixels):

Example

<img src=""img_girl.jpg"" width=""500"" height=""600"">

Try it Yourself »


The alt Attribute
The required alt attribute for the <img> 
tag specifies an 
alternate text for an image, if the image for some reason cannot be displayed. 
This can be due to 
slow connection, or an error in the src attribute, or if the user uses a screen 
reader.

Example

 <img src=""img_girl.jpg"" alt=""Girl 
  with a jacket"">

Try it Yourself »


Example
See what happens if we try to display an image that does not exist:

 <img src=""img_typo.jpg"" alt=""Girl 
  with a jacket"">

Try it Yourself »

You will learn more about images in our HTML Images chapter.







The style Attribute
The style attribute is used to add styles to 
an element, such as color, font, size, and more.

Example

<p style=""color:red;"">This is a red paragraph.</p>
  
Try it Yourself »

You will learn more about styles in our HTML Styles chapter.

The lang Attribute
You should always include the lang attribute 
inside the <html> tag, to declare the 
language of the Web page. This is meant to assist search engines and browsers.
The following example specifies English as the language:


<!DOCTYPE html><html lang=""en""><body>...</body></html>


Country codes can also be added to the language code in the lang 
attribute. So, the first two characters define the language of the HTML page, 
and the last two characters define the country.
The following example specifies English as the language and United States as 
the country:


<!DOCTYPE html><html lang=""en-US""><body>...</body></html>


You can see all the language codes in our
HTML Language Code Reference.

The title Attribute
The title attribute defines some extra 
information about an 
element.
The value of the title attribute will be displayed as a tooltip when 
you mouse over the element:

Example

 <p title=""I'm a tooltip"">This is a paragraph.</p>

Try it Yourself »


We Suggest: Always Use Lowercase Attributes
The HTML standard does not require lowercase attribute names.
The title attribute (and all other attributes) can be written with uppercase or lowercase 
like title or TITLE.
However, W3C recommends lowercase attributes in HTML, and demands 
lowercase attributes for stricter document types like XHTML.

At W3Schools we always use lowercase attribute names.


We Suggest: Always Quote Attribute Values
The HTML standard does not require quotes around attribute values.
However, W3C recommends quotes in HTML, and demands quotes for 
stricter document types like XHTML.

Good:

  <a href=""https://www.w3schools.com/html/"">Visit our HTML tutorial</a>

Bad:

  <a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>
Sometimes you have to use quotes. This example will not display 
the title attribute correctly, because it contains a space:

Example

 <p
 title=About W3Schools>
Try it Yourself »


 At W3Schools we always use quotes around attribute values.


Single or Double Quotes?
Double quotes around attribute values are the most common in HTML, but single 
quotes can also be used.
In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:


<p title='John ""ShotGun"" Nelson'>


Or vice versa:


<p title=""John 'ShotGun' Nelson"">
Try it Yourself »


Chapter Summary

All HTML elements can have attributes
The href attribute of 
  <a> specifies the URL of the page the link goes to
The src attribute of 
  <img> specifies the path to the image to be displayed
The width and height attributes 
  of <img> provide size information for images
The alt attribute of 
  <img> provides an alternate text for an image
The style attribute is used to add styles 
  to an element, such as color, font, size, and more
The lang attribute 
  of the <html> tag declares the 
  language of the Web page
The title attribute defines some extra 
  information about an element


HTML Exercises

Test Yourself With Exercises

Exercise:
Add a ""tooltip"" to the paragraph below with the text ""About W3Schools"".

<p =""About W3Schools"">W3Schools is a web developer's site.</p>


Submit Answer »
Start the Exercise



HTML Attribute Reference

A complete list of all attributes for each HTML element, is listed in our:
HTML Attribute Reference.



❮ Previous
Next ❯",html
5,https://www.w3schools.com/html/html_attributes.asp,"HTML Attributes

❮ Previous
Next ❯


HTML attributes provide additional information about HTML elements.

HTML Attributes

All HTML elements can have attributes
Attributes provide additional information about elements
Attributes are always specified in the start tag
Attributes usually come in name/value pairs like: name=""value""


The href Attribute
The <a> tag defines a hyperlink. The 
href attribute specifies the URL of the page 
the link goes to:

Example

<a href=""https://www.w3schools.com"">Visit W3Schools</a>

Try it Yourself »

You will learn more about links in our HTML Links
chapter.

The src Attribute
The <img> tag is used to embed an 
image in an HTML page. The src attribute 
specifies the path to the image to be displayed:

Example

<img src=""img_girl.jpg"">

Try it Yourself »

There are two ways to specify the URL in the src 
attribute:
1. Absolute URL - Links to an external image that is hosted 
on another website. Example: src=""https://www.w3schools.com/images/img_girl.jpg"".
Notes: External images might be under copyright. If you do 
not get permission to use it, you may be in violation of copyright laws. In 
addition, you cannot control external images; it can suddenly be removed or 
changed.
2. Relative URL - Links to an image that is hosted within 
the website. Here, the URL does not include the domain name. If the URL begins 
without a slash, it will be relative to the current page. Example: src=""img_girl.jpg"". 
If the URL begins with a slash, it will be relative to the domain. Example: src=""/images/img_girl.jpg"".
Tip: It is almost always best to use relative URLs. They 
will not break if you change domain.

The width and height Attributes
The <img> tag should also contain the
width and 
height attributes, which specifies the width and 
height of the image (in pixels):

Example

<img src=""img_girl.jpg"" width=""500"" height=""600"">

Try it Yourself »


The alt Attribute
The required alt attribute for the <img> 
tag specifies an 
alternate text for an image, if the image for some reason cannot be displayed. 
This can be due to 
slow connection, or an error in the src attribute, or if the user uses a screen 
reader.

Example

 <img src=""img_girl.jpg"" alt=""Girl 
  with a jacket"">

Try it Yourself »


Example
See what happens if we try to display an image that does not exist:

 <img src=""img_typo.jpg"" alt=""Girl 
  with a jacket"">

Try it Yourself »

You will learn more about images in our HTML Images chapter.







The style Attribute
The style attribute is used to add styles to 
an element, such as color, font, size, and more.

Example

<p style=""color:red;"">This is a red paragraph.</p>
  
Try it Yourself »

You will learn more about styles in our HTML Styles chapter.

The lang Attribute
You should always include the lang attribute 
inside the <html> tag, to declare the 
language of the Web page. This is meant to assist search engines and browsers.
The following example specifies English as the language:


<!DOCTYPE html><html lang=""en""><body>...</body></html>


Country codes can also be added to the language code in the lang 
attribute. So, the first two characters define the language of the HTML page, 
and the last two characters define the country.
The following example specifies English as the language and United States as 
the country:


<!DOCTYPE html><html lang=""en-US""><body>...</body></html>


You can see all the language codes in our
HTML Language Code Reference.

The title Attribute
The title attribute defines some extra 
information about an 
element.
The value of the title attribute will be displayed as a tooltip when 
you mouse over the element:

Example

 <p title=""I'm a tooltip"">This is a paragraph.</p>

Try it Yourself »


We Suggest: Always Use Lowercase Attributes
The HTML standard does not require lowercase attribute names.
The title attribute (and all other attributes) can be written with uppercase or lowercase 
like title or TITLE.
However, W3C recommends lowercase attributes in HTML, and demands 
lowercase attributes for stricter document types like XHTML.

At W3Schools we always use lowercase attribute names.


We Suggest: Always Quote Attribute Values
The HTML standard does not require quotes around attribute values.
However, W3C recommends quotes in HTML, and demands quotes for 
stricter document types like XHTML.

Good:

  <a href=""https://www.w3schools.com/html/"">Visit our HTML tutorial</a>

Bad:

  <a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>
Sometimes you have to use quotes. This example will not display 
the title attribute correctly, because it contains a space:

Example

 <p
 title=About W3Schools>
Try it Yourself »


 At W3Schools we always use quotes around attribute values.


Single or Double Quotes?
Double quotes around attribute values are the most common in HTML, but single 
quotes can also be used.
In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:


<p title='John ""ShotGun"" Nelson'>


Or vice versa:


<p title=""John 'ShotGun' Nelson"">
Try it Yourself »


Chapter Summary

All HTML elements can have attributes
The href attribute of 
  <a> specifies the URL of the page the link goes to
The src attribute of 
  <img> specifies the path to the image to be displayed
The width and height attributes 
  of <img> provide size information for images
The alt attribute of 
  <img> provides an alternate text for an image
The style attribute is used to add styles 
  to an element, such as color, font, size, and more
The lang attribute 
  of the <html> tag declares the 
  language of the Web page
The title attribute defines some extra 
  information about an element


HTML Exercises

Test Yourself With Exercises

Exercise:
Add a ""tooltip"" to the paragraph below with the text ""About W3Schools"".

<p =""About W3Schools"">W3Schools is a web developer's site.</p>


Submit Answer »
Start the Exercise



HTML Attribute Reference

A complete list of all attributes for each HTML element, is listed in our:
HTML Attribute Reference.



❮ Previous
Next ❯",html
6,https://www.w3schools.com/html/html_headings.asp,"HTML Headings

❮ Previous
Next ❯


HTML headings are titles or subtitles that you want to display on a webpage.


Example

Heading 1
Heading 2
Heading 3
Heading 4
Heading 5
Heading 6

Try it Yourself »


HTML Headings
HTML headings are defined with the <h1> to <h6> tags.
<h1> defines the most important heading. <h6> defines the least important heading.

Example

<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3><h4>Heading 4</h4><h5>Heading 5</h5><h6>Heading 6</h6>
Try it Yourself »


Note: Browsers automatically add some white space (a margin) before and after a heading.


Headings Are Important
Search engines use the headings to index the structure and content of your web pages.
Users often skim a page by its headings. It is important to use headings to show the document structure.
<h1> headings should be used for main headings, followed by <h2> headings, then the less important 
<h3>, and so on.

Note: Use HTML headings for headings only. Don't use headings to make text 
  BIG or bold.


Bigger Headings
Each HTML heading has a default size. However, you can specify the size for any heading 
with the style attribute, using the CSS font-size property:

Example

<h1 
  style=""font-size:60px;"">Heading 1</h1>

Try it Yourself »








HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML tag to add a heading with the text ""London"".




<p>London is the capital city of England.
It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.</p>


Submit Answer »
Start the Exercise



HTML Tag Reference
W3Schools' tag reference contains additional information about these tags and their attributes.


Tag
Description


<html>
Defines the root of an HTML document


<body>
Defines the document's body


<h1> to <h6>
Defines HTML headings



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
6,https://www.w3schools.com/html/html_headings.asp,"HTML Headings

❮ Previous
Next ❯


HTML headings are titles or subtitles that you want to display on a webpage.


Example

Heading 1
Heading 2
Heading 3
Heading 4
Heading 5
Heading 6

Try it Yourself »


HTML Headings
HTML headings are defined with the <h1> to <h6> tags.
<h1> defines the most important heading. <h6> defines the least important heading.

Example

<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3><h4>Heading 4</h4><h5>Heading 5</h5><h6>Heading 6</h6>
Try it Yourself »


Note: Browsers automatically add some white space (a margin) before and after a heading.


Headings Are Important
Search engines use the headings to index the structure and content of your web pages.
Users often skim a page by its headings. It is important to use headings to show the document structure.
<h1> headings should be used for main headings, followed by <h2> headings, then the less important 
<h3>, and so on.

Note: Use HTML headings for headings only. Don't use headings to make text 
  BIG or bold.


Bigger Headings
Each HTML heading has a default size. However, you can specify the size for any heading 
with the style attribute, using the CSS font-size property:

Example

<h1 
  style=""font-size:60px;"">Heading 1</h1>

Try it Yourself »








HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML tag to add a heading with the text ""London"".




<p>London is the capital city of England.
It is the most populous city in the United Kingdom,
with a metropolitan area of over 13 million inhabitants.</p>


Submit Answer »
Start the Exercise



HTML Tag Reference
W3Schools' tag reference contains additional information about these tags and their attributes.


Tag
Description


<html>
Defines the root of an HTML document


<body>
Defines the document's body


<h1> to <h6>
Defines HTML headings



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
7,https://www.w3schools.com/html/html_paragraphs.asp,"HTML Paragraphs

❮ Previous
Next ❯


A paragraph always starts on a new line, and is usually a block of text.

HTML Paragraphs
The HTML <p> element defines a paragraph.
A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.

Example

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

Try it Yourself »


HTML Display
You cannot be sure how HTML will be displayed.
Large or small screens, and resized windows will create different results. 
With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.
The browser will automatically remove any extra spaces and lines when the page is 
displayed:

Example

 <p>This paragraphcontains a lot of linesin the source code,but 
 the browser ignores it.</p><p>This paragraphcontains         
 a lot of spacesin the source         
 code,but the        browser ignores 
 it.</p>
Try it Yourself »








HTML Horizontal Rules
The <hr> tag defines a thematic break in an HTML page, and is most often 
displayed as a horizontal rule.
The <hr> element is used to separate content (or define a change) in an HTML 
page:

Example

 <h1>This is heading 1</h1><p>This is some text.</p><hr><h2>This is heading 2</h2><p>This is some other text.</p><hr>

Try it Yourself »

The <hr> tag is an empty tag, which means that it has no end tag.

HTML Line Breaks
The HTML <br> element defines a line break.
Use <br> if you want a line break (a new line) without starting a new paragraph:

Example

<p>This is<br>a paragraph<br>with line breaks.</p>
Try it Yourself »

The <br> tag is an empty tag, which means that it has no end tag.

The Poem Problem
This poem will display on a single line:

Example

 <p>  My Bonnie lies over 
 the ocean.  My Bonnie lies over the sea.  My Bonnie 
 lies over the ocean.  Oh, bring back my Bonnie to me.</p>
Try it Yourself »


Solution - The HTML <pre> Element
The HTML <pre> element defines preformatted text.
The text inside a <pre> element is displayed in a fixed-width font (usually 
Courier), and it preserves both spaces and line breaks:

Example

 <pre>  My Bonnie lies over the ocean.
  My Bonnie lies over the sea.  My Bonnie lies over the 
ocean.  Oh, bring back my Bonnie to me.</pre>
Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML tag to add a paragraph with the text ""Hello World!"".

<html>

<body>



</body>

</html>


Submit Answer »
Start the Exercise



HTML Tag Reference
W3Schools' tag reference contains additional information about HTML elements and their attributes.


Tag
Description


<p>
Defines a paragraph


<hr>
Defines a thematic change in the content


<br>
Inserts a single line break


<pre>
Defines pre-formatted text



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
7,https://www.w3schools.com/html/html_paragraphs.asp,"HTML Paragraphs

❮ Previous
Next ❯


A paragraph always starts on a new line, and is usually a block of text.

HTML Paragraphs
The HTML <p> element defines a paragraph.
A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.

Example

<p>This is a paragraph.</p>
<p>This is another paragraph.</p>

Try it Yourself »


HTML Display
You cannot be sure how HTML will be displayed.
Large or small screens, and resized windows will create different results. 
With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.
The browser will automatically remove any extra spaces and lines when the page is 
displayed:

Example

 <p>This paragraphcontains a lot of linesin the source code,but 
 the browser ignores it.</p><p>This paragraphcontains         
 a lot of spacesin the source         
 code,but the        browser ignores 
 it.</p>
Try it Yourself »








HTML Horizontal Rules
The <hr> tag defines a thematic break in an HTML page, and is most often 
displayed as a horizontal rule.
The <hr> element is used to separate content (or define a change) in an HTML 
page:

Example

 <h1>This is heading 1</h1><p>This is some text.</p><hr><h2>This is heading 2</h2><p>This is some other text.</p><hr>

Try it Yourself »

The <hr> tag is an empty tag, which means that it has no end tag.

HTML Line Breaks
The HTML <br> element defines a line break.
Use <br> if you want a line break (a new line) without starting a new paragraph:

Example

<p>This is<br>a paragraph<br>with line breaks.</p>
Try it Yourself »

The <br> tag is an empty tag, which means that it has no end tag.

The Poem Problem
This poem will display on a single line:

Example

 <p>  My Bonnie lies over 
 the ocean.  My Bonnie lies over the sea.  My Bonnie 
 lies over the ocean.  Oh, bring back my Bonnie to me.</p>
Try it Yourself »


Solution - The HTML <pre> Element
The HTML <pre> element defines preformatted text.
The text inside a <pre> element is displayed in a fixed-width font (usually 
Courier), and it preserves both spaces and line breaks:

Example

 <pre>  My Bonnie lies over the ocean.
  My Bonnie lies over the sea.  My Bonnie lies over the 
ocean.  Oh, bring back my Bonnie to me.</pre>
Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML tag to add a paragraph with the text ""Hello World!"".

<html>

<body>



</body>

</html>


Submit Answer »
Start the Exercise



HTML Tag Reference
W3Schools' tag reference contains additional information about HTML elements and their attributes.


Tag
Description


<p>
Defines a paragraph


<hr>
Defines a thematic change in the content


<br>
Inserts a single line break


<pre>
Defines pre-formatted text



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
8,https://www.w3schools.com/html/html_styles.asp,"HTML Styles

❮ Previous
Next ❯


The HTML style attribute is used to add styles to an element, such as color, font, size, and more.


Example

I am Red
I am Blue
I am Big

Try it Yourself »


The HTML Style Attribute
Setting the style of an HTML element, can be done with the style attribute.
The HTML style attribute has the following syntax:


 <tagname
style=""property:value;"">


The property is a CSS property. The value is a CSS value.

You will learn more about CSS later in this tutorial.


Background Color
The CSS background-color property defines the background color 
for an HTML element.

Example
Set the background color for a page to powderblue:

 <body style=""background-color:powderblue;""><h1>This is a heading</h1><p>This is a paragraph.</p></body>
Try it Yourself »


Example
Set background color for two different elements:

  <body><h1 style=""background-color:powderblue;"">This is a heading</h1><p 
  style=""background-color:tomato;"">This is a paragraph.</p></body>
Try it Yourself »








Text Color
The CSS color property defines the text color for 
an HTML element:

Example

 <h1 style=""color:blue;"">This is a heading</h1>
 <p style=""color:red;"">This is a paragraph.</p>
Try it Yourself »


Fonts
The CSS font-family property defines the font to be used  
for an HTML element:

Example

 <h1 style=""font-family:verdana;"">This is a heading</h1><p style=""font-family:courier;"">This is a paragraph.</p>
Try it Yourself »


Text Size
The CSS font-size property defines the text size for 
an HTML element:

Example

 <h1 style=""font-size:300%;"">This is a heading</h1><p 
style=""font-size:160%;"">This is a paragraph.</p>
Try it Yourself »


Text Alignment
The CSS text-align property defines the horizontal text alignment for an HTML element:

Example

 <h1 style=""text-align:center;"">Centered Heading</h1>
 <p style=""text-align:center;"">Centered paragraph.</p>
Try it Yourself »


Chapter Summary

Use the style attribute for styling HTML elements
Use background-color for background color
Use color for text colors
Use font-family for text fonts
Use font-size for text sizes
Use text-align for text alignment


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML attribute, and CSS, to set the color of the paragraph to ""blue"".

<p ="";"">This is a paragraph.</p>


Submit Answer »
Start the Exercise




❮ Previous
Next ❯",html
8,https://www.w3schools.com/html/html_styles.asp,"HTML Styles

❮ Previous
Next ❯


The HTML style attribute is used to add styles to an element, such as color, font, size, and more.


Example

I am Red
I am Blue
I am Big

Try it Yourself »


The HTML Style Attribute
Setting the style of an HTML element, can be done with the style attribute.
The HTML style attribute has the following syntax:


 <tagname
style=""property:value;"">


The property is a CSS property. The value is a CSS value.

You will learn more about CSS later in this tutorial.


Background Color
The CSS background-color property defines the background color 
for an HTML element.

Example
Set the background color for a page to powderblue:

 <body style=""background-color:powderblue;""><h1>This is a heading</h1><p>This is a paragraph.</p></body>
Try it Yourself »


Example
Set background color for two different elements:

  <body><h1 style=""background-color:powderblue;"">This is a heading</h1><p 
  style=""background-color:tomato;"">This is a paragraph.</p></body>
Try it Yourself »








Text Color
The CSS color property defines the text color for 
an HTML element:

Example

 <h1 style=""color:blue;"">This is a heading</h1>
 <p style=""color:red;"">This is a paragraph.</p>
Try it Yourself »


Fonts
The CSS font-family property defines the font to be used  
for an HTML element:

Example

 <h1 style=""font-family:verdana;"">This is a heading</h1><p style=""font-family:courier;"">This is a paragraph.</p>
Try it Yourself »


Text Size
The CSS font-size property defines the text size for 
an HTML element:

Example

 <h1 style=""font-size:300%;"">This is a heading</h1><p 
style=""font-size:160%;"">This is a paragraph.</p>
Try it Yourself »


Text Alignment
The CSS text-align property defines the horizontal text alignment for an HTML element:

Example

 <h1 style=""text-align:center;"">Centered Heading</h1>
 <p style=""text-align:center;"">Centered paragraph.</p>
Try it Yourself »


Chapter Summary

Use the style attribute for styling HTML elements
Use background-color for background color
Use color for text colors
Use font-family for text fonts
Use font-size for text sizes
Use text-align for text alignment


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML attribute, and CSS, to set the color of the paragraph to ""blue"".

<p ="";"">This is a paragraph.</p>


Submit Answer »
Start the Exercise




❮ Previous
Next ❯",html
9,https://www.w3schools.com/html/html_formatting.asp,"HTML Text Formatting

❮ Previous
Next ❯


HTML contains several elements for defining text with a special meaning.


Example

This text is bold
This text is italic
This is subscript and superscript

Try it Yourself »


HTML Formatting Elements
Formatting elements were designed to display special types of text:

<b> - Bold text
<strong> - Important text
<i> - Italic text
<em> - Emphasized text
<mark> - Marked text
<small> - Smaller text
<del> - Deleted text
<ins> - Inserted text
<sub> - Subscript text
<sup> - Superscript text


HTML <b> and <strong> Elements
The HTML <b> element defines bold text, 
without any extra importance.

Example

    <b>This text is bold</b>
Try it Yourself »

The HTML <strong> element defines text 
with strong importance. The content inside is typically displayed in bold.

Example

     <strong>This text is 
     important!</strong>
Try it Yourself »








HTML <i> and <em> Elements
The HTML <i> element defines a part of 
text in an alternate voice or mood. The content inside is typically displayed in 
italic.
Tip: The <i> tag is often used to indicate a technical term, 
a phrase from another language, a thought, a ship name, etc.

Example

    <i>This text is italic</i>
Try it Yourself »

The HTML <em> element defines 
emphasized text. The content inside is typically displayed in italic.
Tip: A screen reader will pronounce the words in <em> 
with an emphasis, using verbal stress.

Example

    <em>This text is 
 emphasized</em>
Try it Yourself »


HTML <small> Element
The HTML <small> element defines 
smaller text:

Example

  <small>This is some smaller text.</small>

Try it Yourself »


HTML <mark> Element
The HTML <mark> element defines text 
that should be marked or highlighted:

Example

  <p>Do not forget to buy <mark>milk</mark> today.</p>

Try it Yourself »


HTML <del> Element
The HTML <del> element defines text 
that has been deleted from a document. Browsers will usually strike a line 
through deleted text:

Example

 <p>My favorite color is <del>blue</del> red.</p>

Try it Yourself »


HTML <ins> Element
The HTML <ins> element defines a text 
that has been inserted into a document. Browsers will usually underline inserted 
text:

Example

  <p>My favorite color is <del>blue</del> <ins>red</ins>.</p>

Try it Yourself »


HTML <sub> Element
The HTML <sub> element defines 
subscript text. Subscript text appears half a character below the normal line, 
and is sometimes rendered in a smaller font. Subscript text can be used for 
chemical formulas, like H2O:

Example

 <p>This 
 is <sub>subscripted</sub> text.</p>

Try it Yourself »


HTML <sup> Element
The HTML <sup> element defines 
superscript text. Superscript text appears half a character above the normal 
line, and is sometimes rendered in a smaller font. Superscript text can be used 
for footnotes, like WWW[1]:

Example

 <p>This 
 is <sup>superscripted</sup> text.</p>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Add extra importance to the word ""degradation"" in the paragraph below.

<p>

WWF's mission is to stop the
degradation of our
planet's natural environment.

</p>


Submit Answer »
Start the Exercise



HTML Text Formatting Elements


Tag
Description


<b>
Defines bold text


<em>
Defines emphasized text 


<i>
Defines a part of text in an alternate voice or mood


<small>
Defines smaller text


<strong>
Defines important text


<sub>
Defines subscripted text


<sup>
Defines superscripted text


<ins>
Defines inserted text


<del>
Defines deleted text


<mark>
Defines marked/highlighted text



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
9,https://www.w3schools.com/html/html_formatting.asp,"HTML Text Formatting

❮ Previous
Next ❯


HTML contains several elements for defining text with a special meaning.


Example

This text is bold
This text is italic
This is subscript and superscript

Try it Yourself »


HTML Formatting Elements
Formatting elements were designed to display special types of text:

<b> - Bold text
<strong> - Important text
<i> - Italic text
<em> - Emphasized text
<mark> - Marked text
<small> - Smaller text
<del> - Deleted text
<ins> - Inserted text
<sub> - Subscript text
<sup> - Superscript text


HTML <b> and <strong> Elements
The HTML <b> element defines bold text, 
without any extra importance.

Example

    <b>This text is bold</b>
Try it Yourself »

The HTML <strong> element defines text 
with strong importance. The content inside is typically displayed in bold.

Example

     <strong>This text is 
     important!</strong>
Try it Yourself »








HTML <i> and <em> Elements
The HTML <i> element defines a part of 
text in an alternate voice or mood. The content inside is typically displayed in 
italic.
Tip: The <i> tag is often used to indicate a technical term, 
a phrase from another language, a thought, a ship name, etc.

Example

    <i>This text is italic</i>
Try it Yourself »

The HTML <em> element defines 
emphasized text. The content inside is typically displayed in italic.
Tip: A screen reader will pronounce the words in <em> 
with an emphasis, using verbal stress.

Example

    <em>This text is 
 emphasized</em>
Try it Yourself »


HTML <small> Element
The HTML <small> element defines 
smaller text:

Example

  <small>This is some smaller text.</small>

Try it Yourself »


HTML <mark> Element
The HTML <mark> element defines text 
that should be marked or highlighted:

Example

  <p>Do not forget to buy <mark>milk</mark> today.</p>

Try it Yourself »


HTML <del> Element
The HTML <del> element defines text 
that has been deleted from a document. Browsers will usually strike a line 
through deleted text:

Example

 <p>My favorite color is <del>blue</del> red.</p>

Try it Yourself »


HTML <ins> Element
The HTML <ins> element defines a text 
that has been inserted into a document. Browsers will usually underline inserted 
text:

Example

  <p>My favorite color is <del>blue</del> <ins>red</ins>.</p>

Try it Yourself »


HTML <sub> Element
The HTML <sub> element defines 
subscript text. Subscript text appears half a character below the normal line, 
and is sometimes rendered in a smaller font. Subscript text can be used for 
chemical formulas, like H2O:

Example

 <p>This 
 is <sub>subscripted</sub> text.</p>

Try it Yourself »


HTML <sup> Element
The HTML <sup> element defines 
superscript text. Superscript text appears half a character above the normal 
line, and is sometimes rendered in a smaller font. Superscript text can be used 
for footnotes, like WWW[1]:

Example

 <p>This 
 is <sup>superscripted</sup> text.</p>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Add extra importance to the word ""degradation"" in the paragraph below.

<p>

WWF's mission is to stop the
degradation of our
planet's natural environment.

</p>


Submit Answer »
Start the Exercise



HTML Text Formatting Elements


Tag
Description


<b>
Defines bold text


<em>
Defines emphasized text 


<i>
Defines a part of text in an alternate voice or mood


<small>
Defines smaller text


<strong>
Defines important text


<sub>
Defines subscripted text


<sup>
Defines superscripted text


<ins>
Defines inserted text


<del>
Defines deleted text


<mark>
Defines marked/highlighted text



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
10,https://www.w3schools.com/html/html_quotation_elements.asp,"HTML Quotation and Citation Elements

❮ Previous
Next ❯


In this chapter we will go through the 
<blockquote>,<q>, <abbr>, <address>, <cite>, 
and <bdo> HTML elements.


Example

Here is a quote from WWF's website:

For nearly 60 years, WWF has been protecting the future of nature.
The world's leading conservation organization,
WWF works in 100 countries and is supported by more than one million members in the United States and
close to five million globally.

Try it Yourself »


HTML <blockquote> for Quotations
The HTML <blockquote> element defines a section that 
is quoted from another source.
Browsers usually indent <blockquote> elements.

Example

 <p>Here is a quote from WWF's website:</p><blockquote cite=""http://www.worldwildlife.org/who/index.html"">
 For 50 years, WWF has been protecting the future of nature.The world's 
 leading conservation organization,WWF works in 100 countries and is 
 supported by1.2 million members in the United States andclose to 5 
 million globally.</blockquote>
Try it Yourself »


HTML <q> for Short Quotations
The HTML <q> tag defines a short quotation.
Browsers normally insert quotation marks around the quotation.

Example

 <p>WWF's goal is to: <q>Build a future where people live in harmony with 
 nature.</q></p>
Try it Yourself »








HTML <abbr> for Abbreviations
The HTML <abbr> tag defines an abbreviation or an acronym, like ""HTML"", 
""CSS"", ""Mr."", 
""Dr."", ""ASAP"", ""ATM"".
Marking abbreviations can give useful information to browsers, translation 
systems and search-engines.
Tip: Use the global title attribute to 
show the description for the 
abbreviation/acronym when you mouse over the element. 

Example

 <p>The <abbr title=""World Health Organization"">WHO</abbr> was founded in 
 1948.</p>
Try it Yourself »


HTML <address> for Contact Information
The HTML <address> tag defines the contact information for the author/owner of a document 
or an article.
The contact information can be an email address, URL, physical address, phone 
number, social media handle, etc.
The text in the <address> element usually renders in italic, 
and browsers will
always add a line break before and after the <address> element.

Example


 <address>Written by John Doe.<br> Visit us at:<br>Example.com<br>
 Box 564, Disneyland<br>USA</address>
Try it Yourself »


HTML <cite> for Work Title
The HTML <cite> tag defines the title of a 
creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).
Note: A person's name is not the title of a work.
The text in the <cite> element usually renders in italic.

Example

 <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
Try it Yourself »


HTML <bdo> for Bi-Directional Override
BDO stands for Bi-Directional Override.
The HTML <bdo> tag is used to override 
the current text direction:

Example

 <bdo dir=""rtl"">This text will be written from right to left</bdo>
Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use an HTML element to add quotation marks around the letters ""cool"".

<p>

I am so cool.

</p>


Submit Answer »
Start the Exercise




HTML Quotation and Citation Elements


Tag
Description


<abbr>
Defines an abbreviation or acronym


<address>
Defines contact information for the author/owner of a document


<bdo>
Defines the text direction


<blockquote>
 Defines a section that is quoted from another source


<cite>
Defines the title of a work


<q>
Defines a short inline quotation



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
10,https://www.w3schools.com/html/html_quotation_elements.asp,"HTML Quotation and Citation Elements

❮ Previous
Next ❯


In this chapter we will go through the 
<blockquote>,<q>, <abbr>, <address>, <cite>, 
and <bdo> HTML elements.


Example

Here is a quote from WWF's website:

For nearly 60 years, WWF has been protecting the future of nature.
The world's leading conservation organization,
WWF works in 100 countries and is supported by more than one million members in the United States and
close to five million globally.

Try it Yourself »


HTML <blockquote> for Quotations
The HTML <blockquote> element defines a section that 
is quoted from another source.
Browsers usually indent <blockquote> elements.

Example

 <p>Here is a quote from WWF's website:</p><blockquote cite=""http://www.worldwildlife.org/who/index.html"">
 For 50 years, WWF has been protecting the future of nature.The world's 
 leading conservation organization,WWF works in 100 countries and is 
 supported by1.2 million members in the United States andclose to 5 
 million globally.</blockquote>
Try it Yourself »


HTML <q> for Short Quotations
The HTML <q> tag defines a short quotation.
Browsers normally insert quotation marks around the quotation.

Example

 <p>WWF's goal is to: <q>Build a future where people live in harmony with 
 nature.</q></p>
Try it Yourself »








HTML <abbr> for Abbreviations
The HTML <abbr> tag defines an abbreviation or an acronym, like ""HTML"", 
""CSS"", ""Mr."", 
""Dr."", ""ASAP"", ""ATM"".
Marking abbreviations can give useful information to browsers, translation 
systems and search-engines.
Tip: Use the global title attribute to 
show the description for the 
abbreviation/acronym when you mouse over the element. 

Example

 <p>The <abbr title=""World Health Organization"">WHO</abbr> was founded in 
 1948.</p>
Try it Yourself »


HTML <address> for Contact Information
The HTML <address> tag defines the contact information for the author/owner of a document 
or an article.
The contact information can be an email address, URL, physical address, phone 
number, social media handle, etc.
The text in the <address> element usually renders in italic, 
and browsers will
always add a line break before and after the <address> element.

Example


 <address>Written by John Doe.<br> Visit us at:<br>Example.com<br>
 Box 564, Disneyland<br>USA</address>
Try it Yourself »


HTML <cite> for Work Title
The HTML <cite> tag defines the title of a 
creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).
Note: A person's name is not the title of a work.
The text in the <cite> element usually renders in italic.

Example

 <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>
Try it Yourself »


HTML <bdo> for Bi-Directional Override
BDO stands for Bi-Directional Override.
The HTML <bdo> tag is used to override 
the current text direction:

Example

 <bdo dir=""rtl"">This text will be written from right to left</bdo>
Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use an HTML element to add quotation marks around the letters ""cool"".

<p>

I am so cool.

</p>


Submit Answer »
Start the Exercise




HTML Quotation and Citation Elements


Tag
Description


<abbr>
Defines an abbreviation or acronym


<address>
Defines contact information for the author/owner of a document


<bdo>
Defines the text direction


<blockquote>
 Defines a section that is quoted from another source


<cite>
Defines the title of a work


<q>
Defines a short inline quotation



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
11,https://www.w3schools.com/html/html_comments.asp,"HTML Comments

❮ Previous
Next ❯


HTML comments are not displayed in the browser, but they can 
help document your HTML source code.

HTML Comment Tag
You can add comments to your HTML source by using the following syntax:


<!-- Write your comments here -->

Notice that there is an exclamation point (!) in the start tag, but not in the 
end tag.

Note: Comments are not displayed by the browser, but they can help document your HTML source code.


Add Comments
With comments you can place notifications and reminders in your HTML code:

Example

<!-- This is a comment --><p>This is a paragraph.</p>
<!-- Remember to add more information here -->
Try it Yourself »


Hide Content
Comments can be used to hide content.
Which can be helpful if you hide content temporarily:

Example

  <p>This is a paragraph.</p><!-- <p>This is another paragraph 
  </p> --><p>This is a paragraph too.</p>

Try it Yourself »

You can also hide more than one line, everything between the <!-- and the -->
will be hidden from the display.

Example
Hide a section of HTML code:

  <p>This is a paragraph.</p><!--<p>Look at this cool 
  image:</p>
<img border=""0"" src=""pic_trulli.jpg"" 
alt=""Trulli"">--><p>This is a paragraph too.</p>

Try it Yourself »

Comments are also great for debugging HTML, because you can 
comment out HTML lines of code, one at a time, to search for errors.

Hide Inline Content
Comments can be used to hide parts in the middle of the HTML code.

Example
Hide a part of a paragaph:

  <p>This <!-- great text --> is a paragraph.</p>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML comment tag to make a comment out of the ""This is a comment"" text.

<h1>This is a heading</h1>

 This is a comment 

<p>This is a paragraph.</p>


Submit Answer »
Start the Exercise




❮ Previous
Next ❯",html
11,https://www.w3schools.com/html/html_comments.asp,"HTML Comments

❮ Previous
Next ❯


HTML comments are not displayed in the browser, but they can 
help document your HTML source code.

HTML Comment Tag
You can add comments to your HTML source by using the following syntax:


<!-- Write your comments here -->

Notice that there is an exclamation point (!) in the start tag, but not in the 
end tag.

Note: Comments are not displayed by the browser, but they can help document your HTML source code.


Add Comments
With comments you can place notifications and reminders in your HTML code:

Example

<!-- This is a comment --><p>This is a paragraph.</p>
<!-- Remember to add more information here -->
Try it Yourself »


Hide Content
Comments can be used to hide content.
Which can be helpful if you hide content temporarily:

Example

  <p>This is a paragraph.</p><!-- <p>This is another paragraph 
  </p> --><p>This is a paragraph too.</p>

Try it Yourself »

You can also hide more than one line, everything between the <!-- and the -->
will be hidden from the display.

Example
Hide a section of HTML code:

  <p>This is a paragraph.</p><!--<p>Look at this cool 
  image:</p>
<img border=""0"" src=""pic_trulli.jpg"" 
alt=""Trulli"">--><p>This is a paragraph too.</p>

Try it Yourself »

Comments are also great for debugging HTML, because you can 
comment out HTML lines of code, one at a time, to search for errors.

Hide Inline Content
Comments can be used to hide parts in the middle of the HTML code.

Example
Hide a part of a paragaph:

  <p>This <!-- great text --> is a paragraph.</p>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML comment tag to make a comment out of the ""This is a comment"" text.

<h1>This is a heading</h1>

 This is a comment 

<p>This is a paragraph.</p>


Submit Answer »
Start the Exercise




❮ Previous
Next ❯",html
12,https://www.w3schools.com/html/html_colors.asp,"HTML Colors

❮ Previous
Next ❯


HTML colors are specified with predefined color names, or with 
RGB, HEX, HSL, RGBA, or HSLA values.

Color Names
In HTML, a color can be specified by using a color name:


Tomato


Orange


DodgerBlue


MediumSeaGreen


Gray


SlateBlue


Violet


LightGray



Try it Yourself »

HTML supports 140 standard color names.

Background Color
You can set the background color for HTML elements:
Hello World


  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.


Example

  <h1 style=""background-color:DodgerBlue;"">Hello World</h1><p style=""background-color:Tomato;"">Lorem 
  ipsum...</p>
Try it Yourself »


Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.

Example

  <h1 style=""color:Tomato;"">Hello 
  World</h1><p style=""color:DodgerBlue;"">Lorem 
  ipsum...</p><p style=""color:MediumSeaGreen;"">Ut wisi 
  enim...</p>
Try it Yourself »


Border Color
You can set the color of borders:
Hello World
Hello World
Hello World

Example

  <h1 style=""border:2px 
  solid Tomato;"">Hello 
  World</h1><h1 style=""border:2px 
  solid DodgerBlue;"">Hello 
  World</h1><h1 style=""border:2px 
  solid Violet;"">Hello 
  World</h1>
Try it Yourself »


Color Values
In HTML, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values.
The following three <div> elements have their background color set with RGB, 
HEX, and HSL values:

rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)

The following two <div> elements have their background color set with RGBA 
and HSLA values, which adds an Alpha channel to the color (here we have 50% 
transparency):

rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)


Example

  <h1 style=""background-color:rgb(255, 
  99, 71);"">...</h1><h1 style=""background-color:#ff6347;"">...</h1><h1 style=""background-color:hsl(9, 
  100%, 64%);"">...</h1><h1 style=""background-color:rgba(255, 
  99, 71, 0.5);"">...</h1><h1 style=""background-color:hsla(9, 
  100%, 64%, 0.5);"">...</h1>
Try it Yourself »


Learn more about Color Values
You will learn more about RGB, HEX and HSL in the next chapters.



❮ Previous
Next ❯",html
12,https://www.w3schools.com/html/html_colors.asp,"HTML Colors

❮ Previous
Next ❯


HTML colors are specified with predefined color names, or with 
RGB, HEX, HSL, RGBA, or HSLA values.

Color Names
In HTML, a color can be specified by using a color name:


Tomato


Orange


DodgerBlue


MediumSeaGreen


Gray


SlateBlue


Violet


LightGray



Try it Yourself »

HTML supports 140 standard color names.

Background Color
You can set the background color for HTML elements:
Hello World


  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.


Example

  <h1 style=""background-color:DodgerBlue;"">Hello World</h1><p style=""background-color:Tomato;"">Lorem 
  ipsum...</p>
Try it Yourself »


Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.

Example

  <h1 style=""color:Tomato;"">Hello 
  World</h1><p style=""color:DodgerBlue;"">Lorem 
  ipsum...</p><p style=""color:MediumSeaGreen;"">Ut wisi 
  enim...</p>
Try it Yourself »


Border Color
You can set the color of borders:
Hello World
Hello World
Hello World

Example

  <h1 style=""border:2px 
  solid Tomato;"">Hello 
  World</h1><h1 style=""border:2px 
  solid DodgerBlue;"">Hello 
  World</h1><h1 style=""border:2px 
  solid Violet;"">Hello 
  World</h1>
Try it Yourself »


Color Values
In HTML, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values.
The following three <div> elements have their background color set with RGB, 
HEX, and HSL values:

rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)

The following two <div> elements have their background color set with RGBA 
and HSLA values, which adds an Alpha channel to the color (here we have 50% 
transparency):

rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)


Example

  <h1 style=""background-color:rgb(255, 
  99, 71);"">...</h1><h1 style=""background-color:#ff6347;"">...</h1><h1 style=""background-color:hsl(9, 
  100%, 64%);"">...</h1><h1 style=""background-color:rgba(255, 
  99, 71, 0.5);"">...</h1><h1 style=""background-color:hsla(9, 
  100%, 64%, 0.5);"">...</h1>
Try it Yourself »


Learn more about Color Values
You will learn more about RGB, HEX and HSL in the next chapters.



❮ Previous
Next ❯",html
13,https://www.w3schools.com/html/html_colors.asp,"HTML Colors

❮ Previous
Next ❯


HTML colors are specified with predefined color names, or with 
RGB, HEX, HSL, RGBA, or HSLA values.

Color Names
In HTML, a color can be specified by using a color name:


Tomato


Orange


DodgerBlue


MediumSeaGreen


Gray


SlateBlue


Violet


LightGray



Try it Yourself »

HTML supports 140 standard color names.

Background Color
You can set the background color for HTML elements:
Hello World


  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.


Example

  <h1 style=""background-color:DodgerBlue;"">Hello World</h1><p style=""background-color:Tomato;"">Lorem 
  ipsum...</p>
Try it Yourself »


Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.

Example

  <h1 style=""color:Tomato;"">Hello 
  World</h1><p style=""color:DodgerBlue;"">Lorem 
  ipsum...</p><p style=""color:MediumSeaGreen;"">Ut wisi 
  enim...</p>
Try it Yourself »


Border Color
You can set the color of borders:
Hello World
Hello World
Hello World

Example

  <h1 style=""border:2px 
  solid Tomato;"">Hello 
  World</h1><h1 style=""border:2px 
  solid DodgerBlue;"">Hello 
  World</h1><h1 style=""border:2px 
  solid Violet;"">Hello 
  World</h1>
Try it Yourself »


Color Values
In HTML, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values.
The following three <div> elements have their background color set with RGB, 
HEX, and HSL values:

rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)

The following two <div> elements have their background color set with RGBA 
and HSLA values, which adds an Alpha channel to the color (here we have 50% 
transparency):

rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)


Example

  <h1 style=""background-color:rgb(255, 
  99, 71);"">...</h1><h1 style=""background-color:#ff6347;"">...</h1><h1 style=""background-color:hsl(9, 
  100%, 64%);"">...</h1><h1 style=""background-color:rgba(255, 
  99, 71, 0.5);"">...</h1><h1 style=""background-color:hsla(9, 
  100%, 64%, 0.5);"">...</h1>
Try it Yourself »


Learn more about Color Values
You will learn more about RGB, HEX and HSL in the next chapters.



❮ Previous
Next ❯",html
13,https://www.w3schools.com/html/html_colors.asp,"HTML Colors

❮ Previous
Next ❯


HTML colors are specified with predefined color names, or with 
RGB, HEX, HSL, RGBA, or HSLA values.

Color Names
In HTML, a color can be specified by using a color name:


Tomato


Orange


DodgerBlue


MediumSeaGreen


Gray


SlateBlue


Violet


LightGray



Try it Yourself »

HTML supports 140 standard color names.

Background Color
You can set the background color for HTML elements:
Hello World


  Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
  Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.


Example

  <h1 style=""background-color:DodgerBlue;"">Hello World</h1><p style=""background-color:Tomato;"">Lorem 
  ipsum...</p>
Try it Yourself »


Text Color
You can set the color of text:
Hello World
Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.

Example

  <h1 style=""color:Tomato;"">Hello 
  World</h1><p style=""color:DodgerBlue;"">Lorem 
  ipsum...</p><p style=""color:MediumSeaGreen;"">Ut wisi 
  enim...</p>
Try it Yourself »


Border Color
You can set the color of borders:
Hello World
Hello World
Hello World

Example

  <h1 style=""border:2px 
  solid Tomato;"">Hello 
  World</h1><h1 style=""border:2px 
  solid DodgerBlue;"">Hello 
  World</h1><h1 style=""border:2px 
  solid Violet;"">Hello 
  World</h1>
Try it Yourself »


Color Values
In HTML, colors can also be specified using RGB values, HEX values, HSL 
values, RGBA values, and HSLA values.
The following three <div> elements have their background color set with RGB, 
HEX, and HSL values:

rgb(255, 99, 71)
#ff6347
hsl(9, 100%, 64%)

The following two <div> elements have their background color set with RGBA 
and HSLA values, which adds an Alpha channel to the color (here we have 50% 
transparency):

rgba(255, 99, 71, 0.5)
hsla(9, 100%, 64%, 0.5)


Example

  <h1 style=""background-color:rgb(255, 
  99, 71);"">...</h1><h1 style=""background-color:#ff6347;"">...</h1><h1 style=""background-color:hsl(9, 
  100%, 64%);"">...</h1><h1 style=""background-color:rgba(255, 
  99, 71, 0.5);"">...</h1><h1 style=""background-color:hsla(9, 
  100%, 64%, 0.5);"">...</h1>
Try it Yourself »


Learn more about Color Values
You will learn more about RGB, HEX and HSL in the next chapters.



❮ Previous
Next ❯",html
14,https://www.w3schools.com/html/html_colors_rgb.asp,"HTML RGB and RGBA Colors

❮ Previous
Next ❯


An RGB color value represents RED, GREEN, and BLUE light 
sources.
An RGBA color value is an extension of RGB with an 
Alpha channel (opacity).

RGB Color Values
In HTML, a color can be specified as an RGB value, using this formula:
rgb(red, green, blue)
Each parameter (red, green, and 
blue) defines the intensity of the color with a value between 0 and 255.
This means that there are 256 x 256 x 256 = 16777216 possible colors!
For example, rgb(255, 0, 0) is displayed as red, 
because red is set to its highest value (255), and the other two (green and blue) are 
set to 0.
Another example, rgb(0, 255, 0) is displayed as green, 
because green is set to its highest value (255), and the other two (red and blue) are 
set to 0.
To display black, set all color parameters to 0, like this: rgb(0, 0, 0).
To display white, set all color parameters to 255, like 
this: rgb(255, 255, 255). 
Experiment by mixing the RGB values below:





 






RED

255


GREEN

0


BLUE

0




Example



rgb(255, 0, 0)


rgb(0, 0, 255)


rgb(60, 179, 113)


rgb(238, 130, 238)


rgb(255, 165, 0)


rgb(106, 90, 205)




Try it Yourself »


Shades of Gray
Shades of gray are often defined using equal values for all three parameters:

Example



rgb(60, 60, 60)


rgb(100, 100, 100)


rgb(140, 140, 140)


rgb(180, 180, 180)


rgb(200, 200, 200)


rgb(240, 240, 240)




Try it Yourself »


RGBA Color Values
RGBA color values are an extension of RGB color values with an Alpha channel 
- which specifies the opacity for a color.
An RGBA color value is 
specified with:
rgba(red, green, blue, 
alpha)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the RGBA values below:





 






RED

255


GREEN

0


BLUE

0


ALPHA

0




Example



rgba(255, 99, 71, 0)


rgba(255, 99, 71, 0.2)


rgba(255, 99, 71, 0.4)


rgba(255, 99, 71, 0.6)


rgba(255, 99, 71, 0.8)


rgba(255, 99, 71, 1)




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)
changeRGB(""r"");
function changeRGB(x) {
  var col, r, g, b;
  r = document.getElementById(""slideRed"").value;
  g = document.getElementById(""slideGreen"").value;
  b = document.getElementById(""slideBlue"").value;
  col = w3color(""rgb("" + r + "","" + g + "","" + b + "")"");
  document.getElementById('valRed2').innerHTML = r;
  document.getElementById('valGreen2').innerHTML = g;
  document.getElementById('valBlue2').innerHTML = b;
  document.getElementById('rgbresult').style.backgroundColor = col.toRgbString();
  document.getElementById('rgbresulttext').innerHTML = col.toRgbString();
  if (col.isDark(150)) {
    document.getElementById('rgbresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('rgbresulttext').style.color = ""#1f2d3d"";
  }
}
//function changeGreen(value) {
//    document.getElementById('valGreen').innerHTML = value;
//}
//function changeBlue(value) {
//    document.getElementById('valBlue').innerHTML = value;
//}
changeRGBA(""r"");
function changeRGBA(x) {
  var col, r, g, b, a;
  r = document.getElementById(""slideRedA"").value;
  g = document.getElementById(""slideGreenA"").value;
  b = document.getElementById(""slideBlueA"").value;
  a = document.getElementById(""slideAlphaA"").value/10;
  col = w3color(""rgba("" + r + "","" + g + "","" + b + "","" + a + "")"");
  document.getElementById('valRed2A').innerHTML = r;
  document.getElementById('valGreen2A').innerHTML = g;
  document.getElementById('valBlue2A').innerHTML = b;
  document.getElementById('valAlpha2A').innerHTML = a;
  document.getElementById('rgbaresult').style.backgroundColor = col.toRgbaString();
  document.getElementById('rgbaresulttext').innerHTML = col.toRgbaString();
  if (col.isDark(150) && a > 0.2) {
    document.getElementById('rgbaresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('rgbaresulttext').style.color = ""#1f2d3d"";
  }
}



❮ Previous
Next ❯",html
14,https://www.w3schools.com/html/html_colors_rgb.asp,"HTML RGB and RGBA Colors

❮ Previous
Next ❯


An RGB color value represents RED, GREEN, and BLUE light 
sources.
An RGBA color value is an extension of RGB with an 
Alpha channel (opacity).

RGB Color Values
In HTML, a color can be specified as an RGB value, using this formula:
rgb(red, green, blue)
Each parameter (red, green, and 
blue) defines the intensity of the color with a value between 0 and 255.
This means that there are 256 x 256 x 256 = 16777216 possible colors!
For example, rgb(255, 0, 0) is displayed as red, 
because red is set to its highest value (255), and the other two (green and blue) are 
set to 0.
Another example, rgb(0, 255, 0) is displayed as green, 
because green is set to its highest value (255), and the other two (red and blue) are 
set to 0.
To display black, set all color parameters to 0, like this: rgb(0, 0, 0).
To display white, set all color parameters to 255, like 
this: rgb(255, 255, 255). 
Experiment by mixing the RGB values below:





 






RED

255


GREEN

0


BLUE

0




Example



rgb(255, 0, 0)


rgb(0, 0, 255)


rgb(60, 179, 113)


rgb(238, 130, 238)


rgb(255, 165, 0)


rgb(106, 90, 205)




Try it Yourself »


Shades of Gray
Shades of gray are often defined using equal values for all three parameters:

Example



rgb(60, 60, 60)


rgb(100, 100, 100)


rgb(140, 140, 140)


rgb(180, 180, 180)


rgb(200, 200, 200)


rgb(240, 240, 240)




Try it Yourself »


RGBA Color Values
RGBA color values are an extension of RGB color values with an Alpha channel 
- which specifies the opacity for a color.
An RGBA color value is 
specified with:
rgba(red, green, blue, 
alpha)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the RGBA values below:





 






RED

255


GREEN

0


BLUE

0


ALPHA

0




Example



rgba(255, 99, 71, 0)


rgba(255, 99, 71, 0.2)


rgba(255, 99, 71, 0.4)


rgba(255, 99, 71, 0.6)


rgba(255, 99, 71, 0.8)


rgba(255, 99, 71, 1)




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)
changeRGB(""r"");
function changeRGB(x) {
  var col, r, g, b;
  r = document.getElementById(""slideRed"").value;
  g = document.getElementById(""slideGreen"").value;
  b = document.getElementById(""slideBlue"").value;
  col = w3color(""rgb("" + r + "","" + g + "","" + b + "")"");
  document.getElementById('valRed2').innerHTML = r;
  document.getElementById('valGreen2').innerHTML = g;
  document.getElementById('valBlue2').innerHTML = b;
  document.getElementById('rgbresult').style.backgroundColor = col.toRgbString();
  document.getElementById('rgbresulttext').innerHTML = col.toRgbString();
  if (col.isDark(150)) {
    document.getElementById('rgbresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('rgbresulttext').style.color = ""#1f2d3d"";
  }
}
//function changeGreen(value) {
//    document.getElementById('valGreen').innerHTML = value;
//}
//function changeBlue(value) {
//    document.getElementById('valBlue').innerHTML = value;
//}
changeRGBA(""r"");
function changeRGBA(x) {
  var col, r, g, b, a;
  r = document.getElementById(""slideRedA"").value;
  g = document.getElementById(""slideGreenA"").value;
  b = document.getElementById(""slideBlueA"").value;
  a = document.getElementById(""slideAlphaA"").value/10;
  col = w3color(""rgba("" + r + "","" + g + "","" + b + "","" + a + "")"");
  document.getElementById('valRed2A').innerHTML = r;
  document.getElementById('valGreen2A').innerHTML = g;
  document.getElementById('valBlue2A').innerHTML = b;
  document.getElementById('valAlpha2A').innerHTML = a;
  document.getElementById('rgbaresult').style.backgroundColor = col.toRgbaString();
  document.getElementById('rgbaresulttext').innerHTML = col.toRgbaString();
  if (col.isDark(150) && a > 0.2) {
    document.getElementById('rgbaresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('rgbaresulttext').style.color = ""#1f2d3d"";
  }
}



❮ Previous
Next ❯",html
15,https://www.w3schools.com/html/html_colors_hex.asp,"HTML HEX Colors

❮ Previous
Next ❯


A hexadecimal color is specified with: #RRGGBB, where the RR 
(red), GG (green) and BB (blue) hexadecimal integers specify the components of 
the color.

HEX Color Values
In HTML, a color can be specified using a hexadecimal value in 
the form:
#rrggbb
Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).
For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other 
two (green and blue) are set to 00.
Another example, #00ff00 is displayed as green, 
because green is set to its highest value (ff), and the other two (red and blue) are 
set to 00.
To display black, set all color parameters to 00, like this: #000000.
To display white, set all color parameters to ff, like 
this: #ffffff. 
Experiment by mixing the HEX values below:





 






RED

ff


GREEN

0


BLUE

0




Example



#ff0000


#0000ff


#3cb371


#ee82ee


#ffa500


#6a5acd




Try it Yourself »


Shades of Gray
Shades of gray are often defined using equal values for all three parameters:

Example



#404040


#686868


#a0a0a0


#bebebe


#dcdcdc


#f8f8f8




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)
changeHex(""r"");
function changeHex(x) {
  var col, r, g, b;
  r = document.getElementById(""slideRedHex"").value;
  g = document.getElementById(""slideGreenHex"").value;
  b = document.getElementById(""slideBlueHex"").value;
  col = w3color(""rgb("" + r + "","" + g + "","" + b + "")"");
    document.getElementById('valRed2Hex').innerHTML = col.toHexString().substr(1,2);
    document.getElementById('valGreen2Hex').innerHTML = col.toHexString().substr(3,2);
    document.getElementById('valBlue2Hex').innerHTML = col.toHexString().substr(5,2);
    document.getElementById('hexresult').style.backgroundColor = col.toRgbString();
    document.getElementById('hexresulttext').innerHTML = col.toHexString();
  if (col.isDark(150)) {
    document.getElementById('hexresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hexresulttext').style.color = ""#1f2d3d"";
  }
}



❮ Previous
Next ❯",html
15,https://www.w3schools.com/html/html_colors_hex.asp,"HTML HEX Colors

❮ Previous
Next ❯


A hexadecimal color is specified with: #RRGGBB, where the RR 
(red), GG (green) and BB (blue) hexadecimal integers specify the components of 
the color.

HEX Color Values
In HTML, a color can be specified using a hexadecimal value in 
the form:
#rrggbb
Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).
For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other 
two (green and blue) are set to 00.
Another example, #00ff00 is displayed as green, 
because green is set to its highest value (ff), and the other two (red and blue) are 
set to 00.
To display black, set all color parameters to 00, like this: #000000.
To display white, set all color parameters to ff, like 
this: #ffffff. 
Experiment by mixing the HEX values below:





 






RED

ff


GREEN

0


BLUE

0




Example



#ff0000


#0000ff


#3cb371


#ee82ee


#ffa500


#6a5acd




Try it Yourself »


Shades of Gray
Shades of gray are often defined using equal values for all three parameters:

Example



#404040


#686868


#a0a0a0


#bebebe


#dcdcdc


#f8f8f8




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)
changeHex(""r"");
function changeHex(x) {
  var col, r, g, b;
  r = document.getElementById(""slideRedHex"").value;
  g = document.getElementById(""slideGreenHex"").value;
  b = document.getElementById(""slideBlueHex"").value;
  col = w3color(""rgb("" + r + "","" + g + "","" + b + "")"");
    document.getElementById('valRed2Hex').innerHTML = col.toHexString().substr(1,2);
    document.getElementById('valGreen2Hex').innerHTML = col.toHexString().substr(3,2);
    document.getElementById('valBlue2Hex').innerHTML = col.toHexString().substr(5,2);
    document.getElementById('hexresult').style.backgroundColor = col.toRgbString();
    document.getElementById('hexresulttext').innerHTML = col.toHexString();
  if (col.isDark(150)) {
    document.getElementById('hexresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hexresulttext').style.color = ""#1f2d3d"";
  }
}



❮ Previous
Next ❯",html
16,https://www.w3schools.com/html/html_colors_hsl.asp,"HTML HSL and HSLA Colors

❮ Previous
Next ❯


HSL stands for hue, saturation, and lightness.
HSLA color values are an extension of HSL with an Alpha channel 
(opacity).

HSL Color Values
In HTML, a color can be specified using hue, saturation, and lightness (HSL) in 
the form:
hsl(hue, saturation, lightness)
Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.
Lightness is also a percentage value, 0% is black, and 100% is white.
Experiment by mixing the HSL values below:





 






HUE

0


SATURATION

100%


LIGHTNESS

50%




Example



hsl(0, 100%, 50%)


hsl(240, 100%, 50%)


hsl(147, 50%, 47%)


hsl(300, 76%, 72%)


hsl(39, 100%, 50%)


hsl(248, 53%, 58%)




Try it Yourself »


Saturation
Saturation can be described as the intensity of a color.
100% is pure color, no shades of gray
50% is 50% gray, but you can still see the color.
0% is completely gray, you can no longer see the color.

Example



hsl(0, 100%, 50%)


hsl(0, 80%, 50%)


hsl(0, 60%, 50%)


hsl(0, 40%, 50%)


hsl(0, 20%, 50%)


hsl(0, 0%, 50%)




Try it Yourself »


Lightness
The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 100% means full lightness (white).

Example



hsl(0, 100%, 0%)


hsl(0, 100%, 25%)


hsl(0, 100%, 50%)


hsl(0, 100%, 75%)


hsl(0, 100%, 90%)


hsl(0, 100%, 100%)




Try it Yourself »


Shades of Gray
Shades of gray are often defined by setting the hue and saturation to 0, and 
adjust the lightness from 0% to 100% to get darker/lighter shades:

Example



hsl(0, 0%, 20%)


hsl(0, 0%, 30%)


hsl(0, 0%, 40%)


hsl(0, 0%, 60%)


hsl(0, 0%, 70%)


hsl(0, 0%, 90%)




Try it Yourself »


HSLA Color Values
HSLA color values are an extension of HSL color values with an Alpha channel 
- which specifies the opacity for a color.
An HSLA color value is 
specified with:
hsla(hue, saturation, lightness, 
alpha)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the HSLA values below:





 






HUE

0


SATURATION

100%


LIGHTNESS

50%


ALPHA

0.5




Example



hsla(9, 100%, 64%, 0)


hsla(9, 100%, 64%, 0.2)


hsla(9, 100%, 64%, 0.4)


hsla(9, 100%, 64%, 0.6)


hsla(9, 100%, 64%, 0.8)


hsla(9, 100%, 64%, 1)




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)


changeHsl(""h"");
function changeHsl(x) {
  var col, h, s, l;
  h = document.getElementById(""slideHue"").value;
  s = document.getElementById(""slideSat"").value;
  l = document.getElementById(""slideLight"").value;
  col = w3color(""hsl("" + h + "","" + s/100 + "","" + l/100 + "")"");
    document.getElementById('valHue').innerHTML = col.toHsl().h;
    document.getElementById('valSat').innerHTML = Math.round(col.toHsl().s * 100) + ""%"";
    document.getElementById('valLight').innerHTML = Math.round(col.toHsl().l * 100) + ""%"";
    document.getElementById('hslresult').style.backgroundColor = col.toHslString();
    document.getElementById('hslresulttext').innerHTML = col.toHslString();
  if (col.isDark(150)) {
    document.getElementById('hslresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hslresulttext').style.color = ""#1f2d3d"";
  }
}

changeHsla(""h"");
function changeHsla(x) {
  var col, h, s, l, a;
  h = document.getElementById(""slideHueA"").value;
  s = document.getElementById(""slideSatA"").value;
  l = document.getElementById(""slideLightA"").value;
  a = document.getElementById(""slideHslAlpha"").value/10;
  col = w3color(""hsla("" + h + "","" + s/100 + "","" + l/100 + "","" + a + "")"");
  document.getElementById('valHueA').innerHTML = col.toHsl().h;
  document.getElementById('valSatA').innerHTML = Math.round(col.toHsl().s * 100) + ""%"";
  document.getElementById('valLightA').innerHTML = Math.round(col.toHsl().l * 100) + ""%"";
  document.getElementById('valHslAlpha').innerHTML = col.toHsl().a;
  document.getElementById('hslaresult').style.backgroundColor = col.toHslaString();
  document.getElementById('hslaresulttext').innerHTML = col.toHslaString();
  if (col.isDark(150) && a > 0.2) {
    document.getElementById('hslaresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hslaresulttext').style.color = ""#1f2d3d"";
  }
}




❮ Previous
Next ❯",html
16,https://www.w3schools.com/html/html_colors_hsl.asp,"HTML HSL and HSLA Colors

❮ Previous
Next ❯


HSL stands for hue, saturation, and lightness.
HSLA color values are an extension of HSL with an Alpha channel 
(opacity).

HSL Color Values
In HTML, a color can be specified using hue, saturation, and lightness (HSL) in 
the form:
hsl(hue, saturation, lightness)
Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.
Lightness is also a percentage value, 0% is black, and 100% is white.
Experiment by mixing the HSL values below:





 






HUE

0


SATURATION

100%


LIGHTNESS

50%




Example



hsl(0, 100%, 50%)


hsl(240, 100%, 50%)


hsl(147, 50%, 47%)


hsl(300, 76%, 72%)


hsl(39, 100%, 50%)


hsl(248, 53%, 58%)




Try it Yourself »


Saturation
Saturation can be described as the intensity of a color.
100% is pure color, no shades of gray
50% is 50% gray, but you can still see the color.
0% is completely gray, you can no longer see the color.

Example



hsl(0, 100%, 50%)


hsl(0, 80%, 50%)


hsl(0, 60%, 50%)


hsl(0, 40%, 50%)


hsl(0, 20%, 50%)


hsl(0, 0%, 50%)




Try it Yourself »


Lightness
The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 100% means full lightness (white).

Example



hsl(0, 100%, 0%)


hsl(0, 100%, 25%)


hsl(0, 100%, 50%)


hsl(0, 100%, 75%)


hsl(0, 100%, 90%)


hsl(0, 100%, 100%)




Try it Yourself »


Shades of Gray
Shades of gray are often defined by setting the hue and saturation to 0, and 
adjust the lightness from 0% to 100% to get darker/lighter shades:

Example



hsl(0, 0%, 20%)


hsl(0, 0%, 30%)


hsl(0, 0%, 40%)


hsl(0, 0%, 60%)


hsl(0, 0%, 70%)


hsl(0, 0%, 90%)




Try it Yourself »


HSLA Color Values
HSLA color values are an extension of HSL color values with an Alpha channel 
- which specifies the opacity for a color.
An HSLA color value is 
specified with:
hsla(hue, saturation, lightness, 
alpha)
The alpha parameter is a number 
between 0.0 (fully transparent) and 1.0 (not transparent at all):
Experiment by mixing the HSLA values below:





 






HUE

0


SATURATION

100%


LIGHTNESS

50%


ALPHA

0.5




Example



hsla(9, 100%, 64%, 0)


hsla(9, 100%, 64%, 0.2)


hsla(9, 100%, 64%, 0.4)


hsla(9, 100%, 64%, 0.6)


hsla(9, 100%, 64%, 0.8)


hsla(9, 100%, 64%, 1)




Try it Yourself »


//changeRed(255)
//changeGreen(0)
//changeBlue(0)


changeHsl(""h"");
function changeHsl(x) {
  var col, h, s, l;
  h = document.getElementById(""slideHue"").value;
  s = document.getElementById(""slideSat"").value;
  l = document.getElementById(""slideLight"").value;
  col = w3color(""hsl("" + h + "","" + s/100 + "","" + l/100 + "")"");
    document.getElementById('valHue').innerHTML = col.toHsl().h;
    document.getElementById('valSat').innerHTML = Math.round(col.toHsl().s * 100) + ""%"";
    document.getElementById('valLight').innerHTML = Math.round(col.toHsl().l * 100) + ""%"";
    document.getElementById('hslresult').style.backgroundColor = col.toHslString();
    document.getElementById('hslresulttext').innerHTML = col.toHslString();
  if (col.isDark(150)) {
    document.getElementById('hslresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hslresulttext').style.color = ""#1f2d3d"";
  }
}

changeHsla(""h"");
function changeHsla(x) {
  var col, h, s, l, a;
  h = document.getElementById(""slideHueA"").value;
  s = document.getElementById(""slideSatA"").value;
  l = document.getElementById(""slideLightA"").value;
  a = document.getElementById(""slideHslAlpha"").value/10;
  col = w3color(""hsla("" + h + "","" + s/100 + "","" + l/100 + "","" + a + "")"");
  document.getElementById('valHueA').innerHTML = col.toHsl().h;
  document.getElementById('valSatA').innerHTML = Math.round(col.toHsl().s * 100) + ""%"";
  document.getElementById('valLightA').innerHTML = Math.round(col.toHsl().l * 100) + ""%"";
  document.getElementById('valHslAlpha').innerHTML = col.toHsl().a;
  document.getElementById('hslaresult').style.backgroundColor = col.toHslaString();
  document.getElementById('hslaresulttext').innerHTML = col.toHslaString();
  if (col.isDark(150) && a > 0.2) {
    document.getElementById('hslaresulttext').style.color = ""#ffffff"";
  } else {
    document.getElementById('hslaresulttext').style.color = ""#1f2d3d"";
  }
}




❮ Previous
Next ❯",html
17,https://www.w3schools.com/html/html_css.asp,"HTML Styles - CSS

❮ Previous
Next ❯


CSS stands for Cascading Style Sheets.
CSS saves a lot of work. It can control the layout of multiple 
web pages all at once.





CSS = Styles and Colors
Manipulate Text
Colors,
  Boxes




What is CSS?
Cascading Style Sheets (CSS) is used to format the layout of a webpage.
With CSS, you can control the color, font, the size of text, the spacing 
between elements, how elements are positioned and laid out, what background 
images or background colors are to be used, different displays for different devices 
and screen sizes, and much more!

Tip: The word cascading means that a style 
applied to a parent element will also apply to all children elements within the 
parent. So, if you set the color of the body text to ""blue"", all headings, 
paragraphs, and other text elements within the body will also get the same color (unless you specify 
something else)!


Using CSS
CSS can be added to HTML documents in 3 ways:

Inline - by using the style attribute inside HTML elements
Internal - by using a <style> element in the <head> section
External - by using a <link> 
  element to link to an external CSS file

The most common way to add CSS, is to keep the styles in external CSS 
files. However, in this tutorial we will use inline and internal styles, because this is easier to 
demonstrate, and easier for you to try it yourself.

Inline CSS
An inline CSS is used to apply a unique style to a single HTML element.
An inline CSS uses the style attribute of an HTML element.
The following example sets the text color of the <h1> element to blue, 
and the text color of the <p> element to red:

Example

 <h1 style=""color:blue;"">A Blue Heading</h1><p 
  style=""color:red;"">A red paragraph.</p>
Try it Yourself »








Internal CSS
An internal CSS is used to define a style for a single HTML page.
An internal CSS is defined in the <head> section of an HTML page, 
within a <style> element.
The following example sets the text color of ALL the <h1> elements 
(on that page) to blue, and the text color of ALL the <p> elements to 
red. In addition, the page will be displayed with a ""powderblue"" background 
color: 

Example

<!DOCTYPE html><html><head><style>
 body {background-color: powderblue;}h1   {color: blue;}p    {color: red;}
</style></head><body><h1>This is a 
 heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »


External CSS
An external style sheet is used to define the style for many HTML pages.
To use an external style sheet, add a link to it in the <head> section of each HTML page:

Example

<!DOCTYPE html><html><head>
  <link rel=""stylesheet"" href=""styles.css"">
</head><body><h1>This is a heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »

The external style sheet can be written in any text editor. The file must not contain any 
HTML code, and must be saved with a .css extension.
Here is what the ""styles.css"" file looks like:

""styles.css"":

 body {  background-color: powderblue;}h1 {  color: blue;}p {  color: red;}


Tip: With an external style sheet, you can change the look of an entire web site, by changing one file!


CSS Colors, Fonts and Sizes
Here, we will demonstrate some commonly used CSS properties. You will learn 
more about them later.
The CSS color property defines the text color to be used.
The CSS font-family property defines the font to be used.
The CSS font-size property defines the text size to be used.

Example
Use of CSS color, font-family and font-size properties:

<!DOCTYPE html>
 <html><head><style>h1 {  color: blue;  font-family: verdana;  font-size: 300%;}p {
    color: red;  
 font-family: courier;  font-size: 160%;}</style></head><body>
 <h1>This is a heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »


CSS Border
The CSS border property defines a border 
around an HTML element.
Tip: You can define a border for nearly all HTML elements.

Example
Use of CSS border property: 

 p {  border: 2px 
solid powderblue;}

Try it Yourself »


CSS Padding
The CSS padding property defines a padding 
(space) between the text and the border.

Example
Use of CSS border and padding properties:

 p {  border: 2px 
solid powderblue;  padding: 30px;}
Try it Yourself »


CSS Margin
The CSS margin property defines a margin 
(space) outside the border.

Example
Use of CSS border and margin properties:

 p {  border: 2px 
solid powderblue;  margin: 50px;
 }
Try it Yourself »


Link to External CSS
External style sheets can be referenced with a full URL or with a path relative to the current web page.

Example
This example uses a full URL to link to a style sheet:

<link rel=""stylesheet"" href=""https://www.w3schools.com/html/styles.css"">


Try it Yourself »


Example
This example links to a style sheet located in the html folder on the current web site: 

<link rel=""stylesheet"" href=""/html/styles.css"">


Try it Yourself »


Example
This example links to a style sheet located in the same folder as the current page:

<link rel=""stylesheet"" href=""styles.css"">


Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the HTML style attribute for inline styling
Use the HTML <style> element to define internal CSS
Use the HTML <link> element to refer to an external CSS file
Use the HTML <head> element to store <style> and <link> elements
Use the CSS color property for text colors
Use the CSS font-family property for text fonts
Use the CSS font-size property for text sizes
Use the CSS border property for borders
Use the CSS padding property for space inside the border
Use the CSS margin property for space outside the border


Tip: You can learn much more about CSS in our CSS Tutorial.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use CSS to set the background color of the document (body) to yellow.

<!DOCTYPE html>

<html>

<head>

<style>

 

  :yellow;



</style>

</head>

<body>

<h1>My Home Page</h1>

</body>

</html>


Submit Answer »
Start the Exercise



HTML Style Tags


Tag
Description


<style>
Defines style information for an HTML document


<link>
Defines a link between a document and an external resource 



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
17,https://www.w3schools.com/html/html_css.asp,"HTML Styles - CSS

❮ Previous
Next ❯


CSS stands for Cascading Style Sheets.
CSS saves a lot of work. It can control the layout of multiple 
web pages all at once.





CSS = Styles and Colors
Manipulate Text
Colors,
  Boxes




What is CSS?
Cascading Style Sheets (CSS) is used to format the layout of a webpage.
With CSS, you can control the color, font, the size of text, the spacing 
between elements, how elements are positioned and laid out, what background 
images or background colors are to be used, different displays for different devices 
and screen sizes, and much more!

Tip: The word cascading means that a style 
applied to a parent element will also apply to all children elements within the 
parent. So, if you set the color of the body text to ""blue"", all headings, 
paragraphs, and other text elements within the body will also get the same color (unless you specify 
something else)!


Using CSS
CSS can be added to HTML documents in 3 ways:

Inline - by using the style attribute inside HTML elements
Internal - by using a <style> element in the <head> section
External - by using a <link> 
  element to link to an external CSS file

The most common way to add CSS, is to keep the styles in external CSS 
files. However, in this tutorial we will use inline and internal styles, because this is easier to 
demonstrate, and easier for you to try it yourself.

Inline CSS
An inline CSS is used to apply a unique style to a single HTML element.
An inline CSS uses the style attribute of an HTML element.
The following example sets the text color of the <h1> element to blue, 
and the text color of the <p> element to red:

Example

 <h1 style=""color:blue;"">A Blue Heading</h1><p 
  style=""color:red;"">A red paragraph.</p>
Try it Yourself »








Internal CSS
An internal CSS is used to define a style for a single HTML page.
An internal CSS is defined in the <head> section of an HTML page, 
within a <style> element.
The following example sets the text color of ALL the <h1> elements 
(on that page) to blue, and the text color of ALL the <p> elements to 
red. In addition, the page will be displayed with a ""powderblue"" background 
color: 

Example

<!DOCTYPE html><html><head><style>
 body {background-color: powderblue;}h1   {color: blue;}p    {color: red;}
</style></head><body><h1>This is a 
 heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »


External CSS
An external style sheet is used to define the style for many HTML pages.
To use an external style sheet, add a link to it in the <head> section of each HTML page:

Example

<!DOCTYPE html><html><head>
  <link rel=""stylesheet"" href=""styles.css"">
</head><body><h1>This is a heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »

The external style sheet can be written in any text editor. The file must not contain any 
HTML code, and must be saved with a .css extension.
Here is what the ""styles.css"" file looks like:

""styles.css"":

 body {  background-color: powderblue;}h1 {  color: blue;}p {  color: red;}


Tip: With an external style sheet, you can change the look of an entire web site, by changing one file!


CSS Colors, Fonts and Sizes
Here, we will demonstrate some commonly used CSS properties. You will learn 
more about them later.
The CSS color property defines the text color to be used.
The CSS font-family property defines the font to be used.
The CSS font-size property defines the text size to be used.

Example
Use of CSS color, font-family and font-size properties:

<!DOCTYPE html>
 <html><head><style>h1 {  color: blue;  font-family: verdana;  font-size: 300%;}p {
    color: red;  
 font-family: courier;  font-size: 160%;}</style></head><body>
 <h1>This is a heading</h1><p>This is a paragraph.</p></body></html>
Try it Yourself »


CSS Border
The CSS border property defines a border 
around an HTML element.
Tip: You can define a border for nearly all HTML elements.

Example
Use of CSS border property: 

 p {  border: 2px 
solid powderblue;}

Try it Yourself »


CSS Padding
The CSS padding property defines a padding 
(space) between the text and the border.

Example
Use of CSS border and padding properties:

 p {  border: 2px 
solid powderblue;  padding: 30px;}
Try it Yourself »


CSS Margin
The CSS margin property defines a margin 
(space) outside the border.

Example
Use of CSS border and margin properties:

 p {  border: 2px 
solid powderblue;  margin: 50px;
 }
Try it Yourself »


Link to External CSS
External style sheets can be referenced with a full URL or with a path relative to the current web page.

Example
This example uses a full URL to link to a style sheet:

<link rel=""stylesheet"" href=""https://www.w3schools.com/html/styles.css"">


Try it Yourself »


Example
This example links to a style sheet located in the html folder on the current web site: 

<link rel=""stylesheet"" href=""/html/styles.css"">


Try it Yourself »


Example
This example links to a style sheet located in the same folder as the current page:

<link rel=""stylesheet"" href=""styles.css"">


Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the HTML style attribute for inline styling
Use the HTML <style> element to define internal CSS
Use the HTML <link> element to refer to an external CSS file
Use the HTML <head> element to store <style> and <link> elements
Use the CSS color property for text colors
Use the CSS font-family property for text fonts
Use the CSS font-size property for text sizes
Use the CSS border property for borders
Use the CSS padding property for space inside the border
Use the CSS margin property for space outside the border


Tip: You can learn much more about CSS in our CSS Tutorial.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use CSS to set the background color of the document (body) to yellow.

<!DOCTYPE html>

<html>

<head>

<style>

 

  :yellow;



</style>

</head>

<body>

<h1>My Home Page</h1>

</body>

</html>


Submit Answer »
Start the Exercise



HTML Style Tags


Tag
Description


<style>
Defines style information for an HTML document


<link>
Defines a link between a document and an external resource 



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
18,https://www.w3schools.com/html/html_links.asp,"HTML Links

❮ Previous
Next ❯


Links are found in nearly all web pages. Links allow users to click their way from page to page.

HTML Links - Hyperlinks
HTML links are hyperlinks.
You can click on a link and jump to another document.
When you move the mouse over a link, the mouse arrow will turn into a little hand.

Note: A link does not have to be text. A link can be an image 
  or any other HTML element!


HTML Links - Syntax
The HTML <a> tag defines a hyperlink. 
It has the following syntax:


<a href=""url"">link text</a>


The most important attribute of the <a>  element is the 
href attribute, which indicates the link's destination.
The link text is the part that will be visible to the reader.
Clicking on the link text, will send the reader to the specified URL address.

Example
This example shows how to create a link to W3Schools.com:

<a href=""https://www.w3schools.com/"">Visit W3Schools.com!</a>

Try it Yourself »

By default, links will appear as follows in all browsers:

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red


Tip: Links can of course be styled with CSS, to get 
  another look!


HTML Links - The target Attribute
By default, the linked page will be displayed in the current browser window. 
To change this, you must specify another target for the link.
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:

_self - Default. Opens the document in 
  the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window


Example
Use target=""_blank"" to open the linked document in a new browser window or tab:

 <a href=""https://www.w3schools.com/""
target=""_blank"">Visit W3Schools!</a>

Try it Yourself »


Absolute URLs vs. Relative URLs
Both examples above are using an absolute URL (a full web address) 
in the href attribute.
A local link (a link to a page within the same website) is specified with a 
relative URL (without 
the ""https://www"" part):

Example

  <h2>Absolute URLs</h2><p><a href=""https://www.w3.org/"">W3C</a></p>
  <p><a href=""https://www.google.com/"">Google</a></p><h2>Relative 
  URLs</h2><p><a href=""html_images.asp"">HTML Images</a></p><p><a href=""/css/default.asp"">CSS 
  Tutorial</a></p>
Try it Yourself »








HTML Links - Use an Image as a Link
To use an image as a link, just put the <img> 
tag inside the <a> tag:

Example

<a href=""default.asp""><img src=""smiley.gif"" alt=""HTML tutorial"" style=""width:42px;height:42px;""></a>

Try it Yourself »


Link to an Email Address
Use 
mailto: inside the 
href attribute to create a link that opens the user's email program (to 
let them send a new email):

Example

  <a href=""mailto:someone@example.com"">Send email</a>

Try it Yourself »


Button as a Link
To use an HTML button as a link, you have to add some JavaScript code.
JavaScript allows you to specify what happens at certain events, such as a click of a button:

Example

<button 
  onclick=""document.location='default.asp'"">HTML Tutorial</button>

Try it Yourself »


Tip: Learn more about JavaScript in our JavaScript Tutorial.


Link Titles
The title attribute specifies extra information about an element.
The information is most often shown as a tooltip text when the mouse moves over the element.

Example

  <a href=""https://www.w3schools.com/html/"" title=""Go to W3Schools HTML 
  section"">Visit our HTML Tutorial</a>
Try it Yourself »


More on Absolute URLs and Relative URLs

Example
Use a full URL to link to a web page: 

  <a href=""https://www.w3schools.com/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the html folder on the current web site: 

  <a href=""/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the same folder as the current page: 

  <a href=""default.asp"">HTML tutorial</a>

Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the <a> element to define a link
Use the href attribute to define the link address
Use the target attribute to define where to open the linked document
Use the <img> element (inside <a>) 
  to use an image as a link
Use the 
  mailto: scheme inside the 
href attribute to create a link that opens the user's email program


HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
18,https://www.w3schools.com/html/html_links.asp,"HTML Links

❮ Previous
Next ❯


Links are found in nearly all web pages. Links allow users to click their way from page to page.

HTML Links - Hyperlinks
HTML links are hyperlinks.
You can click on a link and jump to another document.
When you move the mouse over a link, the mouse arrow will turn into a little hand.

Note: A link does not have to be text. A link can be an image 
  or any other HTML element!


HTML Links - Syntax
The HTML <a> tag defines a hyperlink. 
It has the following syntax:


<a href=""url"">link text</a>


The most important attribute of the <a>  element is the 
href attribute, which indicates the link's destination.
The link text is the part that will be visible to the reader.
Clicking on the link text, will send the reader to the specified URL address.

Example
This example shows how to create a link to W3Schools.com:

<a href=""https://www.w3schools.com/"">Visit W3Schools.com!</a>

Try it Yourself »

By default, links will appear as follows in all browsers:

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red


Tip: Links can of course be styled with CSS, to get 
  another look!


HTML Links - The target Attribute
By default, the linked page will be displayed in the current browser window. 
To change this, you must specify another target for the link.
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:

_self - Default. Opens the document in 
  the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window


Example
Use target=""_blank"" to open the linked document in a new browser window or tab:

 <a href=""https://www.w3schools.com/""
target=""_blank"">Visit W3Schools!</a>

Try it Yourself »


Absolute URLs vs. Relative URLs
Both examples above are using an absolute URL (a full web address) 
in the href attribute.
A local link (a link to a page within the same website) is specified with a 
relative URL (without 
the ""https://www"" part):

Example

  <h2>Absolute URLs</h2><p><a href=""https://www.w3.org/"">W3C</a></p>
  <p><a href=""https://www.google.com/"">Google</a></p><h2>Relative 
  URLs</h2><p><a href=""html_images.asp"">HTML Images</a></p><p><a href=""/css/default.asp"">CSS 
  Tutorial</a></p>
Try it Yourself »








HTML Links - Use an Image as a Link
To use an image as a link, just put the <img> 
tag inside the <a> tag:

Example

<a href=""default.asp""><img src=""smiley.gif"" alt=""HTML tutorial"" style=""width:42px;height:42px;""></a>

Try it Yourself »


Link to an Email Address
Use 
mailto: inside the 
href attribute to create a link that opens the user's email program (to 
let them send a new email):

Example

  <a href=""mailto:someone@example.com"">Send email</a>

Try it Yourself »


Button as a Link
To use an HTML button as a link, you have to add some JavaScript code.
JavaScript allows you to specify what happens at certain events, such as a click of a button:

Example

<button 
  onclick=""document.location='default.asp'"">HTML Tutorial</button>

Try it Yourself »


Tip: Learn more about JavaScript in our JavaScript Tutorial.


Link Titles
The title attribute specifies extra information about an element.
The information is most often shown as a tooltip text when the mouse moves over the element.

Example

  <a href=""https://www.w3schools.com/html/"" title=""Go to W3Schools HTML 
  section"">Visit our HTML Tutorial</a>
Try it Yourself »


More on Absolute URLs and Relative URLs

Example
Use a full URL to link to a web page: 

  <a href=""https://www.w3schools.com/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the html folder on the current web site: 

  <a href=""/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the same folder as the current page: 

  <a href=""default.asp"">HTML tutorial</a>

Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the <a> element to define a link
Use the href attribute to define the link address
Use the target attribute to define where to open the linked document
Use the <img> element (inside <a>) 
  to use an image as a link
Use the 
  mailto: scheme inside the 
href attribute to create a link that opens the user's email program


HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
19,https://www.w3schools.com/html/html_links.asp,"HTML Links

❮ Previous
Next ❯


Links are found in nearly all web pages. Links allow users to click their way from page to page.

HTML Links - Hyperlinks
HTML links are hyperlinks.
You can click on a link and jump to another document.
When you move the mouse over a link, the mouse arrow will turn into a little hand.

Note: A link does not have to be text. A link can be an image 
  or any other HTML element!


HTML Links - Syntax
The HTML <a> tag defines a hyperlink. 
It has the following syntax:


<a href=""url"">link text</a>


The most important attribute of the <a>  element is the 
href attribute, which indicates the link's destination.
The link text is the part that will be visible to the reader.
Clicking on the link text, will send the reader to the specified URL address.

Example
This example shows how to create a link to W3Schools.com:

<a href=""https://www.w3schools.com/"">Visit W3Schools.com!</a>

Try it Yourself »

By default, links will appear as follows in all browsers:

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red


Tip: Links can of course be styled with CSS, to get 
  another look!


HTML Links - The target Attribute
By default, the linked page will be displayed in the current browser window. 
To change this, you must specify another target for the link.
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:

_self - Default. Opens the document in 
  the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window


Example
Use target=""_blank"" to open the linked document in a new browser window or tab:

 <a href=""https://www.w3schools.com/""
target=""_blank"">Visit W3Schools!</a>

Try it Yourself »


Absolute URLs vs. Relative URLs
Both examples above are using an absolute URL (a full web address) 
in the href attribute.
A local link (a link to a page within the same website) is specified with a 
relative URL (without 
the ""https://www"" part):

Example

  <h2>Absolute URLs</h2><p><a href=""https://www.w3.org/"">W3C</a></p>
  <p><a href=""https://www.google.com/"">Google</a></p><h2>Relative 
  URLs</h2><p><a href=""html_images.asp"">HTML Images</a></p><p><a href=""/css/default.asp"">CSS 
  Tutorial</a></p>
Try it Yourself »








HTML Links - Use an Image as a Link
To use an image as a link, just put the <img> 
tag inside the <a> tag:

Example

<a href=""default.asp""><img src=""smiley.gif"" alt=""HTML tutorial"" style=""width:42px;height:42px;""></a>

Try it Yourself »


Link to an Email Address
Use 
mailto: inside the 
href attribute to create a link that opens the user's email program (to 
let them send a new email):

Example

  <a href=""mailto:someone@example.com"">Send email</a>

Try it Yourself »


Button as a Link
To use an HTML button as a link, you have to add some JavaScript code.
JavaScript allows you to specify what happens at certain events, such as a click of a button:

Example

<button 
  onclick=""document.location='default.asp'"">HTML Tutorial</button>

Try it Yourself »


Tip: Learn more about JavaScript in our JavaScript Tutorial.


Link Titles
The title attribute specifies extra information about an element.
The information is most often shown as a tooltip text when the mouse moves over the element.

Example

  <a href=""https://www.w3schools.com/html/"" title=""Go to W3Schools HTML 
  section"">Visit our HTML Tutorial</a>
Try it Yourself »


More on Absolute URLs and Relative URLs

Example
Use a full URL to link to a web page: 

  <a href=""https://www.w3schools.com/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the html folder on the current web site: 

  <a href=""/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the same folder as the current page: 

  <a href=""default.asp"">HTML tutorial</a>

Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the <a> element to define a link
Use the href attribute to define the link address
Use the target attribute to define where to open the linked document
Use the <img> element (inside <a>) 
  to use an image as a link
Use the 
  mailto: scheme inside the 
href attribute to create a link that opens the user's email program


HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
19,https://www.w3schools.com/html/html_links.asp,"HTML Links

❮ Previous
Next ❯


Links are found in nearly all web pages. Links allow users to click their way from page to page.

HTML Links - Hyperlinks
HTML links are hyperlinks.
You can click on a link and jump to another document.
When you move the mouse over a link, the mouse arrow will turn into a little hand.

Note: A link does not have to be text. A link can be an image 
  or any other HTML element!


HTML Links - Syntax
The HTML <a> tag defines a hyperlink. 
It has the following syntax:


<a href=""url"">link text</a>


The most important attribute of the <a>  element is the 
href attribute, which indicates the link's destination.
The link text is the part that will be visible to the reader.
Clicking on the link text, will send the reader to the specified URL address.

Example
This example shows how to create a link to W3Schools.com:

<a href=""https://www.w3schools.com/"">Visit W3Schools.com!</a>

Try it Yourself »

By default, links will appear as follows in all browsers:

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red


Tip: Links can of course be styled with CSS, to get 
  another look!


HTML Links - The target Attribute
By default, the linked page will be displayed in the current browser window. 
To change this, you must specify another target for the link.
The target attribute specifies where to open the linked document.
The target attribute can have one of the following values:

_self - Default. Opens the document in 
  the same window/tab as it was clicked
_blank - Opens the document in a new window or tab
_parent - Opens the document in the parent frame
_top - Opens the document in the full body of the window


Example
Use target=""_blank"" to open the linked document in a new browser window or tab:

 <a href=""https://www.w3schools.com/""
target=""_blank"">Visit W3Schools!</a>

Try it Yourself »


Absolute URLs vs. Relative URLs
Both examples above are using an absolute URL (a full web address) 
in the href attribute.
A local link (a link to a page within the same website) is specified with a 
relative URL (without 
the ""https://www"" part):

Example

  <h2>Absolute URLs</h2><p><a href=""https://www.w3.org/"">W3C</a></p>
  <p><a href=""https://www.google.com/"">Google</a></p><h2>Relative 
  URLs</h2><p><a href=""html_images.asp"">HTML Images</a></p><p><a href=""/css/default.asp"">CSS 
  Tutorial</a></p>
Try it Yourself »








HTML Links - Use an Image as a Link
To use an image as a link, just put the <img> 
tag inside the <a> tag:

Example

<a href=""default.asp""><img src=""smiley.gif"" alt=""HTML tutorial"" style=""width:42px;height:42px;""></a>

Try it Yourself »


Link to an Email Address
Use 
mailto: inside the 
href attribute to create a link that opens the user's email program (to 
let them send a new email):

Example

  <a href=""mailto:someone@example.com"">Send email</a>

Try it Yourself »


Button as a Link
To use an HTML button as a link, you have to add some JavaScript code.
JavaScript allows you to specify what happens at certain events, such as a click of a button:

Example

<button 
  onclick=""document.location='default.asp'"">HTML Tutorial</button>

Try it Yourself »


Tip: Learn more about JavaScript in our JavaScript Tutorial.


Link Titles
The title attribute specifies extra information about an element.
The information is most often shown as a tooltip text when the mouse moves over the element.

Example

  <a href=""https://www.w3schools.com/html/"" title=""Go to W3Schools HTML 
  section"">Visit our HTML Tutorial</a>
Try it Yourself »


More on Absolute URLs and Relative URLs

Example
Use a full URL to link to a web page: 

  <a href=""https://www.w3schools.com/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the html folder on the current web site: 

  <a href=""/html/default.asp"">HTML tutorial</a>

Try it Yourself »


Example
Link to a page located in the same folder as the current page: 

  <a href=""default.asp"">HTML tutorial</a>

Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.


Chapter Summary

Use the <a> element to define a link
Use the href attribute to define the link address
Use the target attribute to define where to open the linked document
Use the <img> element (inside <a>) 
  to use an image as a link
Use the 
  mailto: scheme inside the 
href attribute to create a link that opens the user's email program


HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
20,https://www.w3schools.com/html/html_links_colors.asp,"HTML Links - Different Colors

❮ Previous
Next ❯


An HTML link is displayed in a different color depending on 
whether it has been visited, is unvisited, or is active.

HTML Link Colors
By default, a link will appear like this (in all browsers):

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red

You can change the link state colors, by using CSS:

Example
Here, an unvisited link will be green with no underline. A visited link 
will be pink with no underline. An active link will be yellow and underlined. 
In addition, when mousing over a link (a:hover) it will become red and underlined:

<style>a:link {  color: green;   background-color: transparent; 
    text-decoration: none;}
a:visited {  color: pink;  background-color: transparent;  
  text-decoration: none;}a:hover {  color: red;  background-color: transparent;
    text-decoration: underline;}
  a:active {  color: yellow;  background-color: transparent;  
  text-decoration: underline;}</style>

Try it Yourself »


Link Buttons
A link can also be styled as a button, by using CSS:
This is a link

Example

<style>a:link, a:visited {  background-color: #f44336;  
  color: white;  padding: 15px 25px;  text-align: center;  
  text-decoration: none;  display: inline-block;}a:hover, a:active {  
  background-color: red;}</style>

Try it Yourself »


To learn more about CSS, go to our CSS Tutorial.

HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
20,https://www.w3schools.com/html/html_links_colors.asp,"HTML Links - Different Colors

❮ Previous
Next ❯


An HTML link is displayed in a different color depending on 
whether it has been visited, is unvisited, or is active.

HTML Link Colors
By default, a link will appear like this (in all browsers):

An unvisited link is underlined and blue
A visited link is underlined and purple
An active link is underlined and red

You can change the link state colors, by using CSS:

Example
Here, an unvisited link will be green with no underline. A visited link 
will be pink with no underline. An active link will be yellow and underlined. 
In addition, when mousing over a link (a:hover) it will become red and underlined:

<style>a:link {  color: green;   background-color: transparent; 
    text-decoration: none;}
a:visited {  color: pink;  background-color: transparent;  
  text-decoration: none;}a:hover {  color: red;  background-color: transparent;
    text-decoration: underline;}
  a:active {  color: yellow;  background-color: transparent;  
  text-decoration: underline;}</style>

Try it Yourself »


Link Buttons
A link can also be styled as a button, by using CSS:
This is a link

Example

<style>a:link, a:visited {  background-color: #f44336;  
  color: white;  padding: 15px 25px;  text-align: center;  
  text-decoration: none;  display: inline-block;}a:hover, a:active {  
  background-color: red;}</style>

Try it Yourself »


To learn more about CSS, go to our CSS Tutorial.

HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
21,https://www.w3schools.com/html/html_links_bookmarks.asp,"HTML Links - Create Bookmarks

❮ Previous
Next ❯


HTML links can be used to create bookmarks, so that readers can 
jump to specific parts of a web page.

Create a Bookmark in HTML
Bookmarks can be useful if a web page is very long.
To create a bookmark - first create the bookmark, then add a link 
to it.
When the link is clicked, the page will scroll down or up to the location with the 
bookmark.
Example
First, use the id attribute to create a 
bookmark:


<h2 id=""C4"">Chapter 4</h2>

Then, add a link to the bookmark (""Jump to Chapter 4""), from within the same page:

Example

 <a href=""#C4"">Jump to Chapter 4</a>

Try it Yourself »

You can also add a link to a bookmark on another page:


<a href=""html_demo.html#C4"">Jump to Chapter 4</a>



Chapter Summary

Use the id attribute (id=""value"") to define bookmarks in a page
Use the href attribute (href=""#value"") to link to the bookmark


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML to make the text below into a link to ""default.html"".

 >Visit our HTML tutorial.


Submit Answer »
Start the Exercise



HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
21,https://www.w3schools.com/html/html_links_bookmarks.asp,"HTML Links - Create Bookmarks

❮ Previous
Next ❯


HTML links can be used to create bookmarks, so that readers can 
jump to specific parts of a web page.

Create a Bookmark in HTML
Bookmarks can be useful if a web page is very long.
To create a bookmark - first create the bookmark, then add a link 
to it.
When the link is clicked, the page will scroll down or up to the location with the 
bookmark.
Example
First, use the id attribute to create a 
bookmark:


<h2 id=""C4"">Chapter 4</h2>

Then, add a link to the bookmark (""Jump to Chapter 4""), from within the same page:

Example

 <a href=""#C4"">Jump to Chapter 4</a>

Try it Yourself »

You can also add a link to a bookmark on another page:


<a href=""html_demo.html#C4"">Jump to Chapter 4</a>



Chapter Summary

Use the id attribute (id=""value"") to define bookmarks in a page
Use the href attribute (href=""#value"") to link to the bookmark


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the correct HTML to make the text below into a link to ""default.html"".

 >Visit our HTML tutorial.


Submit Answer »
Start the Exercise



HTML Link Tags


Tag
Description
<a>Defines a hyperlink


For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
22,https://www.w3schools.com/html/html_images.asp,"HTML Images

❮ Previous
Next ❯


Images can improve the design and the appearance of a web page.










Example

 <img src=""pic_trulli.jpg"" 
alt=""Italian Trulli"">

Try it Yourself »


Example

 <img src=""img_girl.jpg"" 
alt=""Girl in a jacket"">
Try it Yourself »


Example

 <img src=""img_chania.jpg"" 
alt=""Flowers in Chania"">

Try it Yourself »


HTML Images Syntax
The HTML <img> tag is used to embed an 
image in a web page.
Images are not technically inserted into a web page; images are linked to web 
pages. The <img> tag creates a holding 
space for the referenced image.
The <img> tag is empty, it contains attributes only, and does not 
have a closing tag.
The <img> tag has two required 
attributes:

src - Specifies the path to the image
alt - Specifies an alternate text for the image


Syntax

<img src=""url"" alt=""alternatetext"">


The src Attribute
The required src attribute specifies the path (URL) to the image.
Note: When a web page loads, it is the browser, at that 
moment, that gets the image from a web server and inserts it into the page. 
Therefore, make sure that the image actually stays in the same spot in relation 
to the web page, otherwise your visitors will get a broken link icon. The broken 
link icon and the alt text are shown if the browser cannot find the image.

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »








The alt Attribute
The required alt attribute provides an alternate text for an image, if the user for 
some reason cannot view it (because of slow connection, an error in the src 
attribute, or if the user uses a screen reader).
The value of the alt attribute should describe the image:

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »

If a browser cannot find an image, it will display the value of the alt 
attribute:

Example

<img src=""wrongname.gif"" alt=""Flowers 
  in Chania"">

Try it Yourself »


Tip: A screen reader is a software program that reads the HTML code, and allows the user to ""listen"" to the content. Screen readers are useful 
for people who are visually impaired or learning disabled.


Image Size - Width and Height
You can use the style attribute to specify the width and 
height of an image.

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" style=""width:500px;height:600px;"">

Try it Yourself »

Alternatively, you can use the width and height attributes:

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" width=""500"" height=""600"">

Try it Yourself »

The width and height attributes always define the width and height of the 
image in pixels.

Note: Always specify the width and height of an image. If width and height are not specified, the 
  web page 
  might flicker while the image loads.


Width and Height, or Style?
The width, height, and style attributes are 
all valid in HTML.
However, we suggest using the style attribute. It prevents styles sheets from changing 
the size of images:

Example

 <!DOCTYPE html><html><head><style>img {   width: 100%; }
 </style></head><body><img src=""html5.gif"" alt=""HTML5 Icon"" width=""128"" height=""128""><img src=""html5.gif"" alt=""HTML5 Icon"" style=""width:128px;height:128px;""></body></html>
Try it Yourself »


Images in Another Folder
If you have your images in a sub-folder, you must include the folder 
name in the src attribute:

Example

<img src=""/images/html5.gif"" 
alt=""HTML5 Icon"" style=""width:128px;height:128px;"">

Try it Yourself »


Images on Another Server/Website
Some web sites point to an image on another server.
To point to an image on another server, you must specify an absolute (full) 
URL in the src attribute:

Example

<img src=""https://www.w3schools.com/images/w3schools_green.jpg"" alt=""W3Schools.com"">

Try it Yourself »

Notes on external images: External images might be under 
copyright. If you do not get permission to use it, you may be in violation of 
copyright laws. In addition, you cannot control external images; it can suddenly 
be removed or changed.

Animated Images
HTML allows animated GIFs:

Example

<img src=""programming.gif"" alt=""Computer Man"" style=""width:48px;height:48px;"">

Try it Yourself »


Image as a Link
To use an image as a link, put the <img> tag inside the <a> 
tag:

Example

<a href=""default.asp"">  <img src=""smiley.gif"" alt=""HTML tutorial"" 
style=""width:42px;height:42px;""></a>

Try it Yourself »


Image Floating
Use the CSS float property to let the image float to the right or to the left of a text:

Example

<p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:right;width:42px;height:42px;"">
 The image will float to the right of 
the text.</p><p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:left;width:42px;height:42px;"">
 The image will float to the left of 
the text.</p>
Try it Yourself »


Tip: To learn more about CSS Float, read our CSS Float Tutorial.


Common Image Formats
Here are the most common image file types, which are supported in all browsers 
(Chrome, Edge, Firefox, Safari, Opera):


Abbreviation
File Format
File Extension


APNG
Animated Portable Network Graphics
.apng


GIF
Graphics Interchange Format
.gif


ICO
Microsoft Icon
.ico, .cur 


JPEG
Joint Photographic Expert Group image
.jpg, .jpeg, .jfif, .pjpeg, .pjp


PNG
Portable Network Graphics
.png


SVG
Scalable Vector Graphics
.svg



Chapter Summary

Use the HTML <img> element to define an image
Use the HTML src attribute to define the URL of the image
Use the HTML alt attribute to define an alternate text for an image, if it cannot be displayed
Use the HTML width and height attributes 
  or the CSS width and height 
  properties to define the size of the image
Use the CSS float property to let the image float 
  to the left or to the right


Note: Loading large images takes time, and can slow down your 
  web page. Use images carefully.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML image attributes to set the size of the image to 250 pixels wide and 400 pixels tall.

<img src=""scream.png"" =""250"" =""400"">


Submit Answer »
Start the Exercise



HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
22,https://www.w3schools.com/html/html_images.asp,"HTML Images

❮ Previous
Next ❯


Images can improve the design and the appearance of a web page.










Example

 <img src=""pic_trulli.jpg"" 
alt=""Italian Trulli"">

Try it Yourself »


Example

 <img src=""img_girl.jpg"" 
alt=""Girl in a jacket"">
Try it Yourself »


Example

 <img src=""img_chania.jpg"" 
alt=""Flowers in Chania"">

Try it Yourself »


HTML Images Syntax
The HTML <img> tag is used to embed an 
image in a web page.
Images are not technically inserted into a web page; images are linked to web 
pages. The <img> tag creates a holding 
space for the referenced image.
The <img> tag is empty, it contains attributes only, and does not 
have a closing tag.
The <img> tag has two required 
attributes:

src - Specifies the path to the image
alt - Specifies an alternate text for the image


Syntax

<img src=""url"" alt=""alternatetext"">


The src Attribute
The required src attribute specifies the path (URL) to the image.
Note: When a web page loads, it is the browser, at that 
moment, that gets the image from a web server and inserts it into the page. 
Therefore, make sure that the image actually stays in the same spot in relation 
to the web page, otherwise your visitors will get a broken link icon. The broken 
link icon and the alt text are shown if the browser cannot find the image.

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »








The alt Attribute
The required alt attribute provides an alternate text for an image, if the user for 
some reason cannot view it (because of slow connection, an error in the src 
attribute, or if the user uses a screen reader).
The value of the alt attribute should describe the image:

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »

If a browser cannot find an image, it will display the value of the alt 
attribute:

Example

<img src=""wrongname.gif"" alt=""Flowers 
  in Chania"">

Try it Yourself »


Tip: A screen reader is a software program that reads the HTML code, and allows the user to ""listen"" to the content. Screen readers are useful 
for people who are visually impaired or learning disabled.


Image Size - Width and Height
You can use the style attribute to specify the width and 
height of an image.

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" style=""width:500px;height:600px;"">

Try it Yourself »

Alternatively, you can use the width and height attributes:

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" width=""500"" height=""600"">

Try it Yourself »

The width and height attributes always define the width and height of the 
image in pixels.

Note: Always specify the width and height of an image. If width and height are not specified, the 
  web page 
  might flicker while the image loads.


Width and Height, or Style?
The width, height, and style attributes are 
all valid in HTML.
However, we suggest using the style attribute. It prevents styles sheets from changing 
the size of images:

Example

 <!DOCTYPE html><html><head><style>img {   width: 100%; }
 </style></head><body><img src=""html5.gif"" alt=""HTML5 Icon"" width=""128"" height=""128""><img src=""html5.gif"" alt=""HTML5 Icon"" style=""width:128px;height:128px;""></body></html>
Try it Yourself »


Images in Another Folder
If you have your images in a sub-folder, you must include the folder 
name in the src attribute:

Example

<img src=""/images/html5.gif"" 
alt=""HTML5 Icon"" style=""width:128px;height:128px;"">

Try it Yourself »


Images on Another Server/Website
Some web sites point to an image on another server.
To point to an image on another server, you must specify an absolute (full) 
URL in the src attribute:

Example

<img src=""https://www.w3schools.com/images/w3schools_green.jpg"" alt=""W3Schools.com"">

Try it Yourself »

Notes on external images: External images might be under 
copyright. If you do not get permission to use it, you may be in violation of 
copyright laws. In addition, you cannot control external images; it can suddenly 
be removed or changed.

Animated Images
HTML allows animated GIFs:

Example

<img src=""programming.gif"" alt=""Computer Man"" style=""width:48px;height:48px;"">

Try it Yourself »


Image as a Link
To use an image as a link, put the <img> tag inside the <a> 
tag:

Example

<a href=""default.asp"">  <img src=""smiley.gif"" alt=""HTML tutorial"" 
style=""width:42px;height:42px;""></a>

Try it Yourself »


Image Floating
Use the CSS float property to let the image float to the right or to the left of a text:

Example

<p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:right;width:42px;height:42px;"">
 The image will float to the right of 
the text.</p><p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:left;width:42px;height:42px;"">
 The image will float to the left of 
the text.</p>
Try it Yourself »


Tip: To learn more about CSS Float, read our CSS Float Tutorial.


Common Image Formats
Here are the most common image file types, which are supported in all browsers 
(Chrome, Edge, Firefox, Safari, Opera):


Abbreviation
File Format
File Extension


APNG
Animated Portable Network Graphics
.apng


GIF
Graphics Interchange Format
.gif


ICO
Microsoft Icon
.ico, .cur 


JPEG
Joint Photographic Expert Group image
.jpg, .jpeg, .jfif, .pjpeg, .pjp


PNG
Portable Network Graphics
.png


SVG
Scalable Vector Graphics
.svg



Chapter Summary

Use the HTML <img> element to define an image
Use the HTML src attribute to define the URL of the image
Use the HTML alt attribute to define an alternate text for an image, if it cannot be displayed
Use the HTML width and height attributes 
  or the CSS width and height 
  properties to define the size of the image
Use the CSS float property to let the image float 
  to the left or to the right


Note: Loading large images takes time, and can slow down your 
  web page. Use images carefully.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML image attributes to set the size of the image to 250 pixels wide and 400 pixels tall.

<img src=""scream.png"" =""250"" =""400"">


Submit Answer »
Start the Exercise



HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
23,https://www.w3schools.com/html/html_images.asp,"HTML Images

❮ Previous
Next ❯


Images can improve the design and the appearance of a web page.










Example

 <img src=""pic_trulli.jpg"" 
alt=""Italian Trulli"">

Try it Yourself »


Example

 <img src=""img_girl.jpg"" 
alt=""Girl in a jacket"">
Try it Yourself »


Example

 <img src=""img_chania.jpg"" 
alt=""Flowers in Chania"">

Try it Yourself »


HTML Images Syntax
The HTML <img> tag is used to embed an 
image in a web page.
Images are not technically inserted into a web page; images are linked to web 
pages. The <img> tag creates a holding 
space for the referenced image.
The <img> tag is empty, it contains attributes only, and does not 
have a closing tag.
The <img> tag has two required 
attributes:

src - Specifies the path to the image
alt - Specifies an alternate text for the image


Syntax

<img src=""url"" alt=""alternatetext"">


The src Attribute
The required src attribute specifies the path (URL) to the image.
Note: When a web page loads, it is the browser, at that 
moment, that gets the image from a web server and inserts it into the page. 
Therefore, make sure that the image actually stays in the same spot in relation 
to the web page, otherwise your visitors will get a broken link icon. The broken 
link icon and the alt text are shown if the browser cannot find the image.

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »








The alt Attribute
The required alt attribute provides an alternate text for an image, if the user for 
some reason cannot view it (because of slow connection, an error in the src 
attribute, or if the user uses a screen reader).
The value of the alt attribute should describe the image:

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »

If a browser cannot find an image, it will display the value of the alt 
attribute:

Example

<img src=""wrongname.gif"" alt=""Flowers 
  in Chania"">

Try it Yourself »


Tip: A screen reader is a software program that reads the HTML code, and allows the user to ""listen"" to the content. Screen readers are useful 
for people who are visually impaired or learning disabled.


Image Size - Width and Height
You can use the style attribute to specify the width and 
height of an image.

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" style=""width:500px;height:600px;"">

Try it Yourself »

Alternatively, you can use the width and height attributes:

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" width=""500"" height=""600"">

Try it Yourself »

The width and height attributes always define the width and height of the 
image in pixels.

Note: Always specify the width and height of an image. If width and height are not specified, the 
  web page 
  might flicker while the image loads.


Width and Height, or Style?
The width, height, and style attributes are 
all valid in HTML.
However, we suggest using the style attribute. It prevents styles sheets from changing 
the size of images:

Example

 <!DOCTYPE html><html><head><style>img {   width: 100%; }
 </style></head><body><img src=""html5.gif"" alt=""HTML5 Icon"" width=""128"" height=""128""><img src=""html5.gif"" alt=""HTML5 Icon"" style=""width:128px;height:128px;""></body></html>
Try it Yourself »


Images in Another Folder
If you have your images in a sub-folder, you must include the folder 
name in the src attribute:

Example

<img src=""/images/html5.gif"" 
alt=""HTML5 Icon"" style=""width:128px;height:128px;"">

Try it Yourself »


Images on Another Server/Website
Some web sites point to an image on another server.
To point to an image on another server, you must specify an absolute (full) 
URL in the src attribute:

Example

<img src=""https://www.w3schools.com/images/w3schools_green.jpg"" alt=""W3Schools.com"">

Try it Yourself »

Notes on external images: External images might be under 
copyright. If you do not get permission to use it, you may be in violation of 
copyright laws. In addition, you cannot control external images; it can suddenly 
be removed or changed.

Animated Images
HTML allows animated GIFs:

Example

<img src=""programming.gif"" alt=""Computer Man"" style=""width:48px;height:48px;"">

Try it Yourself »


Image as a Link
To use an image as a link, put the <img> tag inside the <a> 
tag:

Example

<a href=""default.asp"">  <img src=""smiley.gif"" alt=""HTML tutorial"" 
style=""width:42px;height:42px;""></a>

Try it Yourself »


Image Floating
Use the CSS float property to let the image float to the right or to the left of a text:

Example

<p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:right;width:42px;height:42px;"">
 The image will float to the right of 
the text.</p><p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:left;width:42px;height:42px;"">
 The image will float to the left of 
the text.</p>
Try it Yourself »


Tip: To learn more about CSS Float, read our CSS Float Tutorial.


Common Image Formats
Here are the most common image file types, which are supported in all browsers 
(Chrome, Edge, Firefox, Safari, Opera):


Abbreviation
File Format
File Extension


APNG
Animated Portable Network Graphics
.apng


GIF
Graphics Interchange Format
.gif


ICO
Microsoft Icon
.ico, .cur 


JPEG
Joint Photographic Expert Group image
.jpg, .jpeg, .jfif, .pjpeg, .pjp


PNG
Portable Network Graphics
.png


SVG
Scalable Vector Graphics
.svg



Chapter Summary

Use the HTML <img> element to define an image
Use the HTML src attribute to define the URL of the image
Use the HTML alt attribute to define an alternate text for an image, if it cannot be displayed
Use the HTML width and height attributes 
  or the CSS width and height 
  properties to define the size of the image
Use the CSS float property to let the image float 
  to the left or to the right


Note: Loading large images takes time, and can slow down your 
  web page. Use images carefully.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML image attributes to set the size of the image to 250 pixels wide and 400 pixels tall.

<img src=""scream.png"" =""250"" =""400"">


Submit Answer »
Start the Exercise



HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
23,https://www.w3schools.com/html/html_images.asp,"HTML Images

❮ Previous
Next ❯


Images can improve the design and the appearance of a web page.










Example

 <img src=""pic_trulli.jpg"" 
alt=""Italian Trulli"">

Try it Yourself »


Example

 <img src=""img_girl.jpg"" 
alt=""Girl in a jacket"">
Try it Yourself »


Example

 <img src=""img_chania.jpg"" 
alt=""Flowers in Chania"">

Try it Yourself »


HTML Images Syntax
The HTML <img> tag is used to embed an 
image in a web page.
Images are not technically inserted into a web page; images are linked to web 
pages. The <img> tag creates a holding 
space for the referenced image.
The <img> tag is empty, it contains attributes only, and does not 
have a closing tag.
The <img> tag has two required 
attributes:

src - Specifies the path to the image
alt - Specifies an alternate text for the image


Syntax

<img src=""url"" alt=""alternatetext"">


The src Attribute
The required src attribute specifies the path (URL) to the image.
Note: When a web page loads, it is the browser, at that 
moment, that gets the image from a web server and inserts it into the page. 
Therefore, make sure that the image actually stays in the same spot in relation 
to the web page, otherwise your visitors will get a broken link icon. The broken 
link icon and the alt text are shown if the browser cannot find the image.

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »








The alt Attribute
The required alt attribute provides an alternate text for an image, if the user for 
some reason cannot view it (because of slow connection, an error in the src 
attribute, or if the user uses a screen reader).
The value of the alt attribute should describe the image:

Example

<img src=""img_chania.jpg"" alt=""Flowers 
  in Chania"">

Try it Yourself »

If a browser cannot find an image, it will display the value of the alt 
attribute:

Example

<img src=""wrongname.gif"" alt=""Flowers 
  in Chania"">

Try it Yourself »


Tip: A screen reader is a software program that reads the HTML code, and allows the user to ""listen"" to the content. Screen readers are useful 
for people who are visually impaired or learning disabled.


Image Size - Width and Height
You can use the style attribute to specify the width and 
height of an image.

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" style=""width:500px;height:600px;"">

Try it Yourself »

Alternatively, you can use the width and height attributes:

Example

<img src=""img_girl.jpg"" alt=""Girl in a jacket"" width=""500"" height=""600"">

Try it Yourself »

The width and height attributes always define the width and height of the 
image in pixels.

Note: Always specify the width and height of an image. If width and height are not specified, the 
  web page 
  might flicker while the image loads.


Width and Height, or Style?
The width, height, and style attributes are 
all valid in HTML.
However, we suggest using the style attribute. It prevents styles sheets from changing 
the size of images:

Example

 <!DOCTYPE html><html><head><style>img {   width: 100%; }
 </style></head><body><img src=""html5.gif"" alt=""HTML5 Icon"" width=""128"" height=""128""><img src=""html5.gif"" alt=""HTML5 Icon"" style=""width:128px;height:128px;""></body></html>
Try it Yourself »


Images in Another Folder
If you have your images in a sub-folder, you must include the folder 
name in the src attribute:

Example

<img src=""/images/html5.gif"" 
alt=""HTML5 Icon"" style=""width:128px;height:128px;"">

Try it Yourself »


Images on Another Server/Website
Some web sites point to an image on another server.
To point to an image on another server, you must specify an absolute (full) 
URL in the src attribute:

Example

<img src=""https://www.w3schools.com/images/w3schools_green.jpg"" alt=""W3Schools.com"">

Try it Yourself »

Notes on external images: External images might be under 
copyright. If you do not get permission to use it, you may be in violation of 
copyright laws. In addition, you cannot control external images; it can suddenly 
be removed or changed.

Animated Images
HTML allows animated GIFs:

Example

<img src=""programming.gif"" alt=""Computer Man"" style=""width:48px;height:48px;"">

Try it Yourself »


Image as a Link
To use an image as a link, put the <img> tag inside the <a> 
tag:

Example

<a href=""default.asp"">  <img src=""smiley.gif"" alt=""HTML tutorial"" 
style=""width:42px;height:42px;""></a>

Try it Yourself »


Image Floating
Use the CSS float property to let the image float to the right or to the left of a text:

Example

<p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:right;width:42px;height:42px;"">
 The image will float to the right of 
the text.</p><p><img src=""smiley.gif"" alt=""Smiley face""
style=""float:left;width:42px;height:42px;"">
 The image will float to the left of 
the text.</p>
Try it Yourself »


Tip: To learn more about CSS Float, read our CSS Float Tutorial.


Common Image Formats
Here are the most common image file types, which are supported in all browsers 
(Chrome, Edge, Firefox, Safari, Opera):


Abbreviation
File Format
File Extension


APNG
Animated Portable Network Graphics
.apng


GIF
Graphics Interchange Format
.gif


ICO
Microsoft Icon
.ico, .cur 


JPEG
Joint Photographic Expert Group image
.jpg, .jpeg, .jfif, .pjpeg, .pjp


PNG
Portable Network Graphics
.png


SVG
Scalable Vector Graphics
.svg



Chapter Summary

Use the HTML <img> element to define an image
Use the HTML src attribute to define the URL of the image
Use the HTML alt attribute to define an alternate text for an image, if it cannot be displayed
Use the HTML width and height attributes 
  or the CSS width and height 
  properties to define the size of the image
Use the CSS float property to let the image float 
  to the left or to the right


Note: Loading large images takes time, and can slow down your 
  web page. Use images carefully.


HTML Exercises

Test Yourself With Exercises

Exercise:
Use the HTML image attributes to set the size of the image to 250 pixels wide and 400 pixels tall.

<img src=""scream.png"" =""250"" =""400"">


Submit Answer »
Start the Exercise



HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
24,https://www.w3schools.com/html/html_images_imagemap.asp,"HTML Image Maps

❮ Previous
Next ❯


With HTML image maps, you can create clickable areas on an image.

Image Maps
The HTML <map> tag defines an image map. An image map is an image with 
clickable areas. The areas are defined with one or more <area> tags. 
Try to click on the computer, phone, or the cup of coffee in the image below:







Example
Here is the HTML source code for the image map above:

<img src=""workplace.jpg"" alt=""Workplace"" usemap=""#workmap"">
<map name=""workmap"">  <area shape=""rect"" coords=""34,44,270,350"" 
  alt=""Computer"" href=""computer.htm"">  <area shape=""rect"" coords=""290,172,333,250"" 
  alt=""Phone"" href=""phone.htm"">  <area shape=""circle"" coords=""337,300,44"" 
  alt=""Coffee"" href=""coffee.htm""></map>
Try it Yourself »


How Does it Work?
The idea behind an image map is that you should be able to perform different 
actions depending on where in the image you click.
To create an image map you need an image, and some HTML code that describes the clickable areas.







The Image
The image is inserted using the <img> tag. 
The only difference from other images is that you must 
add a usemap attribute:


<img src=""workplace.jpg"" alt=""Workplace"" usemap=""#workmap"">


The usemap value starts with a hash tag
# followed by the name of the image map, and is used to create a relationship 
between the image and the image map.

Tip: You can use any image as an image map!


Create Image Map
Then, add a <map> element.
The <map> element is used to create an image map, and is linked to the image by using the 
required name 
attribute:


<map name=""workmap"">


The name attribute must have the same value as the
<img>'s usemap attribute .

The Areas
Then, add the clickable areas.
A clickable area is defined using an <area> element.
Shape
You must define the shape of the clickable area, and you can choose one of these 
values:

rect - defines a rectangular region
circle - defines a circular region
poly - defines a polygonal region
default - defines the entire region

You must also define some coordinates to be able to place the clickable area onto 
the image. 

Shape=""rect""
The coordinates for shape=""rect"" come in pairs, one for the x-axis and one for the y-axis.
So, the coordinates 34,44 is located 34 pixels 
from the left margin and 44 pixels from the top:






The coordinates 270,350 is located 270 
pixels from the left margin and 350 pixels from the top:






Now we have enough data to create a clickable rectangular area:

Example

<area shape=""rect"" coords=""34, 44, 270, 350"" href=""computer.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""computer.htm"":





Shape=""circle""
To add a circle area, first locate the coordinates of the center of the circle:
337,300






Then specify the radius of the circle:
44 pixels





Now you have enough data to create a clickable circular area:

Example

<area shape=""circle"" coords=""337, 300, 44"" href=""coffee.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""coffee.htm"":





Shape=""poly""
The shape=""poly"" contains several coordinate 
points, which creates a shape formed with straight lines (a polygon).
This can be used to create any shape.
Like maybe a croissant shape!
How can we make the croissant in the image below become a clickable link?

We have to find the x and y coordinates for all edges of the 
croissant:

The coordinates come in pairs, one for the x-axis and one for the y-axis:

Example

<area shape=""poly"" coords=""140,121,181,116,204,160,204,222,191,270,140,329,85,355,58,352,37,322,40,259,103,161,128,147"" href=""croissant.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""croissant.htm"":


Image Map and JavaScript
A clickable area can also 
trigger a JavaScript function.
Add a click event to the <area> element
to execute a JavaScript function:

Example
Here, we use the onclick attribute to execute a JavaScript function when the 
  area is clicked:

  <map name=""workmap""> 
  <area shape=""circle"" coords=""337,300,44"" 
  href=""coffee.htm"" onclick=""myFunction()""></map><script>function 
  myFunction() {  alert(""You clicked the coffee cup!"");}
  </script>
Try it Yourself »


Chapter Summary

Use the HTML <map> element to define an image map
Use the HTML <area> element to define the clickable areas in the image map
Use the HTML usemap attribute of the
  <img> element to point to an image map


HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
24,https://www.w3schools.com/html/html_images_imagemap.asp,"HTML Image Maps

❮ Previous
Next ❯


With HTML image maps, you can create clickable areas on an image.

Image Maps
The HTML <map> tag defines an image map. An image map is an image with 
clickable areas. The areas are defined with one or more <area> tags. 
Try to click on the computer, phone, or the cup of coffee in the image below:







Example
Here is the HTML source code for the image map above:

<img src=""workplace.jpg"" alt=""Workplace"" usemap=""#workmap"">
<map name=""workmap"">  <area shape=""rect"" coords=""34,44,270,350"" 
  alt=""Computer"" href=""computer.htm"">  <area shape=""rect"" coords=""290,172,333,250"" 
  alt=""Phone"" href=""phone.htm"">  <area shape=""circle"" coords=""337,300,44"" 
  alt=""Coffee"" href=""coffee.htm""></map>
Try it Yourself »


How Does it Work?
The idea behind an image map is that you should be able to perform different 
actions depending on where in the image you click.
To create an image map you need an image, and some HTML code that describes the clickable areas.







The Image
The image is inserted using the <img> tag. 
The only difference from other images is that you must 
add a usemap attribute:


<img src=""workplace.jpg"" alt=""Workplace"" usemap=""#workmap"">


The usemap value starts with a hash tag
# followed by the name of the image map, and is used to create a relationship 
between the image and the image map.

Tip: You can use any image as an image map!


Create Image Map
Then, add a <map> element.
The <map> element is used to create an image map, and is linked to the image by using the 
required name 
attribute:


<map name=""workmap"">


The name attribute must have the same value as the
<img>'s usemap attribute .

The Areas
Then, add the clickable areas.
A clickable area is defined using an <area> element.
Shape
You must define the shape of the clickable area, and you can choose one of these 
values:

rect - defines a rectangular region
circle - defines a circular region
poly - defines a polygonal region
default - defines the entire region

You must also define some coordinates to be able to place the clickable area onto 
the image. 

Shape=""rect""
The coordinates for shape=""rect"" come in pairs, one for the x-axis and one for the y-axis.
So, the coordinates 34,44 is located 34 pixels 
from the left margin and 44 pixels from the top:






The coordinates 270,350 is located 270 
pixels from the left margin and 350 pixels from the top:






Now we have enough data to create a clickable rectangular area:

Example

<area shape=""rect"" coords=""34, 44, 270, 350"" href=""computer.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""computer.htm"":





Shape=""circle""
To add a circle area, first locate the coordinates of the center of the circle:
337,300






Then specify the radius of the circle:
44 pixels





Now you have enough data to create a clickable circular area:

Example

<area shape=""circle"" coords=""337, 300, 44"" href=""coffee.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""coffee.htm"":





Shape=""poly""
The shape=""poly"" contains several coordinate 
points, which creates a shape formed with straight lines (a polygon).
This can be used to create any shape.
Like maybe a croissant shape!
How can we make the croissant in the image below become a clickable link?

We have to find the x and y coordinates for all edges of the 
croissant:

The coordinates come in pairs, one for the x-axis and one for the y-axis:

Example

<area shape=""poly"" coords=""140,121,181,116,204,160,204,222,191,270,140,329,85,355,58,352,37,322,40,259,103,161,128,147"" href=""croissant.htm"">

Try it Yourself »

This is the area that becomes clickable and will send the user to the page ""croissant.htm"":


Image Map and JavaScript
A clickable area can also 
trigger a JavaScript function.
Add a click event to the <area> element
to execute a JavaScript function:

Example
Here, we use the onclick attribute to execute a JavaScript function when the 
  area is clicked:

  <map name=""workmap""> 
  <area shape=""circle"" coords=""337,300,44"" 
  href=""coffee.htm"" onclick=""myFunction()""></map><script>function 
  myFunction() {  alert(""You clicked the coffee cup!"");}
  </script>
Try it Yourself »


Chapter Summary

Use the HTML <map> element to define an image map
Use the HTML <area> element to define the clickable areas in the image map
Use the HTML usemap attribute of the
  <img> element to point to an image map


HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
25,https://www.w3schools.com/html/html_images_background.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


HTML Background Images

❮ Previous
Next ❯


A background image can be specified for almost any HTML element.

Background Image on a HTML element
To add a background image on an HTML element, use the HTML style attribute 
and the CSS background-image property:

Example
Add a background image on a HTML element:

  <div style=""background-image: url('img_girl.jpg');"">
Try it Yourself »

You can also specify the background image in the <style> 
element, in the <head> 
section:

Example
Specify the background image in the <style> 
  element:

  <style>div {  background-image: url('img_girl.jpg');
  }</style>
Try it Yourself »


Background Image on a Page
If you want the entire page to have a background image, you must 
specify the background image on the <body> element:

Example
Add a background image for the entire page:

  <style>body {  background-image: url('img_girl.jpg');
  }</style>
Try it Yourself »


Background Repeat
If the background image is smaller than the element, the image will repeat itself, 
horizontally and vertically, until it reaches the end of the element:



Example

  <style>body {  background-image: url('example_img_girl.jpg');}</style>
Try it Yourself »

To avoid the background image from repeating itself, set the background-repeat property 
to no-repeat.

Example

  <style>body {  background-image: url('example_img_girl.jpg');  
  background-repeat: no-repeat;}</style>
Try it Yourself »


Background Cover
If you want the background image to cover the entire element, you 
can set the background-size property to
cover.
Also, to make sure the entire element is always covered, set the 
background-attachment property to fixed:
This way, the background image will cover the entire element, with no stretching (the image will 
keep its original proportions):

Example

  <style>body {  background-image: url('img_girl.jpg');  
  background-repeat: no-repeat;  background-attachment: fixed;   
  background-size: cover;
  }</style>
Try it Yourself »


Background Stretch
If you want the background image to stretch to fit the entire element, you 
can set the background-size property to
100% 100%: 


Try resizing the browser window, and you will see that the image will stretch, but always cover the entire element.

Example

  <style>body {  background-image: url('img_girl.jpg');  
  background-repeat: no-repeat;  background-attachment: fixed;   
  background-size: 100% 100%;
  }</style>
Try it Yourself »


Learn More CSS
From the examples above you have learned that background images can be styled by using the CSS background properties.
To learn more about CSS background properties, study our CSS Background Tutorial.


❮ Previous
Next ❯",html
25,https://www.w3schools.com/html/html_images_background.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


HTML Background Images

❮ Previous
Next ❯


A background image can be specified for almost any HTML element.

Background Image on a HTML element
To add a background image on an HTML element, use the HTML style attribute 
and the CSS background-image property:

Example
Add a background image on a HTML element:

  <div style=""background-image: url('img_girl.jpg');"">
Try it Yourself »

You can also specify the background image in the <style> 
element, in the <head> 
section:

Example
Specify the background image in the <style> 
  element:

  <style>div {  background-image: url('img_girl.jpg');
  }</style>
Try it Yourself »


Background Image on a Page
If you want the entire page to have a background image, you must 
specify the background image on the <body> element:

Example
Add a background image for the entire page:

  <style>body {  background-image: url('img_girl.jpg');
  }</style>
Try it Yourself »


Background Repeat
If the background image is smaller than the element, the image will repeat itself, 
horizontally and vertically, until it reaches the end of the element:



Example

  <style>body {  background-image: url('example_img_girl.jpg');}</style>
Try it Yourself »

To avoid the background image from repeating itself, set the background-repeat property 
to no-repeat.

Example

  <style>body {  background-image: url('example_img_girl.jpg');  
  background-repeat: no-repeat;}</style>
Try it Yourself »


Background Cover
If you want the background image to cover the entire element, you 
can set the background-size property to
cover.
Also, to make sure the entire element is always covered, set the 
background-attachment property to fixed:
This way, the background image will cover the entire element, with no stretching (the image will 
keep its original proportions):

Example

  <style>body {  background-image: url('img_girl.jpg');  
  background-repeat: no-repeat;  background-attachment: fixed;   
  background-size: cover;
  }</style>
Try it Yourself »


Background Stretch
If you want the background image to stretch to fit the entire element, you 
can set the background-size property to
100% 100%: 


Try resizing the browser window, and you will see that the image will stretch, but always cover the entire element.

Example

  <style>body {  background-image: url('img_girl.jpg');  
  background-repeat: no-repeat;  background-attachment: fixed;   
  background-size: 100% 100%;
  }</style>
Try it Yourself »


Learn More CSS
From the examples above you have learned that background images can be styled by using the CSS background properties.
To learn more about CSS background properties, study our CSS Background Tutorial.


❮ Previous
Next ❯",html
26,https://www.w3schools.com/html/html_images_picture.asp,"HTML <picture> Element

❮ Previous
Next ❯


The HTML <picture> element allows 
you to display different pictures for 
different devices or screen sizes.



The HTML <picture> Element
The HTML <picture> element gives web 
developers more flexibility in 
specifying image resources.
The <picture> element contains one or 
more <source> elements, each referring 
to different images through the srcset 
attribute. This way the browser can choose the image that best 
fits the current view and/or device.
Each <source> element has a
media attribute that defines when the image is the 
most suitable.

Example
Show different images for different screen sizes:

  <picture>  <source media=""(min-width: 650px)"" srcset=""img_food.jpg"">
   
  <source media=""(min-width: 465px)"" srcset=""img_car.jpg"">  <img src=""img_girl.jpg""></picture>
Try it Yourself »


Note: Always specify an <img> element as the last child 
element of the <picture> element. The <img> element is used by browsers that do 
not support the <picture> element, or if none of the <source> tags match.


When to use the Picture Element
There are two main purposes for the <picture> element:
1. Bandwidth
If you have a small screen or device, it is not necessary to load a large 
image file. The browser will use the first <source> 
element with matching attribute values, and ignore any of the following 
elements.
2. Format Support
Some browsers or devices may not support all image formats. By using the
<picture> element, you can add images of all 
formats, and the browser will use the first format it recognizes, and ignore any 
of the following elements. 

Example
The browser will use the first image format it recognizes:

  <picture>  <source srcset=""img_avatar.png"">
    <source srcset=""img_girl.jpg"">
    <img src=""img_beatles.gif"" 
  alt=""Beatles"" style=""width:auto;""></picture>
Try it Yourself »


Note: The browser will use the first <source> element with matching attribute 
values, and ignore any following <source> elements.


HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
26,https://www.w3schools.com/html/html_images_picture.asp,"HTML <picture> Element

❮ Previous
Next ❯


The HTML <picture> element allows 
you to display different pictures for 
different devices or screen sizes.



The HTML <picture> Element
The HTML <picture> element gives web 
developers more flexibility in 
specifying image resources.
The <picture> element contains one or 
more <source> elements, each referring 
to different images through the srcset 
attribute. This way the browser can choose the image that best 
fits the current view and/or device.
Each <source> element has a
media attribute that defines when the image is the 
most suitable.

Example
Show different images for different screen sizes:

  <picture>  <source media=""(min-width: 650px)"" srcset=""img_food.jpg"">
   
  <source media=""(min-width: 465px)"" srcset=""img_car.jpg"">  <img src=""img_girl.jpg""></picture>
Try it Yourself »


Note: Always specify an <img> element as the last child 
element of the <picture> element. The <img> element is used by browsers that do 
not support the <picture> element, or if none of the <source> tags match.


When to use the Picture Element
There are two main purposes for the <picture> element:
1. Bandwidth
If you have a small screen or device, it is not necessary to load a large 
image file. The browser will use the first <source> 
element with matching attribute values, and ignore any of the following 
elements.
2. Format Support
Some browsers or devices may not support all image formats. By using the
<picture> element, you can add images of all 
formats, and the browser will use the first format it recognizes, and ignore any 
of the following elements. 

Example
The browser will use the first image format it recognizes:

  <picture>  <source srcset=""img_avatar.png"">
    <source srcset=""img_girl.jpg"">
    <img src=""img_beatles.gif"" 
  alt=""Beatles"" style=""width:auto;""></picture>
Try it Yourself »


Note: The browser will use the first <source> element with matching attribute 
values, and ignore any following <source> elements.


HTML Image Tags


Tag
Description


<img>
Defines an image


<map>
Defines an image map


<area>
Defines a clickable area inside an image map


<picture>
Defines a container for multiple image resources



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
27,https://www.w3schools.com/html/html_favicon.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


HTML Favicon

❮ Previous
Next ❯


A favicon is a small image displayed next to the page title in the browser tab.

How To Add a Favicon in HTML
You can use any image you like as your favicon. You can also create your own 
favicon on sites like https://favicon.cc.

Tip: A favicon is a small image, so it should be a simple image with high contrast.

A favicon image is displayed to the left of the page title in the browser tab, like this:

To add a favicon to your website, either save your favicon image to the root 
directory of your webserver, or create a folder in the root directory 
called images, and save your favicon image in this folder. A common name for a favicon image is ""favicon.ico"".
Next, add a <link> element to your ""index.html"" file, 
after the <title> element, like this:

Example

 <!DOCTYPE html><html><head>  <title>My Page 
  Title</title>  <link rel=""icon"" type=""image/x-icon"" href=""/images/favicon.ico""></head><body>
<h1>This is a Heading</h1><p>This is a paragraph.</p></body></html>

Now, save the ""index.html"" file and reload it in your browser. Your browser tab should now 
display your favicon image to the left of the page title.

Favicon File Format Support
The following table shows the file format support for a favicon image:


Browser
ICO
PNG
GIF
JPEG
SVG


Edge
Yes
Yes
Yes
Yes
Yes


Chrome
Yes
Yes
Yes
Yes
Yes


Firefox
Yes
Yes
Yes
Yes
Yes


Opera
Yes
Yes
Yes
Yes
Yes


Safari
Yes
Yes
Yes
Yes
Yes



Chapter Summary

Use the HTML <link> element to 
  insert a favicon


HTML Link Tag


Tag
Description


<link>
Defines the relationship between a document and an external resource



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
27,https://www.w3schools.com/html/html_favicon.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


HTML Favicon

❮ Previous
Next ❯


A favicon is a small image displayed next to the page title in the browser tab.

How To Add a Favicon in HTML
You can use any image you like as your favicon. You can also create your own 
favicon on sites like https://favicon.cc.

Tip: A favicon is a small image, so it should be a simple image with high contrast.

A favicon image is displayed to the left of the page title in the browser tab, like this:

To add a favicon to your website, either save your favicon image to the root 
directory of your webserver, or create a folder in the root directory 
called images, and save your favicon image in this folder. A common name for a favicon image is ""favicon.ico"".
Next, add a <link> element to your ""index.html"" file, 
after the <title> element, like this:

Example

 <!DOCTYPE html><html><head>  <title>My Page 
  Title</title>  <link rel=""icon"" type=""image/x-icon"" href=""/images/favicon.ico""></head><body>
<h1>This is a Heading</h1><p>This is a paragraph.</p></body></html>

Now, save the ""index.html"" file and reload it in your browser. Your browser tab should now 
display your favicon image to the left of the page title.

Favicon File Format Support
The following table shows the file format support for a favicon image:


Browser
ICO
PNG
GIF
JPEG
SVG


Edge
Yes
Yes
Yes
Yes
Yes


Chrome
Yes
Yes
Yes
Yes
Yes


Firefox
Yes
Yes
Yes
Yes
Yes


Opera
Yes
Yes
Yes
Yes
Yes


Safari
Yes
Yes
Yes
Yes
Yes



Chapter Summary

Use the HTML <link> element to 
  insert a favicon


HTML Link Tag


Tag
Description


<link>
Defines the relationship between a document and an external resource



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯",html
28,https://www.w3schools.com/html/html_tables.asp,"HTML Tables

❮ Previous
Next ❯


HTML tables allow web developers to arrange data into rows and 
columns.


Example



Company
Contact
Country


Alfreds Futterkiste
Maria Anders
Germany


Centro comercial Moctezuma
Francisco Chang
Mexico


Ernst Handel
Roland Mendel
Austria


Island Trading
Helen Bennett
UK


Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada


Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy



Try it Yourself »


Define an HTML Table
A table in HTML consists of table cells inside rows and columns

Example
A simple HTML table:

<table> 
<tr>    <th>Company</th>
    <th>Contact</th>     <th>Country</th>
 
</tr> 
<tr>    <td>Alfreds Futterkiste</td>
    <td>Maria 
  Anders</td>     <td>Germany</td>
 
</tr>  <tr>    <td>Centro 
  comercial Moctezuma</td>
    <td>Francisco 
  Chang</td>     <td>Mexico</td>
  </tr></table>

Try it Yourself »


Table Cells
Each table cell is defined by a
<td> and a </td> tag.

td 
stands for table data.

Everything between <td> and </td> are the content of the table cell.

Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr></table>

Try it Yourself »


Note: table data elements are the data containers of the table.They can contain 
all sorts of HTML elements; text, images, lists, other tables, etc.








Table Rows
Each table row starts with a 
<tr> and end with a </tr> tag.

tr 
stands for table row.


Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

You can have as many rows as you like in a table, just make sure that the number of cells are the same in each row.

Note: There are times where a row can have less or more cells than another. You will learn about that in a later chapter.


Table Headers
Sometimes you want your cells to be headers, in those cases use the
<th> tag instead of the
<td> tag:

Example
Let the first row be table headers:

<table> 
<tr>    <th>Person 1</th>
    <th>Person 2</th>     <th>Person 
  3</th>
 
</tr> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

By default, the text in <th> elements 
are bold and centered, but you can change that with CSS. 

HTML Exercises

Test Yourself With Exercises

Exercise:
Add a table row with two table headers.
The two table headers should have the value ""Name"" and ""Age"".

<table>

  

    

    

  

  <tr>

    <td>Jill Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise



HTML Table Tags


Tag
Description


<table>
Defines a table


<th>
Defines a header cell in a table


<tr>
Defines a row in a table


<td>
Defines a cell in a table


<caption>
Defines a table caption


<colgroup>
Specifies a group of one or more columns in a table for formatting


<col>
Specifies column properties for each column within a <colgroup> element


<thead>
Groups the header content in a table


<tbody>
Groups the body content in a table


<tfoot>
Groups the footer content in a table



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯


#moreAboutSubject,#moreAboutSubject2 {
  display:none;
  color:#3c763d;
  padding-top:10px;
  padding-bottom:10px;
  background-color:#dff0d8;
  border:1px solid #d6e9c6;
  font-size:14px;
}
#moreAboutSubject {
  color:#444444;
  background-color:#f1f1f1;
  border:1px solid #e5e5e5;
}


LEARN MORE

Styling Tables
Filter Table
Sort Table
Responsive Table
Zebra Striped Table",html
28,https://www.w3schools.com/html/html_tables.asp,"HTML Tables

❮ Previous
Next ❯


HTML tables allow web developers to arrange data into rows and 
columns.


Example



Company
Contact
Country


Alfreds Futterkiste
Maria Anders
Germany


Centro comercial Moctezuma
Francisco Chang
Mexico


Ernst Handel
Roland Mendel
Austria


Island Trading
Helen Bennett
UK


Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada


Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy



Try it Yourself »


Define an HTML Table
A table in HTML consists of table cells inside rows and columns

Example
A simple HTML table:

<table> 
<tr>    <th>Company</th>
    <th>Contact</th>     <th>Country</th>
 
</tr> 
<tr>    <td>Alfreds Futterkiste</td>
    <td>Maria 
  Anders</td>     <td>Germany</td>
 
</tr>  <tr>    <td>Centro 
  comercial Moctezuma</td>
    <td>Francisco 
  Chang</td>     <td>Mexico</td>
  </tr></table>

Try it Yourself »


Table Cells
Each table cell is defined by a
<td> and a </td> tag.

td 
stands for table data.

Everything between <td> and </td> are the content of the table cell.

Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr></table>

Try it Yourself »


Note: table data elements are the data containers of the table.They can contain 
all sorts of HTML elements; text, images, lists, other tables, etc.








Table Rows
Each table row starts with a 
<tr> and end with a </tr> tag.

tr 
stands for table row.


Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

You can have as many rows as you like in a table, just make sure that the number of cells are the same in each row.

Note: There are times where a row can have less or more cells than another. You will learn about that in a later chapter.


Table Headers
Sometimes you want your cells to be headers, in those cases use the
<th> tag instead of the
<td> tag:

Example
Let the first row be table headers:

<table> 
<tr>    <th>Person 1</th>
    <th>Person 2</th>     <th>Person 
  3</th>
 
</tr> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

By default, the text in <th> elements 
are bold and centered, but you can change that with CSS. 

HTML Exercises

Test Yourself With Exercises

Exercise:
Add a table row with two table headers.
The two table headers should have the value ""Name"" and ""Age"".

<table>

  

    

    

  

  <tr>

    <td>Jill Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise



HTML Table Tags


Tag
Description


<table>
Defines a table


<th>
Defines a header cell in a table


<tr>
Defines a row in a table


<td>
Defines a cell in a table


<caption>
Defines a table caption


<colgroup>
Specifies a group of one or more columns in a table for formatting


<col>
Specifies column properties for each column within a <colgroup> element


<thead>
Groups the header content in a table


<tbody>
Groups the body content in a table


<tfoot>
Groups the footer content in a table



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯


#moreAboutSubject,#moreAboutSubject2 {
  display:none;
  color:#3c763d;
  padding-top:10px;
  padding-bottom:10px;
  background-color:#dff0d8;
  border:1px solid #d6e9c6;
  font-size:14px;
}
#moreAboutSubject {
  color:#444444;
  background-color:#f1f1f1;
  border:1px solid #e5e5e5;
}


LEARN MORE

Styling Tables
Filter Table
Sort Table
Responsive Table
Zebra Striped Table",html
29,https://www.w3schools.com/html/html_tables.asp,"HTML Tables

❮ Previous
Next ❯


HTML tables allow web developers to arrange data into rows and 
columns.


Example



Company
Contact
Country


Alfreds Futterkiste
Maria Anders
Germany


Centro comercial Moctezuma
Francisco Chang
Mexico


Ernst Handel
Roland Mendel
Austria


Island Trading
Helen Bennett
UK


Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada


Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy



Try it Yourself »


Define an HTML Table
A table in HTML consists of table cells inside rows and columns

Example
A simple HTML table:

<table> 
<tr>    <th>Company</th>
    <th>Contact</th>     <th>Country</th>
 
</tr> 
<tr>    <td>Alfreds Futterkiste</td>
    <td>Maria 
  Anders</td>     <td>Germany</td>
 
</tr>  <tr>    <td>Centro 
  comercial Moctezuma</td>
    <td>Francisco 
  Chang</td>     <td>Mexico</td>
  </tr></table>

Try it Yourself »


Table Cells
Each table cell is defined by a
<td> and a </td> tag.

td 
stands for table data.

Everything between <td> and </td> are the content of the table cell.

Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr></table>

Try it Yourself »


Note: table data elements are the data containers of the table.They can contain 
all sorts of HTML elements; text, images, lists, other tables, etc.








Table Rows
Each table row starts with a 
<tr> and end with a </tr> tag.

tr 
stands for table row.


Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

You can have as many rows as you like in a table, just make sure that the number of cells are the same in each row.

Note: There are times where a row can have less or more cells than another. You will learn about that in a later chapter.


Table Headers
Sometimes you want your cells to be headers, in those cases use the
<th> tag instead of the
<td> tag:

Example
Let the first row be table headers:

<table> 
<tr>    <th>Person 1</th>
    <th>Person 2</th>     <th>Person 
  3</th>
 
</tr> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

By default, the text in <th> elements 
are bold and centered, but you can change that with CSS. 

HTML Exercises

Test Yourself With Exercises

Exercise:
Add a table row with two table headers.
The two table headers should have the value ""Name"" and ""Age"".

<table>

  

    

    

  

  <tr>

    <td>Jill Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise



HTML Table Tags


Tag
Description


<table>
Defines a table


<th>
Defines a header cell in a table


<tr>
Defines a row in a table


<td>
Defines a cell in a table


<caption>
Defines a table caption


<colgroup>
Specifies a group of one or more columns in a table for formatting


<col>
Specifies column properties for each column within a <colgroup> element


<thead>
Groups the header content in a table


<tbody>
Groups the body content in a table


<tfoot>
Groups the footer content in a table



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯


#moreAboutSubject,#moreAboutSubject2 {
  display:none;
  color:#3c763d;
  padding-top:10px;
  padding-bottom:10px;
  background-color:#dff0d8;
  border:1px solid #d6e9c6;
  font-size:14px;
}
#moreAboutSubject {
  color:#444444;
  background-color:#f1f1f1;
  border:1px solid #e5e5e5;
}


LEARN MORE

Styling Tables
Filter Table
Sort Table
Responsive Table
Zebra Striped Table",html
29,https://www.w3schools.com/html/html_tables.asp,"HTML Tables

❮ Previous
Next ❯


HTML tables allow web developers to arrange data into rows and 
columns.


Example



Company
Contact
Country


Alfreds Futterkiste
Maria Anders
Germany


Centro comercial Moctezuma
Francisco Chang
Mexico


Ernst Handel
Roland Mendel
Austria


Island Trading
Helen Bennett
UK


Laughing Bacchus Winecellars
Yoshi Tannamuri
Canada


Magazzini Alimentari Riuniti
Giovanni Rovelli
Italy



Try it Yourself »


Define an HTML Table
A table in HTML consists of table cells inside rows and columns

Example
A simple HTML table:

<table> 
<tr>    <th>Company</th>
    <th>Contact</th>     <th>Country</th>
 
</tr> 
<tr>    <td>Alfreds Futterkiste</td>
    <td>Maria 
  Anders</td>     <td>Germany</td>
 
</tr>  <tr>    <td>Centro 
  comercial Moctezuma</td>
    <td>Francisco 
  Chang</td>     <td>Mexico</td>
  </tr></table>

Try it Yourself »


Table Cells
Each table cell is defined by a
<td> and a </td> tag.

td 
stands for table data.

Everything between <td> and </td> are the content of the table cell.

Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr></table>

Try it Yourself »


Note: table data elements are the data containers of the table.They can contain 
all sorts of HTML elements; text, images, lists, other tables, etc.








Table Rows
Each table row starts with a 
<tr> and end with a </tr> tag.

tr 
stands for table row.


Example

<table> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

You can have as many rows as you like in a table, just make sure that the number of cells are the same in each row.

Note: There are times where a row can have less or more cells than another. You will learn about that in a later chapter.


Table Headers
Sometimes you want your cells to be headers, in those cases use the
<th> tag instead of the
<td> tag:

Example
Let the first row be table headers:

<table> 
<tr>    <th>Person 1</th>
    <th>Person 2</th>     <th>Person 
  3</th>
 
</tr> 
<tr>    <td>Emil</td>
    <td>Tobias</td>     <td>Linus</td>
 
</tr> 
<tr>    <td>16</td>
    <td>14</td>     <td>10</td>
 
</tr></table>

Try it Yourself »

By default, the text in <th> elements 
are bold and centered, but you can change that with CSS. 

HTML Exercises

Test Yourself With Exercises

Exercise:
Add a table row with two table headers.
The two table headers should have the value ""Name"" and ""Age"".

<table>

  

    

    

  

  <tr>

    <td>Jill Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise



HTML Table Tags


Tag
Description


<table>
Defines a table


<th>
Defines a header cell in a table


<tr>
Defines a row in a table


<td>
Defines a cell in a table


<caption>
Defines a table caption


<colgroup>
Specifies a group of one or more columns in a table for formatting


<col>
Specifies column properties for each column within a <colgroup> element


<thead>
Groups the header content in a table


<tbody>
Groups the body content in a table


<tfoot>
Groups the footer content in a table



For a complete list of all available HTML tags, visit our HTML Tag Reference.



❮ Previous
Next ❯


#moreAboutSubject,#moreAboutSubject2 {
  display:none;
  color:#3c763d;
  padding-top:10px;
  padding-bottom:10px;
  background-color:#dff0d8;
  border:1px solid #d6e9c6;
  font-size:14px;
}
#moreAboutSubject {
  color:#444444;
  background-color:#f1f1f1;
  border:1px solid #e5e5e5;
}


LEARN MORE

Styling Tables
Filter Table
Sort Table
Responsive Table
Zebra Striped Table",html
30,https://www.w3schools.com/html/html_table_borders.asp,"HTML Table Borders

❮ Previous
Next ❯


HTML tables can have borders of different styles and shapes.


How To Add a Border
When you add a border to a table, you also add borders around each table cell:


 
 
 


 
 
 


 
 
 


To add a border, use the CSS border property on 
table, th, and 
td elements:

Example

table, th, td
{
  border: 1px solid black;
}
Try it Yourself »


Collapsed Table Borders
To avoid having double borders like in the example above, set the CSS border-collapse 
property to collapse.
This will make the borders collapse into a single border:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid black;
   
 border-collapse: collapse;}
Try it Yourself »








Style Table Borders
If you set a background color of each cell,
and give the border a white color (the same as the document background),
you get the impression of an invisible border:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid white;
   
 border-collapse: collapse;}th, td {  background-color: #96D4D4;
  }
Try it Yourself »


Round Table Borders
With the border-radius property, the borders get rounded corners:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid 
  black;
   
 border-radius: 10px;}
Try it Yourself »


Skip the border around the table by leaving out table from the css selector:


 
 
 


 
 
 


 
 
 



Example

 th, td {  border: 1px solid 
  black;
   
 border-radius: 10px;}
Try it Yourself »


Dotted Table Borders
With the border-style property, you can set the appereance of the border.


 
 
 


 
 
 


 
 
 


The following values are allowed:

dotted     
dashed     
solid     
double     
groove      
ridge      
inset      
outset      
none     
hidden     


Example

  th, td { 
 border-style: dotted;}
Try it Yourself »


Border Color
With the border-color property, you can set the color of the border.


 
 
 


 
 
 


 
 
 



Example

  th, td { 
 border-color: #96D4D4;}
Try it Yourself »




❮ Previous
Next ❯",html
30,https://www.w3schools.com/html/html_table_borders.asp,"HTML Table Borders

❮ Previous
Next ❯


HTML tables can have borders of different styles and shapes.


How To Add a Border
When you add a border to a table, you also add borders around each table cell:


 
 
 


 
 
 


 
 
 


To add a border, use the CSS border property on 
table, th, and 
td elements:

Example

table, th, td
{
  border: 1px solid black;
}
Try it Yourself »


Collapsed Table Borders
To avoid having double borders like in the example above, set the CSS border-collapse 
property to collapse.
This will make the borders collapse into a single border:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid black;
   
 border-collapse: collapse;}
Try it Yourself »








Style Table Borders
If you set a background color of each cell,
and give the border a white color (the same as the document background),
you get the impression of an invisible border:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid white;
   
 border-collapse: collapse;}th, td {  background-color: #96D4D4;
  }
Try it Yourself »


Round Table Borders
With the border-radius property, the borders get rounded corners:


 
 
 


 
 
 


 
 
 



Example

 table, th, td {  border: 1px solid 
  black;
   
 border-radius: 10px;}
Try it Yourself »


Skip the border around the table by leaving out table from the css selector:


 
 
 


 
 
 


 
 
 



Example

 th, td {  border: 1px solid 
  black;
   
 border-radius: 10px;}
Try it Yourself »


Dotted Table Borders
With the border-style property, you can set the appereance of the border.


 
 
 


 
 
 


 
 
 


The following values are allowed:

dotted     
dashed     
solid     
double     
groove      
ridge      
inset      
outset      
none     
hidden     


Example

  th, td { 
 border-style: dotted;}
Try it Yourself »


Border Color
With the border-color property, you can set the color of the border.


 
 
 


 
 
 


 
 
 



Example

  th, td { 
 border-color: #96D4D4;}
Try it Yourself »




❮ Previous
Next ❯",html
31,https://www.w3schools.com/html/html_table_sizes.asp,"HTML Table Sizes

❮ Previous
Next ❯



HTML tables can have different sizes for each column, row or 
the entire table.




 
 
 


 
 
 


 
 
 




 
 
 


 
 
 


 
 
 




 
 
 


 
 
 




Use the style attribute with the
width or height
properties to specify the size of a table, row or column.

HTML Table Width
To set the width of a table, add the style 
attribute to the <table> element:

Example
Set the width of the table to 100%:

<table style=""width:100%""> 
<tr>    <th>Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr>    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »


Note: Using a percentage as the size unit for a width means 
how wide will this element be compared to its parent element, which in this case 
is the <body> 
element.


HTML Table Column Width


 
 
 


 
 
 


 
 
 


To set the size of a specific column, add the style 
attribute on a <th> or
<td> element:

Example
Set the width of the first column to 70%:

<table style=""width:100%""> 
<tr>    <th style=""width:70%"">Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr>    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »








HTML Table Row Height


 
 
 


 
 
 


 
 
 


To set the height of a specific row, add the style 
attribute on a table row element:

Example
Set the height of the second row to 200 pixels:

<table style=""width:100%""> 
<tr>    <th>Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr style=""height:200px"">    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use CSS styles to make the table 300 pixels wide.


<table >

  <tr>

    <th>First Name</th>

    <th>Last Name</th>

    <th>Points</th>

  </tr>

  <tr>

    <td>Jill</td>

    <td>Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise






❮ Previous
Next ❯",html
31,https://www.w3schools.com/html/html_table_sizes.asp,"HTML Table Sizes

❮ Previous
Next ❯



HTML tables can have different sizes for each column, row or 
the entire table.




 
 
 


 
 
 


 
 
 




 
 
 


 
 
 


 
 
 




 
 
 


 
 
 




Use the style attribute with the
width or height
properties to specify the size of a table, row or column.

HTML Table Width
To set the width of a table, add the style 
attribute to the <table> element:

Example
Set the width of the table to 100%:

<table style=""width:100%""> 
<tr>    <th>Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr>    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »


Note: Using a percentage as the size unit for a width means 
how wide will this element be compared to its parent element, which in this case 
is the <body> 
element.


HTML Table Column Width


 
 
 


 
 
 


 
 
 


To set the size of a specific column, add the style 
attribute on a <th> or
<td> element:

Example
Set the width of the first column to 70%:

<table style=""width:100%""> 
<tr>    <th style=""width:70%"">Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr>    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »








HTML Table Row Height


 
 
 


 
 
 


 
 
 


To set the height of a specific row, add the style 
attribute on a table row element:

Example
Set the height of the second row to 200 pixels:

<table style=""width:100%""> 
<tr>    <th>Firstname</th>
    <th>Lastname</th>     <th>Age</th>
 
</tr> 
<tr style=""height:200px"">    <td>Jill</td>
    <td>Smith</td>     <td>50</td>
 
</tr>  <tr>    <td>Eve</td>
    <td>Jackson</td>     <td>94</td>
  </tr></table>

Try it Yourself »


HTML Exercises

Test Yourself With Exercises

Exercise:
Use CSS styles to make the table 300 pixels wide.


<table >

  <tr>

    <th>First Name</th>

    <th>Last Name</th>

    <th>Points</th>

  </tr>

  <tr>

    <td>Jill</td>

    <td>Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise






❮ Previous
Next ❯",html
32,https://www.w3schools.com/html/html_table_headers.asp,"HTML Table Headers

❮ Previous
Next ❯


HTML tables can have headers for each column or row, or for many columns/rows.




EMIL
TOBIAS
LINUS


 
 
 


 
 
 


 
 
 


 
 
 


 
 
 




8:00
 
 


9:00
 
 


10:00
 
 


11:00
 
 


12:00
 
 


13:00
 
 





MON
TUE
WED
THU
FRI


8:00
 
 
 
 
 


9:00
 
 
 
 
 


10:00
 
 
 
 
 


11:00
 
 
 
 
 


12:00
 
 
 
 
 




DECEMBER


 
 
 


 
 
 


 
 
 


 
 
 


 
 
 




HTML Table Headers
Table headers are defined with th elements,
each th element represents a table cell.

Example

  <table>  <tr>    <th>Firstname</th>    
  <th>Lastname</th>    <th>Age</th>  </tr>  
  <tr>    <td>Jill</td>    <td>Smith</td>    
  <td>50</td>  </tr>  <tr>    <td>Eve</td>    
  <td>Jackson</td>    <td>94</td>  </tr></table>
Try it Yourself »


Vertical Table Headers
To use the first column as table headers, define the first cell in each row as a th element:

Example

  <table>  <tr>    <th>Firstname</th>    
  <td>Jill</td>    <td>Eve</td>  </tr>  
  <tr>    
  <th>Lastname</th>    <td>Smith</td>    
  <td>Jackson</td>  </tr>  <tr>    <th>Age</th>    <td>94</td>    
  <td>50</td>  </tr></table>
Try it Yourself »








Align Table Headers
By default, table headers are bold and centered:


Firstname
Lastname
Age


Jill
Smith
50


Eve
Jackson
94


To left-align the table headers, use the CSS text-align property:

Example

th {  text-align: left;
}

Try it Yourself »


Header for Multiple Columns
You can have a header that spans over two or more columns.


Name
Age


Jill
Smith
50


Eve
Jackson
94


To do this, use the colspan attribute on the 
<th> element:

Example

  <table>  <tr>    <th colspan=""2"">Name</th>    <th>Age</th>  </tr>  
  <tr>    <td>Jill</td>    <td>Smith</td>    
  <td>50</td>  </tr>  <tr>    <td>Eve</td>    
  <td>Jackson</td>    <td>94</td>  </tr></table>
Try it Yourself »


You will learn more about colspan and rowspan in the Table colspan & rowspan chapter.


Table Caption
You can add a caption that serves as a heading for the entire table.

Monthly savings

Month
Savings


January
$100


February
$50


To add a caption to a table, use the <caption> tag:

Example

 <table style=""width:100%"">  <caption>Monthly savings</caption>  <tr>    <th>Month</th>    <th>Savings</th>  </tr>  <tr>    <td>January</td>    <td>$100</td>  </tr>  <tr>    <td>February</td>    <td>$50</td>  </tr>
 </table>
Try it Yourself »


Note: The <caption> tag 
should be inserted immediately after the <table> tag.


HTML Exercises

Test Yourself With Exercises

Exercise:
Add a table caption that says ""Names"".


<table>

  

  <tr>

    <th>First Name</th>

    <th>Last Name</th>

    <th>Points</th>

  </tr>

  <tr>

    <td>Jill</td>

    <td>Smith</td>

    <td>50</td>

  </tr>

</table>


Submit Answer »
Start the Exercise





❮ Previous
Next ❯",html
33,https://www.w3schools.com/js/default.asp,"JavaScript Tutorial

❮ Home
Next ❯


JavaScript is the world's most popular programming language.
JavaScript is the programming language of the Web.
JavaScript is easy to learn.
This tutorial will teach you JavaScript from basic to advanced.
Start learning JavaScript now »

Examples in Each Chapter
With our ""Try it Yourself"" editor, you can edit the source code and view 
the result.

Example

My First JavaScript

Click me to display Date and Time



Try it Yourself »



Use the Menu
We recommend reading this tutorial, in the sequence listed in the menu.
If you have a large screen, the menu will always be present on the left.
If you have a small screen, open the menu by clicking the top menu sign ☰.

Learn by Examples
Examples are better than 1000 words. Examples are often easier to understand 
than text explanations.
This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.

If you try all the examples, you will learn a lot about JavaScript, in a very short time!
JavaScript Examples »


Why Study JavaScript?
JavaScript is one of the 3 languages all web developers 
must 
learn:
   1. HTML to define the content of web pages
   2. CSS to specify the layout of web pages
   3. JavaScript to program the behavior of web pages 

This tutorial covers every version of JavaScript:

The Original JavaScript ES1 ES2 ES3 (1997-1999)
The First Main Revision ES5 (2009)
The Second Revision ES6 (2015)
The Yearly Additions (2016, 2017, 2018)









Learning Speed
In this tutorial, the learning speed is your choice.
Everything is up to you.
If you are struggling, take a break, or re-read the material.
Always make sure you understand all the ""Try-it-Yourself"" 
examples.
The only way to become a clever programmer is to:
Practice. Practice. Practice. Code. Code. Code !


Test Yourself With Exercises

Exercise:
Create a variable called carName and assign the value Volvo to it.


var  = """";



Submit Answer »
Start the Exercise



Commonly Asked Questions

How do I get JavaScript?
Where can I download JavaScript?
Is JavaScript Free?


You don't have to get or download JavaScript.
JavaScript is already running in your browser on your computer,
on your tablet, and on your smart-phone.
JavaScript is free to use for everyone.


JavaScript References
W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.
The reference contains examples for all properties, methods and events, and 
is continuously updated according to the latest web standards.
Complete JavaScript Reference »

JavaScript Quiz Test
Test your JavaScript skills at W3Schools!
Start JavaScript Quiz!


  

#w3_cert_badge {
  position: absolute;
  right: 5%;
  width: 220px;
  transform: rotate(10deg);
  bottom: -20%;
}

#w3_cert_arrow {
  position: absolute;
  right: 220px;
  width: 220px;
  transform: rotate(10deg);
  bottom: 0;
  z-index: 1;
}

#getdiploma {
  position: relative;
  padding: 0 60px 50px 60px;
  margin-bottom: 125px;
  border-radius: 16px;
  background-color: #282A35;
  color: #FFC0C7;
  font-family: 'Source Sans Pro', sans-serif;
}

#getdiploma h2 {
  font-size:50px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma p {
  font-size: 42px;
  margin-top: 1em;
  margin-bottom: 1em;
  font-family: 'Source Sans Pro', sans-serif
}

#getdiploma a {
  border-radius: 50px;
  mxargin-top: 50px;
  font-size: 18px;
  background-color: #04AA6D;
  padding: 17px 55px
}

#getdiploma a:hover,
#getdiploma a:active {
  background-color: #059862 !important;
}


@media screen and (max-width: 1442px) {
  #w3_cert_arrow {
    right: 212px;
    bottom: -15px;
  }
}


@media screen and (max-width: 1202px) {
  #w3_cert_arrow {
    display: none;
  }
}

@media screen and (max-width: 992px) {
  #w3_cert_arrow {
    display: block;
  }
}


@media screen and (max-width: 800px) {
  #w3_cert_arrow {
    display: none;
  }
  #getdiploma h2 {
    font-size: 44px;
  }
  #getdiploma p {
    font-size: 30px;
  }

  #getdiploma a {
    width: 100%;
  }
  #w3_cert_badge {
    top: -16px;
    right: -8px;
    width: 100px;
  }
  #getdiploma  {
    margin-bottom: 55px;
  }
}


Kickstart your career
Get certified by completing the  course

var foldername;
function getCourseFolder() {
  var pathname = window.location.pathname;
  if (pathname.substr(0,1) == ""/"") {pathname = pathname.substr(1);}
  pos = pathname.indexOf(""/"");
  foldername = pathname.substr(0, pos);
  foldername = foldername.toUpperCase();
  if (foldername == ""JS"") foldername = ""JavaScript"";
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") {
    document.getElementById(""hey"").innerText = ""a"";
  }
  if (foldername == ""QUIZTEST"" || foldername == ""EXERCISES"") foldername = """";
  if (foldername == ""CS"") foldername = ""C#"";
  if (foldername == ""CYBERSECURITY"") foldername = ""Cyber Security"";  
  if (foldername == ""CPP"") foldername = ""C++"";
  document.getElementById(""coursetopic"").innerText = foldername;
}
getCourseFolder();

Get certified




.cls-1{fill:#04aa6b;}.cls-2{font-size:23px;}.cls-2,.cls-3,.cls-4{fill:#fff;}.cls-2,.cls-3{font-family:RobotoMono-Medium, Roboto Mono;font-weight:500;}.cls-3{font-size:20.08px;}w3schools CERTIFIED  .  2022



❮ Home
Next ❯",js
34,https://www.w3schools.com/js/js_intro.asp,"JavaScript Introduction

❮ Previous
Next ❯


This page contains some examples of what JavaScript can do.

JavaScript Can Change HTML Content
One of many JavaScript HTML methods is getElementById().
The example below ""finds"" an HTML element (with id=""demo""), 
and changes the element content (innerHTML) to ""Hello JavaScript"":

Example

 document.getElementById(""demo"").innerHTML = ""Hello JavaScript"";
Try it Yourself »


JavaScript accepts both double and single quotes:


Example

 document.getElementById('demo').innerHTML = 'Hello JavaScript';
Try it Yourself »


JavaScript Can Change HTML Attribute Values
In this example JavaScript changes the value of the src (source) attribute of an <img> tag:

The Light Bulb

Turn on the light

Turn off the light


Try it Yourself »









JavaScript Can Change HTML Styles (CSS)
Changing the style of an HTML element, is a variant of changing an HTML 
attribute:

Example

 document.getElementById(""demo"").style.fontSize = ""35px"";
Try it Yourself »


JavaScript Can Hide HTML Elements
Hiding HTML elements can be done by changing the display style:

Example

 document.getElementById(""demo"").style.display = ""none"";
Try it Yourself »


JavaScript Can Show HTML Elements
Showing hidden HTML elements can also be done by changing the display style:

Example

 document.getElementById(""demo"").style.display = ""block"";
Try it Yourself »


Did You Know?
JavaScript and Java are completely different languages, both in concept 
and design.
JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard  
in 1997.
ECMA-262 is the official name of the standard. ECMAScript is the official name of the language.

JavaScript Versions »



❮ Previous
Next ❯",js
35,https://www.w3schools.com/js/js_whereto.asp,"JavaScript Where To

❮ Previous
Next ❯


The <script> Tag
In HTML, JavaScript code is inserted between <script> and </script> tags.

Example

<script>
document.getElementById(""demo"").innerHTML = ""My First JavaScript"";
</script>


Try it Yourself »



Old JavaScript examples may use a type attribute: <script type=""text/javascript"">.
The type attribute is not required. JavaScript is the default scripting language in HTML.


JavaScript Functions and Events
A JavaScript function is a block of JavaScript code, that can be executed when ""called"" for.
For example, a function can be called when an event occurs, like when the user clicks a button.

You will learn much more about functions and events in later chapters.


JavaScript in <head> or <body>
You can place any number of scripts in an HTML document.
Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.

JavaScript in <head>
In this example, a JavaScript function is placed in the <head> section 
of an HTML page.
The function is invoked (called) when a button is clicked:

Example

<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  document.getElementById(""demo"").innerHTML = ""Paragraph changed."";
}
</script>
</head><body>
<h2>Demo JavaScript in Head</h2>

<p id=""demo"">A Paragraph</p><button type=""button"" onclick=""myFunction()"">Try 
it</button>
</body>
</html>

Try it Yourself »








JavaScript in <body>
In this example, a JavaScript function is placed in the <body> section of an HTML page.
The function is invoked (called) when a button is clicked:

Example

<!DOCTYPE html>
<html>
<body>
<h2>Demo JavaScript in Body</h2>

  <p id=""demo"">A Paragraph</p>

  <button type=""button"" onclick=""myFunction()"">Try 
it</button>
<script>
function myFunction() {
    document.getElementById(""demo"").innerHTML = ""Paragraph changed."";
}
</script>
</body>
</html>

Try it Yourself »


Placing scripts at the bottom of the <body> element improves the display 
speed, because script interpretation slows down the display.


External JavaScript
Scripts can also be placed in external files:

External file: myScript.js

function myFunction() {
  document.getElementById(""demo"").innerHTML = ""Paragraph changed."";
}


External scripts are practical when the same code is used in many different web pages. 
JavaScript files have the file extension .js.
To use an external script, put the name of the script file in the src (source) attribute of 
a <script> tag:

Example

<script src=""myScript.js""></script>
Try it Yourself »

You can place an external script reference in <head> or <body> as you like.
The script will behave as if it was located exactly where the <script> tag is located.

External scripts cannot contain <script> tags.


External JavaScript Advantages
Placing scripts in external files has some advantages:

It separates HTML and code
It makes HTML and JavaScript easier to read and maintain
Cached JavaScript files can speed up page loads

To add several script files to one page  - use several script tags:

Example

<script src=""myScript1.js""></script>
<script src=""myScript2.js""></script>



External References
An external script can be referenced in 3 different ways:

With a full URL (a full web address)
With a file path (like /js/)
Without any path

This example uses a full URL to link to myScript.js: 

Example

<script src=""https://www.w3schools.com/js/myScript.js""></script>

Try it Yourself »

This example uses a file path to link to myScript.js:

Example

<script src=""/js/myScript.js""></script>

Try it Yourself »

This example uses no path to link to myScript.js:

Example

<script src=""myScript.js""></script>

Try it Yourself »


You can read more about file paths in the chapter HTML 
File Paths.



❮ Previous
Next ❯",js
36,https://www.w3schools.com/js/js_output.asp,"JavaScript Output

❮ Previous
Next ❯


JavaScript Display Possibilities
JavaScript can ""display"" data in different ways:

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().


Using innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method. 
The id attribute defines the HTML element. The innerHTML  property defines the HTML content:

Example

 <!DOCTYPE html><html>
<body>

<h1>My First Web Page</h1>
 <p>My First Paragraph</p>
<p id=""demo""></p>

<script>
 document.getElementById(""demo"").innerHTML = 5 + 6;
    </script>

</body>
</html>

Try it Yourself »


Changing the innerHTML property of an HTML element
is a common way to display data in HTML.


Using document.write()
For testing purposes, it is convenient to use document.write():

Example

 <!DOCTYPE html><html>
<body><h1>My First Web Page</h1>
 <p>My first paragraph.</p>
<script>document.write(5 + 6);</script>

</body>
</html>

Try it Yourself »


Using document.write() after an HTML document is loaded, will delete all existing HTML:


Example

<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1>
 <p>My first paragraph.</p>
<button type=""button"" onclick=""document.write(5 + 6)"">Try it</button>
</body>
</html>

Try it Yourself »


The document.write() method should only be used for testing.








Using window.alert()
You can use an alert box to display data:

Example

<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1><p>My first paragraph.</p>

<script>window.alert(5 + 6);
</script>

</body>
</html>

Try it Yourself »

You can skip the window keyword.
In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object.
This also means that specifying the window keyword is optional:

Example

<!DOCTYPE html>
<html>
<body>
<h1>My First Web Page</h1><p>My first paragraph.</p>

<script>alert(5 + 6);
</script>

</body>
</html>

Try it Yourself »


Using console.log()
For debugging purposes, you can call the console.log() method
in the browser to display data.

You will learn more about debugging in a later chapter.


Example

<!DOCTYPE html>
<html>
<body>

<script>
console.log(5 + 6);
</script>

</body>
</html>

Try it Yourself »


JavaScript Print
JavaScript does not have any print object or print methods.
You cannot access output devices from JavaScript.
The only exception is that you can call the window.print() method in
the browser to print the content of the current window.

Example

<!DOCTYPE html>
<html><body>
<button onclick=""window.print()"">Print this page</button>
</body>
</html>

Try it Yourself »



❮ Previous
Next ❯",js
37,https://www.w3schools.com/js/js_statements.asp,"JavaScript Statements

❮ Previous
Next ❯



Example

let x, y, z;    // Statement 1
x = 5;          // Statement 2
y = 6;          // Statement 3
z = x + y;      //  Statement 4

Try it Yourself »


JavaScript Programs
A computer program is a list of ""instructions"" to be 
""executed"" by a computer.
In a programming language, these programming instructions are called statements.
A JavaScript program is a list of programming statements.

In HTML, JavaScript programs are executed by the web browser.


JavaScript Statements
JavaScript statements are composed of:
Values, Operators, Expressions, Keywords, 
and Comments.
This statement tells the browser to write ""Hello Dolly."" 
inside an HTML element with id=""demo"":

Example

document.getElementById(""demo"").innerHTML = ""Hello Dolly."";
Try it Yourself »

Most JavaScript 
programs contain many JavaScript statements.
The statements are executed, one by one, in the 
same order as they are written.

JavaScript programs (and JavaScript statements) are often called JavaScript code.



Semicolons ;
Semicolons separate JavaScript statements.
Add a semicolon at the end of each executable statement: 

Examples

let a, b, c;  // Declare 3 variables
a = 5;        // Assign the value 5 to a
b = 6;        // Assign the 
  value 6 to b
c = a + b;    // Assign the sum of a and b to c

Try it Yourself »


When separated by semicolons, multiple statements on one line are allowed:


a = 5; b = 6; c = a + b;

Try it Yourself »


On the web, you might see examples without semicolons. 
Ending statements with semicolon is not required, but highly recommended.








JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.
The following lines are equivalent:


let person = ""Hege"";
let person=""Hege"";


A good practice is to put spaces around operators ( = + - * / ):


let x = y + z;


JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 
characters.
If a JavaScript statement does not fit on one line, the best place to break 
it is after an operator:

Example

document.getElementById(""demo"").innerHTML =""Hello Dolly!"";
Try it Yourself »


JavaScript Code Blocks
JavaScript statements can be grouped together in code blocks, inside curly 
brackets {...}.
The purpose of code blocks is to define statements to be executed together.
One place you will find statements grouped together in blocks, is in 
JavaScript functions:

Example

 function myFunction() {
  document.getElementById(""demo1"").innerHTML = ""Hello Dolly!"";
  document.getElementById(""demo2"").innerHTML = ""How are you?"";
}

Try it Yourself »


In this tutorial we use 2 spaces of indentation for code blocks.
You will learn more about functions later in this tutorial.


JavaScript Keywords
JavaScript statements often start with a keyword 
to identify the JavaScript action to be performed.
Our Reserved Words Reference lists all JavaScript keywords.
Here is a list of some of the keywords you will learn about in 
this tutorial: 


Keyword
Description


var
Declares a variable


let
Declares a block variable


const
Declares a block constant


if
Marks a block of statements to be executed on a condition


switch
Marks a block of statements to be executed in different cases


for
Marks a block of statements to be executed in a loop


function
Declares a function


return
Exits a function


try
Implements error handling to a block of statements



JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.



❮ Previous
Next ❯",js
38,https://www.w3schools.com/js/js_syntax.asp,"JavaScript Syntax

❮ Previous
Next ❯


JavaScript syntax is the set of rules, how 
JavaScript programs are constructed:

// How to create variables:
var x;
let y;

// How to use variables:
x = 5;
y = 6;
let z = x + y;


JavaScript Values
The JavaScript syntax defines two types of values:

Fixed values
Variable values

Fixed values are called Literals.
Variable values are called Variables.

JavaScript Literals
The two most important syntax rules for fixed values are:
1. Numbers are written with or 
without decimals:


 10.50
1001 
Try it Yourself »

2. Strings are text, written within double or single quotes:


""John Doe""
'John Doe'

Try it Yourself »








JavaScript Variables
In a programming language, variables 
are used to store data values.
JavaScript uses the keywords var,
let and const to declare variables.
An equal sign is used to assign values to variables.
In this example, x is defined as a variable. Then, x is 
assigned (given) the value 
6:


let x;
x = 6; 
Try it Yourself »


JavaScript Operators
JavaScript uses arithmetic operators ( + - * /",js
39,https://www.w3schools.com/js/js_comments.asp,"JavaScript Comments

❮ Previous
Next ❯


JavaScript comments can be used to explain JavaScript code, and 
to make it more readable.
JavaScript comments can also be used to prevent execution, when 
testing alternative code.

Single Line Comments
Single line comments start with //.
Any text between // and the end of the line will be ignored by JavaScript 
(will not be executed).
This example uses a single-line comment before each code line:

Example

// Change heading:
document.getElementById(""myH"").innerHTML = ""My First Page"";
// Change paragraph:
document.getElementById(""myP"").innerHTML = ""My first paragraph."";

Try it Yourself »

This example uses a single line comment at the end of each line 
to explain the code:

Example

let x = 5;      // Declare x, give it the value of 5
let y = x + 2;  // Declare y, give it the value of x + 2

Try it Yourself »


Multi-line Comments
Multi-line comments start with /* and end with  */.
Any text between /* and */ will be ignored by JavaScript.
This example uses a multi-line comment (a comment block) to explain the code:

Example

/*
The code below will change
the heading with id = ""myH""
and the paragraph with id = ""myP""
in my web page:
*/
document.getElementById(""myH"").innerHTML = ""My First Page"";
document.getElementById(""myP"").innerHTML = ""My first paragraph."";
 
Try it Yourself »


It is most common to use single line comments.Block comments are often 
used for formal documentation.








Using Comments to Prevent Execution
Using comments to prevent execution of code is suitable for 
code testing.
Adding // in front of a code line changes the code lines from an executable line to 
a comment.
This example uses // to prevent execution of one of the code lines:

Example

//document.getElementById(""myH"").innerHTML = ""My First Page"";
document.getElementById(""myP"").innerHTML = ""My first paragraph."";

Try it Yourself »

This example uses a comment block to prevent execution of 
multiple lines:

Example

/*
document.getElementById(""myH"").innerHTML = ""My First Page"";
document.getElementById(""myP"").innerHTML = ""My first paragraph."";
*/


Try it Yourself »



❮ Previous
Next ❯",js
40,https://www.w3schools.com/js/js_variables.asp,"JavaScript Variables

❮ Previous
Next ❯


4 Ways to Declare a JavaScript Variable:

Using var
Using let
Using const
Using nothing


What are Variables?
Variables are containers for storing data (storing data values).
In this example, x, y, and z,
are variables, declared with the var keyword:

Example

var x = 5;var y = 6;
var z = x + y;

Try it Yourself »

In this example, x, y, and z,
are variables, declared with the let keyword:

Example

let x = 5;
let y = 6;
let z = x + y;

Try it Yourself »

In this example, x, y, and z,
are undeclared variables:

Example

x = 5;
y = 6;
z = x + y;

Try it Yourself »

From all the examples above, you can guess:

x stores the value 5
y stores the value 6
z stores the value 11



When to Use JavaScript var?
Always declare JavaScript variables with var,let,
orconst.
The var keyword is used in all JavaScript code from 1995 to 2015.
The let and const keywords were added to JavaScript in 2015.
If you want your code to run in older browser, you must use var.


When to Use JavaScript const?
If you want a general rule: always declare variables with const.
If you think the value of the variable can change, use let.
In this example, price1, price2, and total, are variables:

Example

const price1 = 5;
const price2 = 6;
let total = price1 + price2;

Try it Yourself »

The two variables price1 and price2
are declared with the const keyword.
These are constant values and cannot be changed.
The variable total is declared with the let keyword.
This is a value that can be changed.

Just Like Algebra
Just like in algebra, variables hold values:


let x = 5;
let y = 6;


Just like in algebra, variables are used in expressions:


let z = x + y;


From the example above, you can guess that the total is calculated to be 11.

Note
Variables are containers for storing values.








JavaScript Identifiers
All JavaScript variables must be
identified with unique names.
These unique names are called identifiers.
Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).
The general rules for constructing names for variables (unique identifiers) are:

Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter
Names can also begin with $ and _ (but we will not use it in this tutorial)
Names are case sensitive (y and Y are different variables)
Reserved words (like JavaScript keywords) cannot be used as names


Note
JavaScript identifiers are case-sensitive.


The Assignment Operator
In JavaScript, the equal sign (=) is an ""assignment"" operator, not an 
""equal to"" operator.
This is different from algebra. The following does not make sense in 
algebra:


x = x + 5 


In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to 
x.
(It calculates the value of x + 5 and puts the result into x. The value of x 
is incremented by 5.)

Note
The ""equal to"" operator is written like == in JavaScript.


JavaScript Data Types
JavaScript variables can hold numbers like 100 and text values like ""John 
Doe"".
In programming, text values are called text strings.
JavaScript can handle many types of data, but for now, just think of numbers and strings. 
Strings are written inside double or single quotes. Numbers are written 
without quotes.
If you put a number in quotes, it will be treated as a text string.

Example

const pi = 3.14;
let person = ""John Doe"";
let answer = 'Yes I am!';

Try it Yourself »


Declaring a JavaScript Variable
Creating a variable in JavaScript is called ""declaring"" a variable. 
You declare a JavaScript variable with the var or the let keyword:


var carName;

or:

let carName;

After the declaration, the variable has no value (technically it is undefined).
To assign a value to the variable, use the equal sign:


carName = ""Volvo"";


You can also assign a value to the variable when you declare it:


let carName = ""Volvo"";


In the example below, we create a variable called carName and assign the value 
""Volvo"" to it.
Then we ""output"" the value inside an HTML paragraph with id=""demo"":

Example

<p id=""demo""></p><script>
let carName = ""Volvo"";
document.getElementById(""demo"").innerHTML = carName; </script>
Try it Yourself »


Note
It's a good programming practice to declare all variables at the beginning of a script.


One Statement, Many Variables
You can declare many variables in one statement.
Start the statement 
with var and separate the variables by comma:

Example

let person = ""John Doe"", carName = ""Volvo"", price = 200;

Try it Yourself »

A declaration can span multiple lines: 

Example

let person = ""John Doe"",
carName = ""Volvo"",
price = 200;

Try it Yourself »


Value = undefined
In computer programs, variables are often declared without a value. The value 
can be something that has to be calculated, or something that will be provided 
later, like user input.
A variable declared without a value will have the value 
undefined.
The variable carName will have the value undefined after the execution of this statement:

Example

let carName;

Try it Yourself »


Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable declared with var, it will not lose its value.
The variable carName will still have the value ""Volvo"" after the execution of these statements:

Example

var carName = ""Volvo"";
var carName;

Try it Yourself »


Note
You cannot re-declare a variable declared with let or const.
This will not work:

let carName = ""Volvo"";
let carName;



JavaScript Arithmetic
As with algebra, you can do arithmetic with JavaScript variables, using 
operators like = and +: 

Example

let x = 5 + 2 + 3;

Try it Yourself »

You can also add strings, but strings will be concatenated:

Example

let x = ""John"" + "" "" + ""Doe"";
Try it Yourself »

Also try this:

Example

let x = ""5"" + 2 + 3;

Try it Yourself »


Note
If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.

Now try this:

Example

let x = 2 + 3 + ""5"";

Try it Yourself »


JavaScript Dollar Sign $
Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:

Example

let $ = ""Hello World"";
let $$$ = 2;
let $myMoney = 5;

Try it Yourself »

Using the dollar sign is not very common in JavaScript,
but professional programmers often use it 
as an alias for the main function in a JavaScript library.
In the JavaScript library jQuery, for instance, the main function
$ is used to select HTML elements.
In jQuery $(""p""); means ""select all p elements"".

JavaScript Underscore (_)
Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:

Example

let _lastName = ""Johnson"";
let _x = 2;
let _100 = 5;

Try it Yourself »

Using the underscore is not very common in JavaScript,

but a convention among professional programmers is to use it as an alias for
""private (hidden)"" variables.


Test Yourself With Exercises

Exercise:
Create a variable called carName and assign the value Volvo to it.


var  = """";



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
41,https://www.w3schools.com/js/js_let.asp,"JavaScript Let

❮ Previous
Next ❯


The let keyword was introduced in
ES6 (2015).
Variables defined with let cannot be Redeclared.
Variables defined with let must be Declared before use.
Variables defined with let have Block Scope.

Cannot be Redeclared
Variables defined with let cannot be redeclared.
You cannot accidentally redeclare a variable.
With let you can not do this:

Example

let x = ""John Doe"";

let x = 0;
// SyntaxError: 'x' has already been declared


With var you can:

Example

var x = ""John Doe"";

var x = 0;



Block Scope
Before ES6 (2015), JavaScript had only Global Scope and Function Scope.
ES6 introduced two important new JavaScript keywords: let and const.
These two keywords provide Block Scope in JavaScript.
Variables declared inside a { } block cannot be accessed 
from outside the block:

Example

{ 
  let x = 2;
  }
// x can NOT be used here

Variables declared with the var keyword can NOT have block scope.
Variables declared inside a { } block can be accessed from 
outside the block. 

Example

{ 
  var x = 2; 
  }
// x CAN be used here


Redeclaring Variables
Redeclaring a variable using the var keyword can impose problems.
Redeclaring a variable inside a block will also redeclare the variable 
outside the block:

Example

var x = 10;
// Here x is 10

{ 
var x = 2;
// Here x is 2}

// Here x is 2
Try it Yourself »

Redeclaring a variable using the let keyword can solve this problem.
Redeclaring a variable inside a block will not redeclare the variable outside 
the block:

Example

let x = 10;
// Here x is 10

{
let x = 2;
// Here x is 2}

// Here x is 10

Try it Yourself »


Browser Support
The let keyword is not fully supported in Internet Explorer 11 or earlier.
The following table defines the first browser versions with full support for the let keyword: 










Chrome 49
Edge 12
Firefox 44
Safari 11
Opera 36


Mar, 2016
Jul, 2015
Jan, 2015
Sep, 2017
Mar, 2016










Redeclaring
Redeclaring a JavaScript variable with var is allowed 
anywhere in a program:

Example

var x = 2;
// Now x is 2

var x = 3;
// Now x is 3

Try it Yourself »

With let, redeclaring a variable in the same block is NOT allowed:

Example

var x = 2;    // Allowed
let x = 3;    // Not allowed

{
let x = 2;    // Allowed
let x = 3     // Not allowed
}

{
let x = 2;    // Allowed
var x = 3     // Not allowed
}


Redeclaring a variable with let, in another block, IS allowed:

Example

let x = 2;    // Allowed{
let x = 3;    // Allowed
  }

  {
let x = 4;    // Allowed
  }
Try it Yourself »


Let Hoisting
Variables defined with var are hoisted to the top 
and can be initialized at any time.
Meaning: You can use the variable before it is declared:

Example
This is OK:

  carName = ""Volvo"";
  var carName;

Try it Yourself »

If you want to learn more about hoisting, study the chapter JavaScript Hoisting.


Variables defined with let are also hoisted to the top 
of the block, but not initialized.
Meaning: Using a let variable before it is declared will result in a 
ReferenceError:

Example

carName = ""Saab"";
let carName = ""Volvo"";
Try it Yourself »



❮ Previous
Next ❯",js
42,https://www.w3schools.com/js/js_const.asp,"JavaScript Const

❮ Previous
Next ❯


The const keyword was introduced in
ES6 (2015).
Variables defined with const cannot be Redeclared.
Variables defined with const cannot be Reassigned.
Variables defined with const have Block Scope.

Cannot be Reassigned
A const variable cannot be reassigned:

Example

const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error

Try it Yourself »


Must be Assigned
JavaScript const variables must be assigned a value when they are declared:

Correct

const PI = 3.14159265359;



Incorrect

const PI;
PI = 3.14159265359;



When to use JavaScript const?
As a general rule, always declare a variable with const unless you know that
the value will change.
Use const when you declare:

A new Array
A new Object
A new Function
A new RegExp



Constant Objects and Arrays
The keyword const is a little misleading.
It does not define a constant value. It defines a constant reference to a value.
Because of this you can NOT:

Reassign a constant value
Reassign a constant array
Reassign a constant object


But you CAN:
Change the elements of constant array
Change the properties of constant object


Constant Arrays
You can change the elements of a constant array:

Example

// You can create a constant array:
const cars = [""Saab"", ""Volvo"", ""BMW""];
// You can change an element:
cars[0] = ""Toyota"";
// You can add an element:
cars.push(""Audi"");

Try it Yourself »

But you can NOT reassign the array:

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];

cars = [""Toyota"", ""Volvo"", ""Audi""];    // ERROR

Try it Yourself »


Constant Objects
You can change the properties of a constant object:

Example

// You can create a const object:
const car = {type:""Fiat"", model:""500"", color:""white""};
// You can change a property:
car.color = ""red"";
// You can add a property:
car.owner = ""Johnson"";
Try it Yourself »

But you can NOT reassign the object:

Example

const car = {type:""Fiat"", model:""500"", color:""white""};

car = {type:""Volvo"", model:""EX60"", color:""red""};    // 
  ERROR
Try it Yourself »


Browser Support
The const keyword is not supported in Internet Explorer 10 or earlier.
The following table defines the first browser versions with full support for the const keyword: 










Chrome 49
IE 11 / Edge
Firefox 36
Safari 10
Opera 36


Mar, 2016
Oct, 2013
Feb, 2015
Sep, 2016
Mar, 2016










Block Scope
Declaring a variable with const is similar to let 
when it comes to Block Scope.
The x declared in the block, in this example, is not the same as the x declared outside the block:

Example

const x = 10;
// Here x is 10

{ 
const x = 2;
// Here x is 2}

// Here x is 10

Try it Yourself »

You can learn more about block scope in the chapter JavaScript Scope.

Redeclaring
Redeclaring a JavaScript var variable is allowed 
anywhere in a program:

Example

var x = 2;     // Allowed
var x = 3;     // Allowed
  x = 4;         // Allowed

Redeclaring an existing var or let
variable to const, in the same scope, is not allowed:

Example

var x = 2;     // Allowed
const x = 2;   // Not allowed

{
let x = 2;     // Allowed
const x = 2;   // Not allowed}

{
const x = 2;   // Allowed
const x = 2;   // Not allowed
}

  

Reassigning an existing const variable, in the same scope, is not allowed:

Example

  const x = 2;     // Allowed
  x = 2;           // Not allowed
  var x = 2;       // Not allowed
  let x = 2;       // Not allowed
  const x = 2;     // Not allowed
{ 
  const x = 2;   // Allowed
  x = 2;         
  // Not allowed  var x = 2;     
  // Not allowed  let x = 2;     
  // Not allowed
   
  const x = 2;   // Not allowed
}


Redeclaring a variable with const, in another scope, or in another block, is allowed:

Example

  const x = 2;       // Allowed{ 
  const x = 3;   // Allowed
  }

  {
  const x = 4;   // Allowed
  }


Const Hoisting
Variables defined with var are hoisted to the top 
and can be initialized at any time.
Meaning: You can use the variable before it is declared:

Example
This is OK:

  carName = ""Volvo"";
  var carName;

Try it Yourself »

If you want to learn more about hoisting, study the chapter JavaScript Hoisting.

Variables defined with const are also hoisted to the top,
but not initialized.
Meaning: Using a const variable before it is declared will result in a 
ReferenceError:

Example

alert (carName);
const carName = ""Volvo"";

Try it Yourself »



❮ Previous
Next ❯",js
43,https://www.w3schools.com/js/js_operators.asp,"JavaScript Operators

❮ Previous
Next ❯



Example
Assign values to variables and add them together:

let x = 5;         // assign the value 5 to 
 x
let y = 2;         // assign the value 
 2 to y
let z = x + y;     // assign the value 7 to z (5 + 2)

Try it Yourself »

The assignment operator (=) assigns a value to a variable.

Assignment

let x = 10;
Try it Yourself »

The addition operator (+) adds numbers:

Adding

let x = 5;
let y = 2;
let z = x + y;

Try it Yourself »

The multiplication operator (*) multiplies numbers.

Multiplying

let x = 5;
let y = 2;
let z = x * y;

Try it Yourself »








JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic on numbers:


Operator
Description


+
Addition


-
Subtraction


*
Multiplication


**
Exponentiation (ES2016)


/
Division


%
Modulus (Division Remainder)


++
Increment


--
Decrement



Arithmetic operators are fully described in the 
JS Arithmetic chapter.


JavaScript Assignment Operators
Assignment operators assign values to JavaScript variables.


Operator
Example
Same As


=
x = y
x = y


+=
x += y
x = x + y


-=
x -= y
x = x - y


*=
x *= y
x = x * y


/=
x /= y
x = x / y


%=
x %= y
x = x % y


**=
x **= y
x = x ** y


The addition assignment operator (+=) adds a value to a variable.

Assignment

let x = 10;x += 5;
Try it Yourself »


Assignment operators are fully described in the 
JS Assignment chapter.


JavaScript String Operators
The + operator can also be used to add (concatenate) strings.

Example

let text1 = ""John"";
let text2 = ""Doe"";
let text3 = text1 + "" "" + text2;

The result of text3 will be:

John Doe
Try it Yourself »

The += assignment operator can also be used to add (concatenate) strings:

Example

let text1 = ""What a very "";
text1 += ""nice day"";
The result of text1 will be:

What a very nice day
Try it Yourself »


When used on strings, the + operator is called the concatenation operator.


Adding Strings and Numbers
Adding two numbers, will return the sum, but adding a number and a string will return a string:

Example

let x = 5 + 5;
let y = ""5"" + 5;
let z = ""Hello"" + 5;

The result of x, y, and z will be:


10
55
Hello5


Try it Yourself »


If you add a number and a string, the result will be a string!


JavaScript Comparison Operators


Operator
Description


==
equal to


===
equal value and equal type


!=
not equal


!==
not equal value or not equal type


>
greater than


<
less than


>=
greater than or equal to


<=
less than or equal to


?
ternary operator



Comparison operators are fully described in the 
JS Comparisons chapter.


JavaScript Logical Operators


Operator
Description


&&
logical and


||
logical or


!
logical not



Logical operators are fully described in the 
JS Comparisons chapter.


JavaScript Type Operators


Operator
Description


typeof
Returns the type of a variable


instanceof
Returns true if an object is an instance of an object type



Type operators are fully described in the JS Type Conversion chapter.


JavaScript Bitwise Operators
Bit operators work on 32 bits numbers.
Any numeric operand in the operation is converted into a 32 bit number.
The result is converted back to a JavaScript number.




Operator
Description
Example
Same as
Result
Decimal


&
AND
5 & 1
0101 & 0001
0001
 1


|
OR
5 | 1
0101 | 0001
0101
 5


~
NOT
~ 5
 ~0101
1010
 10


^
XOR
5 ^ 1
0101 ^ 0001
0100
 4


<<
left shift
5 << 1
0101 << 1
1010
 10


>>
right shift
5 >> 1
0101 >> 1
0010
  2


>>>
unsigned right shift
5 >>> 1
0101 >>> 1
0010
  2




The examples above uses 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers.
Because of this, in JavaScript, ~ 5 will not return 10. It will return -6.
~00000000000000000000000000000101 will return 11111111111111111111111111111010
Bitwise operators are fully described in the JS 
Bitwise chapter.



Test Yourself With Exercises

Exercise:
Multiply 10 with 5, and alert the result.


alert(10  5);



Submit Answer »
Start the Exercise





❮ Previous
Next ❯",js
44,https://www.w3schools.com/js/js_arithmetic.asp,"JavaScript Arithmetic

❮ Previous
Next ❯


JavaScript Arithmetic Operators
Arithmetic operators perform arithmetic on numbers (literals or variables).


Operator
Description


+
Addition


-
Subtraction


*
Multiplication


**
Exponentiation (ES2016)


/
Division


%
Modulus (Remainder)


++
Increment


--
Decrement



Arithmetic Operations
A typical arithmetic operation operates on two numbers.
The two numbers can be literals:

Example

let x = 100 + 50;

Try it Yourself »

or variables:

Example

let x = a + b;

Try it Yourself »

or expressions:

Example

let x = (100 + 50) * a;

Try it Yourself »


Operators and Operands
The numbers (in an arithmetic operation) are called operands.
The operation (to be performed between the two operands) is defined by an operator.


Operand
Operator
Operand


100
+
50









Adding
The addition operator (+) adds numbers:

Example

let x = 5;
let y = 2;
let z = x + y;

Try it Yourself »


Subtracting
The subtraction operator (-) subtracts numbers.

Example

let x = 5;
let y = 2;
let z = x - y;

Try it Yourself »


Multiplying
The multiplication operator (*) multiplies numbers.

Example

let x = 5;
let y = 2;
let z = x * y;

Try it Yourself »


Dividing
The division operator (/) divides numbers.

Example

let x = 5;
let y = 2;
let z = x / y;

Try it Yourself »


Remainder
The modulus operator (%) returns the division remainder.

Example

let x = 5;
let y = 2;
let z = x % y;

Try it Yourself »


In arithmetic, the division of two integers produces a quotient
and a remainder.
In mathematics, the result of a modulo operation is the remainder of an arithmetic division.



Incrementing
The increment operator (++) increments numbers.

Example

let x = 5;x++;
let z = x;
Try it Yourself »


Decrementing
The decrement operator (--) decrements numbers.

Example

let x = 5;
 x--;
let z = x;

Try it Yourself »


Exponentiation
The exponentiation operator (**) raises the first operand to the power of the second operand.

Example

let x = 5;
let z =
 x ** 2;          // result is 25

Try it Yourself »

x ** y produces the same result as Math.pow(x,y):

Example

let x = 5;
let z =
  Math.pow(x,2);   // result is 25

Try it Yourself »


Operator Precedence
Operator precedence describes the order in which operations are performed in 
an arithmetic expression.

Example

let x = 100 + 50 * 3;

Try it Yourself »

Is the result of example above the same as 150 * 3, or is it the same as 100 
+ 150?
Is the addition or the multiplication done first?
As in traditional school mathematics, the multiplication is done first.
Multiplication (*) and division (/) have higher precedence than 
addition (+) and subtraction (-).
And (as in school mathematics) the precedence can be changed by using 
parentheses:

Example

let x = (100 + 50) * 3;

Try it Yourself »

When using parentheses, the operations inside the parentheses are computed 
first. 
When many operations have the same precedence (like addition and 
subtraction), they are computed from left to 
right: 

Example

let x = 100 + 50 - 3;

Try it Yourself »


JavaScript Operator Precedence Values

Pale red entries indicates ECMAScript 2015 (ES6) or higher.



Value
Operator
Description
Example


21
( )
Expression grouping
(3 + 4)


 
 
 
 


20
.
Member
person.name


20
[]
Member
person[""name""]


20
()
Function call
myFunction()


20
new
Create
new Date()


 
 
 
 


18
++
Postfix Increment
i++


18
--
Postfix Decrement
i--


 
 
 
 


17
++
Prefix Increment
++i


17
--
Prefix Decrement
--i


17
!
Logical not
!(x==y)


17
typeof
Type
typeof x


 
 
 
 


16
**
Exponentiation (ES2016)
10 ** 2


 
 
 
 


15
*
Multiplication
10 * 5


15
/
Division
10 / 5


15
%
Division Remainder
10 % 5


 
 
 
 


14
+
Addition
10 + 5


14
-
Subtraction
10 - 5


 
 
 
 


13
<<
Shift left
x << 2


13
>>
Shift right
x >> 2


13
>>>
Shift right (unsigned)
x >>> 2


 
 
 
 


12
<
Less than
x < y 


12
<=
Less than or equal
x <= y


12
>
Greater than
x > y


12
>=
Greater than or equal
x >= y


12
in
Property in Object
""PI"" in Math


12
instanceof
Instance of Object
instanceof Array


 
 
 
 


11
==
Equal
x == y


11
===
Strict equal
x === y


11
!=
Unequal
x != y


11
!==
Strict unequal
x !== y


 
 
 
 


10
&
Bitwise AND
x & y


9
^
Bitwise XOR
x ^ y


8
|
Bitwise OR
x | y


7
&&
Logical AND
x && y


6
||
Logical OR
x || y


5
??
Nullish Coalescing
x ?? y


4
? :
Condition
? ""Yes"" : ""No""


 
 
 
 


3
+=
Assignment
x += y


3
/=
Assignment
x /= y


3
-=
Assignment
x -= y


3
*=
Assignment
x *= y


3
%=
Assignment
x %= y


3
<<=
Assignment
x <<= y


3
>>=
Assignment
x >>= y


3
>>>=
Assignment
x >>>= y


3
&=
Assignment
x &= y


3
^=
Assignment
x ^= y


3
|=
Assignment
x |= y


 
 
 
 


2
yield
Pause Function
yield x


1
,
Comma
5 , 6



Expressions in parentheses are fully computed before the value is 
used in the rest of the expression.



Test Yourself With Exercises

Exercise:
Divide 10 by 2, and alert the result.


alert(10  2);



Submit Answer »
Start the Exercise





❮ Previous
Next ❯",js
45,https://www.w3schools.com/js/js_assignment.asp,"JavaScript Assignment

❮ Previous
Next ❯


JavaScript Assignment Operators
Assignment operators assign values to JavaScript variables.


Operator
Example
Same As


=
x = y
x = y


+=
x += y
x = x + y


-=
x -= y
x = x - y


*=
x *= y
x = x * y


/=
x /= y
x = x / y


%=
x %= y
x = x % y


<<=
x <<= y
x = x << y


>>=
x >>= y
x = x >> y


>>>=
x >>>= y
x = x >>> y


&=
x &= y
x = x & y


^=
x ^= y
x = x ^ y


|=
x |= y
x = x | y


**=
x **= y
x = x ** y



The **= operator is a part of ECMAScript 2016.


Assignment Examples
The = assignment operator assigns a value to a variable.

Assignment

let x = 10;
Try it Yourself »

The += assignment operator adds a value to a variable.

Assignment

let x = 10;x += 5;
Try it Yourself »

The -= assignment operator subtracts a value from a variable.

Assignment

let x = 10;x -= 5;
Try it Yourself »

The *= assignment operator multiplies a variable.

Assignment

let x = 10;x *= 5;
Try it Yourself »

The /= assignment divides a variable.

Assignment

let x = 10;x /= 5;
Try it Yourself »

The %= assignment operator assigns a remainder to a variable.

Assignment

let x = 10;x %= 5;
Try it Yourself »









Test Yourself With Exercises

Exercise:
Use the correct assignment operator that will result in x being 15 (same as x = x + y).


x = 10;
y = 5;
x  y;



Submit Answer »
Start the Exercise





❮ Previous
Next ❯",js
46,https://www.w3schools.com/js/js_datatypes.asp,"JavaScript Data Types

❮ Previous
Next ❯


JavaScript variables can hold different data types: numbers, 
strings, objects and more:

let length = 16;                               // Number
let lastName = ""Johnson"";                      // String
let x = {firstName:""John"", lastName:""Doe""};    // Object


The Concept of Data Types
In programming, data types is an important concept.
To be able to operate on variables, it is important to know something about 
the type.
Without data types, a computer cannot safely solve this:


let x = 16 + ""Volvo"";

Does it make any sense to add ""Volvo"" to sixteen? Will it produce an 
error or will it produce a result?
JavaScript will treat the example above as:


let x = ""16"" + ""Volvo"";


When adding a number and a string, JavaScript will treat the number as a 
string.


Example

let x = 16 + ""Volvo"";
Try it Yourself »


Example

let x = ""Volvo"" + 16;
Try it Yourself »

JavaScript evaluates expressions from left to right. Different sequences can 
produce different results:

JavaScript:

let x = 16 + 4 + ""Volvo"";

Result:

20Volvo

Try it Yourself »


JavaScript:

let x = ""Volvo"" + 16 + 4;

Result:

Volvo164

Try it Yourself »

In the first example, JavaScript treats 16 and 4 as numbers, until it reaches ""Volvo"".
In the second example, since the first operand is a string, all operands are 
treated as strings.







JavaScript Types are Dynamic
JavaScript has dynamic types. This means that the same variable can be used 
to hold 
different data types:

Example

let x;           // Now x is undefined
x = 5;           // Now x is a Number
x = ""John"";      // Now x is a String

Try 
it Yourself »


JavaScript Strings
A string (or a text string) is a series of characters like ""John Doe"".
Strings are written with quotes. You can use single or double quotes:


Example

let carName1 = ""Volvo XC60"";   // Using double quotes
let carName2 = 'Volvo XC60';   // Using single quotes
Try 
it Yourself »

You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:

Example

let answer1 = ""It's alright"";             
// Single quote inside double quotes
let answer2 = ""He is called 'Johnny'"";   
// Single quotes inside double quotes
let answer3 = 'He is called ""Johnny""';   
// Double quotes inside single quotes

Try 
it Yourself »
You will learn more about strings later in this 
tutorial.

JavaScript Numbers
JavaScript has only one type of numbers.
Numbers can be written with, or without decimals:

Example

let x1 = 34.00;     // Written with decimals
let x2 = 34;        // Written without decimals

Try 
it Yourself »

Extra large or extra small numbers can be written with scientific 
(exponential) notation:

Example

let y = 123e5;      // 12300000
let z = 123e-5;     // 0.00123
Try 
it Yourself »
You will learn more about numbers later in this 
tutorial.

JavaScript Booleans
Booleans can only have two values: true or false.

Example

let x = 5;
let y = 5;
let z = 6;(x == y)       
  // Returns true(x == z)       // Returns 
  false
Try it Yourself »
Booleans are often used in conditional testing.
You will learn more about 
conditional testing later in this tutorial.

JavaScript Arrays
JavaScript arrays are written with square brackets.
Array items are separated by commas.
The following code declares (creates) an array called cars, containing three 
items (car names):

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];

Try it Yourself »

Array indexes are zero-based, which means the first item is [0], second is 
[1], and so on.

You will learn more about arrays later in this tutorial.


JavaScript Objects
JavaScript objects are written with curly braces {}.
Object 
properties are written as name:value pairs, separated by commas.

Example

const person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};

Try it Yourself »

The object (person) in the example above has 4 properties: firstName, 
lastName, age, and eyeColor.

You will learn more about objects later in this tutorial.


The typeof Operator
You can use the JavaScript typeof operator to find the type 
of a JavaScript variable.
The typeof operator returns the type of a variable or an expression:

Example

typeof """"             // Returns 
 ""string""
typeof ""John""         // Returns 
 ""string""
typeof ""John Doe""     // Returns 
 ""string""
Try it Yourself »


Example

typeof 0              // Returns 
 ""number""
  typeof 314            // Returns 
 ""number""
  typeof 3.14           // Returns 
 ""number""
  typeof (3)            // Returns 
 ""number""typeof (3 + 4)        // Returns 
 ""number""
Try it Yourself »


You will learn more about typeof later in this tutorial.


Undefined
In JavaScript, a variable without a value, has the value undefined. 
The type is also undefined.

Example

let car;    // Value is undefined, 
    type is undefined
Try it Yourself »

Any variable can be emptied, by setting the value to undefined. 
The type will also be undefined.

Example

    car = undefined;    // Value is undefined, 
    type is undefined
Try it Yourself »


Empty Values 
An empty value has nothing to do with undefined.
An empty string has both a legal value and a type.

Example

let car = """";    // 
    The value is 
    """", the typeof is ""string""
Try it Yourself »



Test Yourself With Exercises

Exercise:
Use comments to describe the correct data type of the following variables:


let length = 16;            // 
let lastName = ""Johnson"";   // 
const x = {
  firstName: ""John"",
  lastName: ""Doe""
};                          // 



Submit Answer »
Start the Exercise





❮ Previous
Next ❯",js
47,https://www.w3schools.com/js/js_functions.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


JavaScript Functions

❮ Previous
Next ❯


A JavaScript function is a block of code designed to perform a 
particular task.
A JavaScript function is executed when 
""something"" invokes it (calls it).


Example

function myFunction(p1, p2) {
    return p1 * p2;  
//  The function returns the product of p1 and p2
}

Try it Yourself »


JavaScript Function Syntax
A JavaScript function is defined with the function keyword, 
followed by a name, followed by parentheses ().
Function names can contain letters, digits, underscores, and dollar signs 
(same rules as variables).
The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)
The code to be executed, by the function, is placed inside curly brackets: {}


function
name(parameter1, parameter2, parameter3) {
    // code to be executed
}


Function parameters are listed inside the parentheses () in 
the function definition.
Function arguments are the values 
received by the function when it is invoked.
Inside the function, the arguments (the parameters) behave as local variables.

A Function is much the same as a Procedure or a Subroutine, in other programming languages.


Function Invocation
The code inside the function will execute when ""something"" invokes (calls) the 
function:

When an event occurs (when a user clicks a button)
When it is invoked (called) from JavaScript code
Automatically (self invoked)

You will learn a lot more about function invocation later in this 
tutorial.






    googletag.cmd.push(function() { googletag.display('div-gpt-ad-1493883843099-0'); });
    



Function Return
When JavaScript reaches a return statement, 
the function will stop executing.
If the function was invoked from a statement, JavaScript will 
""return"" to execute the code after the invoking statement.
Functions often compute a return value. The return value is 
""returned"" back to 
the ""caller"":

Example
Calculate the product of two numbers, and return the result:

let x = myFunction(4, 3);   // Function is called, return value will end up in x
function myFunction(a, b) {
    return a * b;            
// Function returns the product of a and b
}

The result in x will be:


12


Try it Yourself »


Why Functions?
You can reuse code: Define the code once, and use it many times.
You can use the same code many times with different arguments, to produce different 
results.

Example
Convert Fahrenheit to Celsius:

function toCelsius(fahrenheit) {
    return (5/9) * (fahrenheit-32);
}document.getElementById(""demo"").innerHTML = toCelsius(77);
Try it Yourself »


The () Operator Invokes the Function
Using the example above, toCelsius refers to the function object, and 
toCelsius() refers to the function result.
Accessing a function without () will return the function object instead of 
the function result.

Example

function toCelsius(fahrenheit) {
    return (5/9) * (fahrenheit-32);
}document.getElementById(""demo"").innerHTML = toCelsius;
Try it Yourself »


Functions Used as Variable Values
Functions can be used the same way as you use variables, in all types of formulas, assignments, and 
calculations.

Example
Instead of using a variable to store the return value of a function:

let x = toCelsius(77);
let text = ""The temperature is "" + x + "" Celsius"";

You can use the function directly, as a variable value:

let text = ""The temperature is "" + toCelsius(77) + "" Celsius"";

Try it Yourself »


You will learn a lot more about functions later in this tutorial.


Local Variables
Variables declared within a JavaScript function, become 
LOCAL to 
the function.
Local variables can only be accessed 
from within the function.

Example

// code here can NOT use carName
function myFunction() {
  let carName = ""Volvo"";
  // code here CAN use carName
}
// code here can NOT use carName

Try it Yourself »

Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
Local variables are created when a function starts, and deleted when the function is completed.


Test Yourself With Exercises

Exercise:
Execute the function named myFunction.


function myFunction() {
  alert(""Hello World!"");
}
;



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
48,https://www.w3schools.com/js/js_objects.asp,"JavaScript Objects

❮ Previous
Next ❯


Real Life Objects, Properties, and Methods
In real life, a car is an object. 
A car has properties like weight and color, and methods like start and stop:




Object


Properties


Methods







car.name = Fiat
car.model = 500
car.weight = 850kg
car.color = white


car.start()
car.drive()
car.brake()
car.stop()



All cars have the same properties, but the property values differ from car to car.
All cars have the same methods, but the methods are performed 
at different times.

JavaScript Objects
You have already learned that JavaScript variables are 
containers for data values.
This code assigns a simple value (Fiat) to 
a variable named car: 


let car = ""Fiat"";

Try it Yourself »

Objects are variables too. But objects can contain many 
values. 
This code assigns many values (Fiat, 500, white) to a
variable 
named car:


const car = {type:""Fiat"", model:""500"", color:""white""};

Try it Yourself »

The values are written as name:value pairs (name and value separated by a 
colon).

It is a common practice to declare objects with the const keyword.
Learn more about using const with objects in the chapter: JS Const.








Object Definition
You define (and create) a JavaScript object with an object literal:

Example

const person = {firstName:""John"", lastName:""Doe"", age:50, eyeColor:""blue""};

Try it Yourself »

Spaces and line breaks are not important. An object definition can span multiple lines: 

Example

const person = {
    firstName: ""John"",
    lastName: ""Doe"",
  age: 50,
  eyeColor: ""blue""
};

Try it Yourself »


Object Properties
The name:values pairs in JavaScript objects are called properties:


Property
Property Value


firstName
John


lastName
Doe


age
50


eyeColor
blue



Accessing Object Properties
You can access object properties in two ways: 


objectName.propertyName

or


objectName[""propertyName""]



Example1

person.lastName;

Try it Yourself »


Example2

 person[""lastName""];

Try it Yourself »


JavaScript objects are containers for named values called properties.


Object Methods
Objects can also have methods.
Methods are actions that can be performed on objects.
Methods are stored in properties as function 
definitions.


Property
Property Value


firstName
John


lastName
Doe


age
50


eyeColor
blue


fullName
function() {return this.firstName + "" "" + this.lastName;}



A method is a function stored as a property.



Example

const person = {
    firstName: ""John"",
    lastName : ""Doe"",
    id       : 5566,
    fullName : function() {
    return this.firstName + "" "" + this.lastName;  }
};



The this Keyword
In a function definition, this refers to the ""owner"" of the function.
In the example above, this is the person object that ""owns"" the 
fullName function.
In other words, this.firstName means the firstName property of this object.
Read more about the this keyword at JS this Keyword.

Accessing Object Methods
You access an object method with the following syntax:


objectName.methodName()


Example

name = person.fullName();
Try it Yourself »

If you access a method without the () parentheses, it 
will return the function definition:

Example

name = person.fullName;
Try it Yourself »


Do Not Declare Strings, Numbers, and Booleans as Objects!
When a JavaScript variable is declared with the keyword ""new"", the variable is 
created as 
an object: 


x = new String();        // Declares x as a String object
y = new Number();        // Declares y as a Number object
z = new Boolean();       // Declares z as a Boolean object


Avoid String, Number, and Boolean objects. They complicate your code and slow down  
execution speed.

You will learn more about objects later in this tutorial.



Test Yourself With Exercises

Exercise:
Alert ""John"" by extracting information from the person object.


const person = {
  firstName: ""John"",
  lastName: ""Doe""
};

alert();



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
49,https://www.w3schools.com/js/js_events.asp,"JavaScript Events

❮ Previous
Next ❯


HTML events are ""things"" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can 
""react"" on 
these events.

HTML Events
An HTML event can be something the browser does, or something a user does.
Here are some examples of HTML events:

An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked

Often, when events happen, you may want to do something.
JavaScript lets you execute code when events are detected.
HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.
With single quotes:


<element
event='some JavaScript'>
With double quotes:


 <element
event=""some JavaScript"">
In the following example, an onclick attribute (with code), is added to a 
<button> element:

Example

<button onclick=""document.getElementById('demo').innerHTML = Date()"">The time is?</button>

Try it Yourself »

In the example above, the JavaScript code changes the content of 
the element with id=""demo"".
In the next example, the code changes the content of 
its own element (using this.innerHTML): 

Example

<button onclick=""this.innerHTML = Date()"">The time is?</button>

Try it Yourself »


JavaScript code is often several lines long. It is more common to see event attributes calling functions:


Example

<button onclick=""displayDate()"">The time is?</button>
Try it Yourself »








Common HTML Events
Here is a list of some common HTML events:


Event
Description


onchange
An HTML element has been changed


onclick
The user clicks an HTML element


onmouseover
The user moves the mouse over an HTML element


onmouseout
The user moves the mouse away from an HTML element


onkeydown
The user pushes a keyboard key


onload
The browser has finished loading the page


The list is much longer: W3Schools JavaScript Reference HTML DOM Events.

JavaScript Event Handlers
Event handlers can be used to handle and verify user input, user actions, 
and browser actions:

Things that should be done every time a page loads
Things that should be done when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
And more ...

Many different methods can be used to let JavaScript work with events:

HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...


You will learn a lot more about events and event handlers in the HTML DOM chapters.



Test Yourself With Exercises

Exercise:
The <button> element should do something when someone clicks on it. Try to fix it!


<button =""alert('Hello')"">Click me.</button>



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
50,https://www.w3schools.com/js/js_strings.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


JavaScript Strings

❮ Previous
Next ❯


JavaScript strings are for storing and manipulating text.

A JavaScript string is zero or more characters written inside quotes.

Example

let text = ""John Doe"";

Try it Yourself »

You can use single or double quotes:

Example

let carName1 = ""Volvo XC60"";  
  // Double quotes
let carName2 = 'Volvo XC60';  // Single quotes 
Try it Yourself »

You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:

Example

let answer1 = ""It's alright"";
let answer2 = ""He is called 'Johnny'"";
let answer3 = 'He is called ""Johnny""';

Try it Yourself »


String Length
To find the length of a string, use the built-in length property:

Example

let text = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
let length = text.length;

Try it Yourself »







    googletag.cmd.push(function() { googletag.display('div-gpt-ad-1493883843099-0'); });
    



Escape Character
Because strings must be written within quotes, JavaScript will misunderstand this string:


let text = ""We are the so-called ""Vikings"" from the north."";

The string will be chopped to ""We are the so-called "".
The solution to avoid this problem, is to use the backslash escape character.
The backslash (\) escape character turns special characters into string characters:


Code
Result
Description


\'
'
Single quote


\""
""
Double quote


\\
\
Backslash


The sequence \""  inserts a double quote in a string:

Example

let text = ""We are the so-called \""Vikings\"" from the north."";
Try it Yourself »

The sequence \'  inserts a single quote in a string:

Example

let text= 'It\'s alright.';

Try it Yourself »

The sequence \\  inserts a backslash in a string:

Example

let text = ""The character \\ is called backslash."";

Try it Yourself »

Six other escape sequences are valid in JavaScript:


Code
Result


\b
Backspace


\f
Form Feed


\n
New Line


\r
Carriage Return


\t
Horizontal Tabulator


\v
Vertical Tabulator



The 6 escape characters above were originally designed to control 
typewriters, teletypes, and fax machines. They do not make any sense in HTML. 


Breaking Long Code Lines
For best readability, programmers often like to avoid code lines longer than 
80 characters.
If a JavaScript statement does not fit on one line, the best place to break 
it is after an operator:

Example

document.getElementById(""demo"").innerHTML =""Hello Dolly!"";
Try it Yourself »

You can also break up a code line within a text string with a single backslash:

Example

document.getElementById(""demo"").innerHTML = 
""Hello \Dolly!"";

Try it Yourself »


The \ method is not the preferred method. It might not have universal support.Some browsers do 
not allow spaces behind the \ character.

A safer way to break up a string, is to use string 
addition:

Example

document.getElementById(""demo"").innerHTML = ""Hello "" + ""Dolly!"";

Try it Yourself »

You cannot break up a code line with a backslash:

Example

document.getElementById(""demo"").innerHTML = \ ""Hello Dolly!"";

Try it Yourself »


JavaScript Strings as Objects
Normally, JavaScript strings are primitive values, created from literals:


let x = ""John"";


But strings can also be defined as objects with the keyword new:


let y = new String(""John"");



Example

let x = ""John"";
let y = new String(""John"");

Try it Yourself »


Do not create Strings objects.
The new keyword complicates the code and slows down execution speed.
String objects can produce unexpected results:


 When using the == operator, x and y are equal:

let x = ""John"";
let y = new String(""John"");

Try it Yourself »


When using the === operator, x and y are not equal:


let x = ""John"";
let y = new String(""John"");

Try it Yourself »


Note the difference between (x==y) and (x===y).


(x == y) true or false?

let x = new String(""John"");
let y = new String(""John"");

Try it Yourself »


(x === y) true or false?

let x = new String(""John"");
let y = new String(""John"");

Try it Yourself »


Comparing two JavaScript objects always returns false.


Complete String Reference
For a complete String reference, go to our:
Complete JavaScript String Reference.
The reference contains descriptions and examples of all string properties and methods.


Test Yourself With Exercises

Exercise:
Use the length property to alert the length of txt.


let txt = ""Hello World!"";
let x = ;
alert(x);



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",js
51,https://www.w3schools.com/js/js_string_methods.asp,"JavaScript String Methods

❮ Previous
Next ❯


String methods help you to work with strings.

String Methods and Properties
Primitive values, like ""John Doe"", cannot have properties 
or methods (because they are not objects). 
But with JavaScript, methods and properties are also available to 
primitive values, because JavaScript treats primitive values 
as objects when executing methods and properties.

JavaScript String Length
The length property returns the length of a string:

Example

let txt = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
let length = txt.length;

Try it Yourself »


Extracting String Parts
There are 3 methods for extracting a part of a string:

slice(start, end)
substring(start, end)
substr(start, length)


JavaScript String slice()
slice() extracts a part of a string and returns the 
extracted part in a new string.
The method takes 2 parameters: the start position, and the end position (end 
not included).
This example slices out a portion of a string from position 7 to position 12 (13-1):

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.slice(7, 13);

Try it Yourself »


Note
JavaScript counts positions from zero.
First position is 0.
Second position is 1.

If a parameter is negative, the position is counted from the 
end of the string.
This example slices out a portion of a string from position -12 to position 
-6: 

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.slice(-12, -6);

Try it Yourself »

If you omit the second parameter, the method will slice out the rest of the string:

Example

let part = str.slice(7);

Try it Yourself »

or, counting from the end:

Example

let part = str.slice(-12);

Try it Yourself »








JavaScript String substring()
substring() is similar to slice().
The difference is that substring() cannot accept negative indexes.

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.substring(7, 13);

Try it Yourself »

If you omit the second parameter, substring() will slice out the rest of the 
string.

JavaScript String substr()
substr() is similar to slice().
The difference is 
that the second parameter specifies the length 
of the extracted part.

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.substr(7, 6);

Try it Yourself »

If you omit the second parameter, substr() will slice out the rest of the 
string.

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.substr(7);

Try it Yourself »

If the first parameter is negative, the position counts from the end of the 
string.

Example

let str = ""Apple, Banana, Kiwi"";
let part = str.substr(-4);

Try it Yourself »


Replacing String Content
The replace() method replaces a specified value with another 
value in a string:

Example

let text = ""Please visit Microsoft!"";
let newText = text.replace(""Microsoft"", ""W3Schools"");

Try it Yourself »


Note
The replace() method does not change the string it is called on.
The replace() method returns a new string.

By default, the replace() method replaces only the first match:

Example

let text = ""Please visit Microsoft and Microsoft!"";
let newText = text.replace(""Microsoft"", ""W3Schools"");


Try it Yourself »


By default, the replace() method is case sensitive. Writing MICROSOFT (with 
upper-case) will not work:

Example

let text = ""Please visit Microsoft!"";
let newText = text.replace(""MICROSOFT"", ""W3Schools"");


Try it Yourself »


To replace case insensitive, use a regular expression with an /i flag (insensitive):

Example

let text = ""Please visit Microsoft!"";
let newText = text.replace(/MICROSOFT/i, ""W3Schools"");


Try it Yourself »



Note
Regular expressions are written without quotes.

To replace all matches, use a regular expression with a /g flag (global match):

Example

let text = ""Please visit Microsoft and Microsoft!"";
let newText = text.replace(/Microsoft/g, ""W3Schools"");


Try it Yourself »



Note
You will learn a lot more about regular expressions in the chapter JavaScript Regular 
Expressions.


Converting to Upper and Lower Case
A string is converted to upper case with toUpperCase():
A string is converted to lower case with toLowerCase():

JavaScript String toUpperCase()

Example

let text1 = ""Hello World!"";
let text2 = text1.toUpperCase();

Try it Yourself »

JavaScript String toLowerCase()

Example

let text1 = ""Hello World!"";       // String
let text2 = text1.toLowerCase();  // text2 is text1 
converted to lower

Try it Yourself »


JavaScript String concat()
concat() joins two or more strings:

Example

let text1 = ""Hello"";
let text2 = ""World"";
let text3 = text1.concat("" "", text2);

Try it Yourself »

The concat() method can be used instead of the plus operator. 
These two lines do the same:

Example

text = ""Hello"" + "" "" + ""World!"";
text = ""Hello"".concat("" "", ""World!"");


Note
All string methods return a new string. They don't modify the original string.
Formally said:Strings are immutable: Strings cannot be changed, only replaced.


JavaScript String trim()
The trim() method removes whitespace from both sides of a string:

Example

let text1 = ""      Hello World!      "";
let text2 = text1.trim();

Try it Yourself »



JavaScript String Padding
ECMAScript 2017 added two String methods: padStart
and padEnd to support padding at the beginning and at the end of a string.

JavaScript String padStart()

Example

let text = ""5"";
let padded = text.padStart(4,0);

Try it Yourself »

Browser Support
padStart() is an ECMAScript 2017 feature.
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



padStart() is not supported in Internet Explorer.

JavaScript String padEnd()

Example

let text = ""5"";
let padded = text.padEnd(4,0);

Try it Yourself »

Browser Support
padEnd() is an ECMAScript 2017 feature.
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



padEnd() is not supported in Internet Explorer.

Extracting String Characters
There are 3 methods for extracting string characters:

charAt(position)
charCodeAt(position)
Property access [ ]


JavaScript String charAt()
The charAt() method returns the character at a specified 
index (position) in a string:

Example

let text = ""HELLO WORLD"";
let char = text.charAt(0);

Try it Yourself »


JavaScript String charCodeAt()
The charCodeAt() method returns the unicode of the character 
at a specified index in a string:
The method returns a UTF-16 code (an integer between 0 and 65535).

Example

let text = ""HELLO WORLD"";
let char = text.charCodeAt(0);

Try it Yourself »


Property Access
ECMAScript 5 (2009) allows property access [ ] on strings:

Example

let text = ""HELLO WORLD"";
let char = text[0];

Try it Yourself »


Note
Property access might be a little unpredictable: 

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = ""A"" gives no error (but does not work!)



Example

let text = ""HELLO WORLD"";
text[0] = ""A"";    // Gives no error, but does not work

Try it Yourself »


Converting a String to an Array

If you want to work with a string as an array, you can convert it to an array.

JavaScript String split()
A string can be converted to an array with the split() method:

Example

text.split("","")    // Split on commas
text.split("" "")    // Split on spaces
text.split(""|"")    // Split on pipe

Try it Yourself »

If the separator is omitted, the returned array will contain the whole string 
in index [0].
If the separator is """", the returned array will be an array of single 
characters:

Example

text.split("""")

Try it Yourself »


Complete String Reference
For a complete String reference, go to our:
Complete JavaScript String Reference.
The reference contains descriptions and examples of all string properties and methods.


Test Yourself With Exercises

Exercise:
Convert the text into an UPPERCASE text:


let txt = ""Hello World!"";
txt = txt.;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",js
52,https://www.w3schools.com/js/js_string_search.asp,"JavaScript String Search

❮ Previous
Next ❯


JavaScript Search Methods

String indexOf()
String lastIndexOf()
String startsWith()
String endsWith()


JavaScript String indexOf()
The indexOf() method returns the index of (the position of) 
the first occurrence of a specified text in a string:

Example

let str = ""Please locate where 'locate' occurs!"";
str.indexOf(""locate"");

Try it Yourself »


Note
JavaScript counts positions from zero.
0 is the first position in a 
string, 1 is the second, 2 is the third, ...


JavaScript String lastIndexOf()
The lastIndexOf() method returns the index of the last 
occurrence of a specified text in a string:

Example

let str = ""Please locate where 'locate' occurs!"";
str.lastIndexOf(""locate"");

Try it Yourself »

Both indexOf(), and lastIndexOf() return -1
if the text is not found:

Example

let str = ""Please locate where 'locate' occurs!"";
str.lastIndexOf(""John"");

Try it Yourself »

Both methods accept a second parameter as the starting position for the 
search:

Example

let str = ""Please locate where 'locate' occurs!"";
str.indexOf(""locate"", 15);

Try it Yourself »

The lastIndexOf() methods searches backwards 
(from the end to the beginning), meaning:
if the second parameter is 15, the search starts at position 
15, and searches to the beginning of the string.

Example

let str = ""Please locate where 'locate' occurs!"";
str.lastIndexOf(""locate"", 15);

Try it Yourself »


JavaScript String search()
The search() method searches a string for a specified value 
and returns the position of the match:

Example

let str = ""Please locate where 'locate' occurs!"";
str.search(""locate"");

Try it Yourself »


Did You Notice?
The two methods, indexOf() and search(), are equal?
They accept the same arguments (parameters), and return the same value?
The two methods are NOT equal. These are the differences:

The search() method cannot take a second start position argument.
The indexOf() method cannot take 
powerful search values (regular expressions).

You will learn more about 
regular expressions in a later chapter.







JavaScript String match()
The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.

Example 1
Search a string for ""ain"":

let text = ""The rain in SPAIN stays mainly in the plain""; 
text.match(/ain/g); 

Try it Yourself »

Read more about regular expressions in the chapter JS RegExp.

Note
If a regular expression does not include the g modifier (to perform a global search),
the match() method will return only the first match in the string.

Syntax

string.match(regexp)


regexp
Required. The value to search for, as a regular expression.


Returns:
An Array, containing the matches, one item for each match, or null if no match is found



Example 2
Perform a global, case-insensitive search for ""ain"":

let text = ""The rain in SPAIN stays mainly in the plain""; 
text.match(/ain/gi);

Try it Yourself »


JavaScript String includes()
The includes() method returns true if a string contains a specified value.

Example

let text = ""Hello world, welcome to the universe."";
text.includes(""world"");

Try it Yourself »


Syntax

string.includes(searchvalue, start)


searchvalue
Required. The string to search for


start
Optional. Default 0. Position to start the search


Returns:
Returns true if the string contains the value, otherwise false


JS Version:
ES6 (2015)



Check if a string includes ""world"", starting the search at position 12:

let text = ""Hello world, welcome to the universe."";
text.includes(""world"", 12);

Try it Yourself »


Browser Support
includes() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



includes() is not supported in Internet Explorer.

JavaScript String startsWith()
The startsWith() method returns true
if a string begins with a specified value, otherwise false:

Example

let text = ""Hello world, welcome to the universe."";

text.startsWith(""Hello"");

Try it Yourself »

Syntax

string.startsWith(searchvalue, start)
Parameter Values


Parameter
Description 

searchvalue
Required. The value to search for.


start
Optional. Default 0. The position to start the search.



Examples

let text = ""Hello world, welcome to the universe."";

text.startsWith(""world"")    // Returns false


let text = ""Hello world, welcome to the universe."";

text.startsWith(""world"", 5)    // Returns false


let text = ""Hello world, welcome to the universe."";

text.startsWith(""world"", 6)    // Returns true

Try it Yourself »


Note
The startsWith() method is case sensitive.


Browser Support
startsWith() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



startsWith() is not supported in Internet Explorer.

JavaScript String endsWith()
The endsWith() method returns true
if a string ends with a specified value, otherwise false:

Example
Check if a string ends with ""Doe"":

var text = ""John Doe"";
text.endsWith(""Doe"");

Try it Yourself »

Syntax

string.endswith(searchvalue, length)
Parameter Values


Parameter
Description 

searchvalue
Required. The value to search for.


length
Optional. The length to search.



Check in the 11 first characters of a string ends with ""world"":

let text = ""Hello world, welcome to the universe."";
text.endsWith(""world"", 11);

Try it Yourself »


Note
The endsWith() method is case sensitive.


Browser Support
endsWith() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



endsWith() is not supported in Internet Explorer.


Complete String Reference
For a complete String reference, go to our:
Complete JavaScript String Reference.
The reference contains descriptions and examples of all string properties and methods.


❮ Previous
Next ❯",js
53,https://www.w3schools.com/js/js_string_templates.asp,"JavaScript Template Literals

❮ Previous
Next ❯


Synonyms:

Template Literals
Template Strings
String Templates
Back-Tics Syntax


Back-Tics Syntax
Template Literals use back-ticks (``) rather than the quotes ("""") to define a string:

Example

let text = `Hello World!`;

Try it Yourself »


Quotes Inside Strings
With template literals, you can use both single and double quotes inside a string:

Example

let text = `He's often called ""Johnny""`;

Try it Yourself »


Multiline Strings
Template literals allows multiline strings:

Example

let text =
`The quick
brown fox
jumps over
the lazy dog`;

Try it Yourself »


Interpolation
Template literals provide an easy way to interpolate variables and expressions into strings.
The method is called string interpolation.
The syntax is:


${...}


Variable Substitutions
Template literals allow variables in strings:

Example

let firstName = ""John"";
let lastName = ""Doe"";

let text = `Welcome ${firstName}, ${lastName}!`;

Try it Yourself »


Automatic replacing of variables with real values is called string interpolation.


Expression Substitution
Template literals allow expressions in strings:

Example

let price = 10;
let VAT = 0.25;

let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

Try it Yourself »


Automatic replacing of expressions with real values is called string interpolation.


HTML Templates

Example

let header = ""Templates Literals"";
let tags = [""template literals"", ""javascript"", ""es6""];

let html = `<h2>${header}</h2><ul>`;

for (const x of tags) {
  html += `<li>${x}</li>`;
}

html += `</ul>`;

Try it Yourself »


Browser Support
Template Literals is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



Template Literals is not supported in Internet Explorer.

Complete String Reference
For a complete String reference, go to our:
Complete JavaScript String Reference.
The reference contains descriptions and examples of all string properties and methods.


❮ Previous
Next ❯",js
54,https://www.w3schools.com/js/js_numbers.asp,"JavaScript Numbers

❮ Previous
Next ❯


JavaScript has only one type of number.
Numbers can be written with or without decimals.


Example

let x = 3.14;    // A number with decimals
let y = 3;       // A number without decimals


Try it 
Yourself »


Extra large or extra small numbers can be written with scientific (exponent) notation:

Example

let x = 123e5;    // 12300000
let y = 123e-5;   // 0.00123


Try it 
Yourself »



JavaScript Numbers are Always 64-bit Floating Point
Unlike many other programming languages, 
JavaScript does not define different types of numbers, like integers, short, long, 
floating-point etc.
JavaScript numbers are always stored as double precision floating point 
numbers, following the international IEEE 754 standard. This format 
stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 
to 51, the exponent in bits 52 to 62, and the sign in bit 63:


Value (aka Fraction/Mantissa)
Exponent
Sign


52 bits (0 - 51) 
11 bits (52 - 62)
1 bit (63)



Integer Precision
Integers (numbers without a period or exponent notation) are accurate up to 15 digits.

Example

let x = 999999999999999;   // x will be 999999999999999
let y = 9999999999999999;  // y will be 10000000000000000

Try it Yourself »

The maximum number of decimals is 17.
Floating Precision

Floating point arithmetic is not always 100% accurate:

let x = 0.2 + 0.1;


Try it 
Yourself »



To solve the problem above, it helps to multiply and divide:

let x = (0.2 * 10 + 0.1 * 10) / 10;

Try it Yourself »








Adding Numbers and Strings

WARNING !!
JavaScript uses the + operator for both addition and concatenation.
Numbers are added. Strings are concatenated.

If you add two numbers, the result will be a number:

Example

let x = 10;
let y = 20;
let z = x + y;

Try it Yourself »

If you add two strings, the result will be a string concatenation:

Example

let x = ""10"";
let y = ""20"";
let z = x + y;

Try it Yourself »

If you add a number and a string, the result will be a string concatenation:

Example

let x = 10;
let y = ""20"";
let z = x + y;

Try it Yourself »

If you add a string and a number, the result will be a string concatenation:

Example

let x = ""10"";
let y = 20;
let z = x + y;

Try it Yourself »

A common mistake is to expect this result to be 30:

Example

let x = 10;
let y = 20;
let z = ""The result is: "" + x + y;

Try it Yourself »

A common mistake is to expect this result to be 102030:

Example

let x = 10;
let y = 20;
let z = ""30"";
let result = x + y + z;

Try it Yourself »


The JavaScript interpreter works from left to right.
First 10 + 20 is added because x and y are both numbers.
Then 30 + ""30"" is concatenated because z is a string.


Numeric Strings
JavaScript strings can have numeric content:


let x = 100;         // x is a number
let y = ""100"";       // y is a 
string

JavaScript will try to convert strings to numbers in all numeric operations:
This will work:


let x = ""100"";
let y = ""10"";
let z = x / y;


Try it Yourself »


This will also work:


let x = ""100"";
let y = ""10"";
let z = x * y;


Try it Yourself »


And this will work:


let x = ""100"";
let y = ""10"";
let z = x - y;


Try it Yourself »


But this will not work:


let x = ""100"";
let y = ""10"";
let z = x + y;


Try it Yourself »



In the last example JavaScript uses the + operator to concatenate the strings.


NaN - Not a Number
NaN is a JavaScript reserved word indicating that a number is not a legal number.
Trying to do arithmetic with a non-numeric string will result in NaN (Not a 
Number):

Example

let x = 100 / ""Apple"";


Try it Yourself »


However, if the string contains a numeric value , the result will be a 
number:

Example

let x = 100 / ""10"";

Try it Yourself »

You can use the global JavaScript function isNaN()
to find out if a value is a not a number:

Example

let x = 100 / ""Apple"";isNaN(x);

Try it Yourself »

Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:

Example

let x = NaN;
let y = 5;
let z = x + y;

Try it Yourself »

Or the result might be a concatenation like NaN5:

Example

let x = NaN;
let y = ""5"";
let z = x + y;

Try it Yourself »

NaN is a number: typeof NaN returns number:

Example

typeof NaN;

Try it Yourself »


Infinity
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest 
possible number.

Example

let myNumber = 2;
// Execute until Infinity
while (myNumber != Infinity) {
    myNumber = myNumber * myNumber;}

Try 
it Yourself »
Division by 0 (zero) also generates Infinity:

Example

let x =  2 / 0;
let y = -2 / 0;

Try it Yourself »

Infinity is a number: typeof Infinity returns number.

Example

 typeof Infinity;

Try it Yourself »


Hexadecimal
JavaScript interprets numeric constants as hexadecimal if they are preceded by 
0x.

Example

let x = 0xFF;

Try it Yourself »


Never write a number with a leading zero (like 07).Some JavaScript versions interpret 
numbers as octal if they are written with a leading zero.


By default, JavaScript displays numbers as base 10 decimals.
But you can use the toString() method to output numbers from base 2 
to base 36.
Hexadecimal is base 16. Decimal is base 10. 
Octal is base 8. Binary is base 2.

Example

let myNumber = 32;
myNumber.toString(10);
myNumber.toString(32);
myNumber.toString(16);
myNumber.toString(8);
myNumber.toString(2);

Try it Yourself »


JavaScript Numbers as Objects
Normally JavaScript numbers are primitive values created from literals:


let x = 123;


But numbers can also be defined as objects with the keyword new:


let y = new Number(123);



Example

let x = 123;
let y = new Number(123);

Try 
it Yourself »


Do not create Number objects.
The new keyword complicates the code and slows down execution speed.
Number Objects can produce unexpected results:


When using the == operator, x and y are equal:

let x = 500;
let y = new Number(500);

Try it Yourself »


When using the === operator, x and y are not equal.

let x = 500;
let y = new Number(500);

Try it Yourself »


Note the difference between (x==y) and (x===y).


(x == y) true or false?

let x = new Number(500);
let y = new Number(500);

Try it Yourself »


(x === y) true or false?

let x = new Number(500);
let y = new Number(500);

Try it Yourself »


Comparing two JavaScript objects always returns false.


Complete JavaScript Number Reference
For a complete Number reference, visit our:
Complete JavaScript Number Reference.
The reference contains descriptions and examples of all Number  properties and methods.


❮ Previous
Next ❯",js
55,https://www.w3schools.com/js/js_number_methods.asp,"JavaScript Number Methods

❮ Previous
Next ❯


Number methods help you work with numbers.

Number Methods and Properties
Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). 
But with JavaScript, methods and properties are also available to primitive 
values, because JavaScript treats primitive values as objects when executing 
methods and properties.

The toString() Method
The toString() method returns a number as a string.
All number methods can be used on any type of numbers (literals, variables, or expressions):

Example

let x = 123;
x.toString();
(123).toString();
(100 + 23).toString();

Try it Yourself »


The toExponential() Method
toExponential() returns a string, with a number rounded and written using exponential notation.
A parameter defines the number of characters behind the decimal point:

Example

let x = 9.656;
x.toExponential(2);
x.toExponential(4);
x.toExponential(6);

Try 
it Yourself »

The parameter is optional. If you don't specify it, JavaScript will not round the number.







The toFixed() Method
toFixed() returns a string, with the number 
written with a specified number of 
decimals:

Example

let x = 9.656;
x.toFixed(0);
x.toFixed(2);
x.toFixed(4);
x.toFixed(6);

Try 
it Yourself »

toFixed(2) is perfect for working with money.


The toPrecision() Method
toPrecision() returns a string, with a number written with a 
specified length:

Example

let x = 9.656;
x.toPrecision();
x.toPrecision(2);
x.toPrecision(4);
x.toPrecision(6);

Try it Yourself »


The valueOf() Method
valueOf() returns a number as a number.

Example

let x = 123;
x.valueOf();
(123).valueOf();
(100 + 23).valueOf();

Try it Yourself »

In JavaScript, a number can be a primitive value (typeof = number) or an 
object (typeof = object).
The valueOf() method is used internally in JavaScript to convert Number 
objects to primitive values.
There is no reason to use it in your code.

All JavaScript data types have a valueOf() and a toString() method.


Converting Variables to Numbers
There are 3 JavaScript methods that can be used 
to convert variables to numbers:

The Number() method
The parseInt() method
The parseFloat() method

These methods are not number methods, but global 
JavaScript methods.

Global JavaScript Methods
JavaScript global methods can be used on all JavaScript data types.
These are the most relevant methods, when working with numbers:


Method
Description


Number()
Returns a number, converted from its argument.


parseFloat()
Parses its argument and returns a floating point number


parseInt()
Parses its argument and returns an integer



The Number() Method
Number() can be used to convert JavaScript variables to numbers:

Example

Number(true);
Number(false);
Number(""10"");
Number(""  10"");
Number(""10  "");
Number("" 10  "");
Number(""10.33"");
Number(""10,33"");
Number(""10 33"");
Number(""John"");

Try it Yourself »


If the number cannot be converted, NaN (Not a Number) is returned.


The Number() Method Used on Dates
Number() can also convert a date to a number.

Example

Number(new Date(""1970-01-01""))

Try it Yourself »


The Number() method returns the number of milliseconds since 1.1.1970.


The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:

Example

Number(new Date(""1970-01-02""))

Try it Yourself »


Example

Number(new Date(""2017-09-30""))

Try it Yourself »


The parseInt() Method
parseInt() parses a string and returns a whole number. Spaces are 
allowed. Only the first number is returned:

Example

parseInt(""-10"");
parseInt(""-10.33"");
parseInt(""10"");
parseInt(""10.33"");
parseInt(""10 20 30"");
parseInt(""10 years"");
parseInt(""years 10"");

Try 
it Yourself »
If the number cannot be converted, NaN (Not a Number) is returned.

The parseFloat() Method
parseFloat() parses a string and returns a number. Spaces are 
allowed. Only the first number is returned:

Example

parseFloat(""10"");
parseFloat(""10.33"");
parseFloat(""10 20 30"");
parseFloat(""10 years"");
parseFloat(""years 10"");

Try 
it Yourself »
If the number cannot be converted, NaN (Not a Number) is returned.

Number Properties


Property
Description


MAX_VALUE
Returns the largest number possible in JavaScript


MIN_VALUE
Returns the smallest number possible in JavaScript


POSITIVE_INFINITY
Represents infinity (returned on overflow)


NEGATIVE_INFINITY
Represents negative infinity (returned on overflow)


NaN
Represents a ""Not-a-Number"" value



JavaScript MIN_VALUE and MAX_VALUE
MAX_VALUE returns the largest possible number in JavaScript.

Example

let x = Number.MAX_VALUE;

Try 
it Yourself »

MIN_VALUE returns the lowest possible number in JavaScript.

Example

let x = Number.MIN_VALUE;

Try 
it Yourself »


JavaScript POSITIVE_INFINITY

Example

let x = Number.POSITIVE_INFINITY;

Try 
it Yourself »

POSITIVE_INFINITY is returned on overflow:

Example

let x = 1 / 0;

Try 
it Yourself »


JavaScript NEGATIVE_INFINITY

Example

let x = Number.NEGATIVE_INFINITY;

Try 
it Yourself »

NEGATIVE_INFINITY is returned on overflow:

Example

let x = -1 / 0;

Try 
it Yourself »


JavaScript NaN - Not a Number

Example

let x = Number.NaN;

Try 
it Yourself »

NaN is a JavaScript reserved word indicating that a number is not a legal number.
Trying to do arithmetic with a non-numeric string will result in NaN (Not a 
Number):

Example

let x = 100 / ""Apple"";


Try it Yourself »



Number Properties Cannot be Used on Variables
Number properties belongs to the JavaScript's number object wrapper called Number.
These properties can only be accessed as Number.MAX_VALUE.
Using myNumber.MAX_VALUE, where myNumber is a variable, expression, 
or value, will return undefined:

Example

let x = 6;
x.MAX_VALUE

Try 
it Yourself »


Complete JavaScript Number Reference
For a complete Number reference, visit our:
Complete JavaScript Number Reference.
The reference contains descriptions and examples of all Number  properties and methods.


❮ Previous
Next ❯",js
56,https://www.w3schools.com/js/js_arrays.asp,"JavaScript Arrays

❮ Previous
Next ❯


An array is a special variable, which can hold more than one value:

const cars = [""Saab"", ""Volvo"", ""BMW""];

Try it Yourself »

Why Using an Array?
If you have a list of items (a list of car names, for example), storing the 
cars in single variables could look like this:


let car1 = ""Saab"";
let car2 = ""Volvo"";
let car3 = ""BMW"";

However, what if you want to loop through the cars and find a specific one? 
And what if you had not 3 cars, but 300?
The solution is an array!
An array can hold many values under a single name, and you can 
access the values by referring to an index number.

Creating an Array
Using an array literal is the easiest way to create a JavaScript Array.
Syntax: 

const array_name = [item1, item2, ...];       


It is a common practice to declare arrays with the const keyword.
Learn more about const with arrays in the chapter: JS Array Const.


Example

const cars = [""Saab"", ""Volvo"", ""BMW""];

Try it Yourself »

Spaces and line breaks are not important. A declaration can span multiple lines:

Example

const cars = [
  ""Saab"",
    ""Volvo"",
    ""BMW""
];
Try it Yourself »

You can also create an array, and then provide the elements:

Example

const cars = [];
cars[0]= ""Saab"";
cars[1]= ""Volvo"";
cars[2]= ""BMW"";

Try it Yourself »


Using the JavaScript Keyword new
The following example also creates an Array, and assigns values to it:

Example

const cars = new Array(""Saab"", ""Volvo"", ""BMW"");

Try it Yourself »


The two examples above do exactly the same.
There is no need to use new Array().
For simplicity, readability and execution speed, use the array literal method.








Accessing Array Elements
You access an array element by referring to the index number:


const cars = [""Saab"", ""Volvo"", ""BMW""];
let car = cars[0];

Try it Yourself »


Note: Array indexes start with 0.
[0] is the first element.
[1] is the second element.


Changing an Array Element
This statement changes the value of the first element in cars:


cars[0] = ""Opel"";



Example

const cars = [""Saab"", ""Volvo"", ""BMW""];
cars[0] = ""Opel"";

Try it Yourself »


Access the Full Array
With JavaScript, the full array can be accessed by referring to the array 
name:

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];
document.getElementById(""demo"").innerHTML = cars;

Try it Yourself »

Arrays are Objects
Arrays are a special type of objects. The typeof operator in JavaScript returns ""object"" for 
arrays.
But, JavaScript arrays are best described as arrays.
Arrays use numbers to access its ""elements"". In this 
example, person[0] 
returns John:

Array:

const person = [""John"", ""Doe"", 46];

Try it Yourself »

Objects use names to access its ""members"". In this example, 
person.firstName 
returns John:

Object:

const person = {firstName:""John"", lastName:""Doe"", age:46};

Try it Yourself »


Array Elements Can Be Objects
JavaScript variables can be objects. Arrays are special kinds of objects.
Because of this, you can have variables of different types in the 
same Array.
You can have objects in an Array. You can have functions in an Array. You can 
have arrays in an Array:

myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;


Array Properties and Methods
The real strength of JavaScript arrays are the built-in array properties and 
methods:


cars.length   // Returns the number of elements
cars.sort()   // Sorts the array


Array methods are covered in the next chapters.

The length Property
The length property of an array returns the length of an array (the number of array 
elements).

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let length = fruits.length;

Try it Yourself »


The length property is always one more than the highest array index.


Accessing the First Array Element

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let fruit = fruits[0];

Try it Yourself »


Accessing the Last Array Element

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let fruit = fruits[fruits.length - 1];

Try it Yourself »


Looping Array Elements
One way to loop through an array, is using a for loop:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let fLen = fruits.length;
let text = ""<ul>"";for (let i = 0; i < fLen; i++) {  text += ""<li>"" + fruits[i] + ""</li>"";}text 
  += ""</ul>"";

Try it Yourself »

You can also use the Array.forEach() function:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];

let text = ""<ul>"";fruits.forEach(myFunction);text += ""</ul>"";
function 
  myFunction(value) {  
 text += ""<li>"" + value + ""</li>"";}
Try it Yourself »


Adding Array Elements
The easiest way to add a new element to an array is using the push() method:

Example

const fruits = [""Banana"", ""Orange"", ""Apple""];
fruits.push(""Lemon"");  // Adds a new element (Lemon) to fruits
Try it Yourself »

New element can also be added to an array using the length property:

Example

const fruits = [""Banana"", ""Orange"", ""Apple""];
fruits[fruits.length] = ""Lemon"";  // Adds ""Lemon"" to fruits
Try it Yourself »


WARNING !
Adding elements with high indexes can create undefined ""holes"" in an array:


Example

const fruits = [""Banana"", ""Orange"", ""Apple""];
fruits[6] = ""Lemon"";  // Creates undefined ""holes"" in fruits
Try it Yourself »


Associative Arrays
Many programming languages support arrays with named indexes.
Arrays with named indexes are called associative 
arrays (or hashes).
JavaScript does not support arrays with named indexes.
In JavaScript, arrays always use numbered indexes.   

Example

const person = [];
person[0] = ""John"";
person[1] = ""Doe"";
person[2] = 46;
person.length;    // Will return 3
person[0];        // Will return ""John""
Try it Yourself »


WARNING !!
If you use named indexes, JavaScript will redefine the array to an object.
After that, some array methods and properties will produce incorrect 
results.


 Example:

const person = [];
person[""firstName""] = ""John"";
person[""lastName""] = ""Doe"";
person[""age""] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined
Try it Yourself »


The Difference Between Arrays and Objects
In JavaScript, arrays use numbered indexes.   
In JavaScript, objects use named indexes.

Arrays are a special kind of objects, with numbered indexes.


When to Use Arrays. When to use Objects.

JavaScript does not support associative arrays.
You should use objects when you want the element names to be 
strings (text).
You should use arrays when you want the element names to be
numbers.


JavaScript new Array()
JavaScript has a built in array constructor new Array().
But you can safely use [] instead.
These two different statements both create a new empty array named points:


const points = new Array();
const points = [];


These two different statements both create a new array containing 6 numbers:


const points = new Array(40, 100, 1, 5, 25, 10);
const points = [40, 100, 1, 5, 25, 10];

Try it Yourself »

The new keyword can produce some unexpected results:


// Create an array with three elements:
const points = new Array(40, 100, 1);

Try it Yourself »



// Create an array with two elements:
const points = new Array(40, 100);

Try it Yourself »



// Create an array with one element ???
const points = new Array(40);  

Try it Yourself »


A Common Error

const points = [40];
is not the same as:

const points = new Array(40);




// Create an array with one element:
const points = [40];

Try it Yourself »



// Create an array with 40 undefined elements:
const points = new Array(40);  

Try it Yourself »


How to Recognize an Array
A common question is: How do I know if a variable is an array?
The problem is that the JavaScript operator typeof returns 
""object"":


const fruits = [""Banana"", ""Orange"", ""Apple""];
let type = typeof fruits;

Try it Yourself »

The typeof operator returns object because a JavaScript array is an 
object. 
Solution 1:
To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method Array.isArray():


Array.isArray(fruits);

Try it Yourself »

Solution 2:
The instanceof operator returns true if an object is created 
by a given constructor:


const fruits = [""Banana"", ""Orange"", ""Apple""];
fruits instanceof Array;

Try it Yourself »


Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


Test Yourself With Exercises

Exercise:
Get the value ""Volvo"" from the cars array.


const cars = [""Saab"", ""Volvo"", ""BMW""];
let x = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",js
57,https://www.w3schools.com/js/js_array_methods.asp,"JavaScript Array Methods

❮ Previous
Next ❯


Converting Arrays to Strings
The JavaScript method toString() converts an array to a 
string of (comma separated) array values.

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
document.getElementById(""demo"").innerHTML = fruits.toString();

Result:

 Banana,Orange,Apple,Mango

Try it Yourself »

The join() method also joins all array elements into a string.
It behaves just like toString(), but in addition you can specify the separator:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
document.getElementById(""demo"").innerHTML = fruits.join("" * "");

Result:

 Banana * Orange * Apple * Mango
Try it Yourself »


Popping and Pushing
When you work with arrays, it is easy to remove elements and add 
new elements.
This is what popping and pushing is:
Popping items out of an array, or pushing 
items into an array.







JavaScript Array pop()
The pop() method removes the last element from an array: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.pop();

Try it Yourself »

The pop() method returns the value that was ""popped out"":

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let fruit = fruits.pop();

Try it Yourself »


JavaScript Array push()
The push() method adds a new element to an array (at the end):

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.push(""Kiwi"");

Try it Yourself »

The push() method returns the new array length:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let length = fruits.push(""Kiwi"");

Try it Yourself »

Shifting Elements
Shifting is equivalent to popping, but working on the first element instead of 
the last.

JavaScript Array shift()
The shift() method removes the first array element and ""shifts"" all 
other elements to a lower index.

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.shift();

Try it Yourself »

The shift() method returns the value that was ""shifted out"":

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
let fruit = fruits.shift();

Try it Yourself »


JavaScript Array unshift()
The unshift() method adds a new element to an array (at the beginning), and ""unshifts"" 
older elements: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.unshift(""Lemon"");

Try it Yourself »

The unshift() method returns the new array length.

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.unshift(""Lemon"");

Try it Yourself »


Changing Elements
Array elements are accessed using their index number:

Array indexes start with 0:
[0] is the first array element[1] is the second[2] is the third ...


Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits[0] = ""Kiwi"";

Try it Yourself »


JavaScript Array length
The length property provides an easy way to append a new element to an array:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits[fruits.length] = ""Kiwi"";

Try it Yourself »


JavaScript Array delete()

Warning !
Array elements can be deleted using the JavaScript operator delete.
Using delete leaves undefined holes in the 
array.
Use pop() or shift() instead.


Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
delete fruits[0];

Try it Yourself »


Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) 
existing arrays:

Example (Merging Two Arrays)

const myGirls = [""Cecilie"", ""Lone""];
const myBoys = [""Emil"", ""Tobias"", ""Linus""];

const myChildren = myGirls.concat(myBoys);

Try it Yourself »


The concat() method does not change the existing arrays. It always returns a new array.

The concat() method can take any number of array arguments:

Example (Merging Three Arrays)

const arr1 = [""Cecilie"", ""Lone""];
const arr2 = [""Emil"", ""Tobias"", ""Linus""];
const arr3 = [""Robin"", ""Morgan""];
const myChildren = arr1.concat(arr2, arr3);

Try it Yourself »

The concat() method can also take strings as arguments:

Example (Merging an Array with Values)

const arr1 = [""Emil"", ""Tobias"", ""Linus""];
const myChildren = arr1.concat(""Peter""); 
Try it Yourself »


Splicing and Slicing Arrays
The splice() method adds new items to an array.
The slice() method slices out a piece of an array.

JavaScript Array splice()
The splice() method can be used to add new items to an array: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.splice(2, 0, ""Lemon"", ""Kiwi"");

Try it Yourself »

The first parameter (2) defines the position where new elements should be 
added (spliced in).
The second parameter (0) defines how many elements should be
removed.
The rest of the parameters (""Lemon"" , ""Kiwi"") define the new elements to be
added.
The splice() method returns an array with the deleted items: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.splice(2, 2, ""Lemon"", ""Kiwi"");

Try it Yourself »


Using splice() to Remove Elements
With clever parameter setting, you can use splice() to remove elements without leaving 
""holes"" in the array: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.splice(0, 1);

Try it Yourself »

The first parameter (0) defines the position where new elements should be 
added (spliced in).
The second parameter (1) defines how many elements should be
removed.
The rest of the parameters are omitted. No new elements will be added.

JavaScript Array slice()
The slice() method slices out a piece of an array into a new 
array.
This example slices out a part of an array starting from array element 1 
(""Orange""):

Example

const fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];
const citrus = fruits.slice(1);

Try it Yourself »


Note
The slice() method creates a new array.
The slice() method does not remove any elements from the source array.

This example slices out a part of an array starting from array element 3 
(""Apple""):

Example

const fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];
const citrus = fruits.slice(3);

Try it Yourself »

The slice() method can take two arguments like slice(1, 3).
The method then selects elements from the start argument, and up to (but not 
including) the end argument.

Example

const fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];
const citrus = fruits.slice(1, 3);

Try it Yourself »

If the end argument is omitted, like in the first examples, the slice() 
method slices out the rest of the array.

Example

const fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""];
const citrus = fruits.slice(2);

Try it Yourself »


Automatic toString()
JavaScript automatically converts an array to a comma separated string when a 
primitive value is expected.
This is always the case when you try to output an array. 
These two examples will produce the same result:

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
document.getElementById(""demo"").innerHTML = fruits.toString();

Try it Yourself »


Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
document.getElementById(""demo"").innerHTML = fruits;

Try it Yourself »


Note
All JavaScript objects have a toString() method.


Finding Max and Min Values in an Array
There are no built-in functions for finding the highest 
or lowest value in a JavaScript array.
You will learn how you solve this problem in the next 
chapter of this tutorial.

Sorting Arrays
Sorting arrays are covered in the next chapter of this tutorial.

Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Array method to remove the last item of the fruits array.


const fruits = [""Banana"", ""Orange"", ""Apple""];
;



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
58,https://www.w3schools.com/js/js_array_sort.asp,"JavaScript Sorting Arrays

❮ Previous
Next ❯


Sorting an Array
The sort() method sorts an array alphabetically: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.sort();

Try it Yourself »


Reversing an Array
The reverse() method reverses the elements in an array.
You can use it to 
sort an array in descending order: 

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.sort();
fruits.reverse();

Try it Yourself »


Numeric Sort
By default, the sort() function sorts values as strings.
This works well for strings (""Apple"" comes before ""Banana"").
However, if numbers are sorted as strings, ""25"" is bigger than ""100"", 
because ""2"" is bigger than ""1"".
Because of this, the sort() method will produce incorrect result when sorting 
numbers.
You can fix this by providing a compare function:

Example

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});

Try it Yourself »

Use the same trick to sort an array descending:

Example

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});

Try it Yourself »








The Compare Function
The purpose of the compare function is to define an alternative sort 
order.
The compare function should return a negative, zero, or positive value, depending on 
the arguments:


function(a, b){return a - b}


When the sort() function compares two values, it sends the values to the 
compare function, and sorts the values according to the returned (negative, 
zero, positive) value.
If the result is negative a is sorted before
b.
If the result is positive b is sorted 
before a.
If the result is 0 no changes are done with the sort order of the two 
values.
Example:
The compare function compares all the values in the array, two values at a 
time (a, b).
When comparing 40 and 100, the sort() method calls the compare function(40, 100).
The function calculates 40 - 100 (a - b), and 
since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.
You can use this code snippet to experiment with numerically and 
alphabetically sorting:


 <button onclick=""myFunction1()"">Sort Alphabetically</button><button 
 onclick=""myFunction2()"">Sort Numerically</button><p id=""demo""></p>
<script>const points = [40, 100, 1, 5, 25, 10];
 document.getElementById(""demo"").innerHTML = points;function 
 myFunction1() {  points.sort();  document.getElementById(""demo"").innerHTML 
 = points;}function myFunction2() {  points.sort(function(a, b){return 
 a - b});  document.getElementById(""demo"").innerHTML = points;}
 </script>
Try it Yourself »


Sorting an Array in Random Order

Example

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return 0.5 - Math.random()});


Try it Yourself »



The Fisher Yates Method
The above example, array.sort(), is not accurate, it will favor some 
numbers over the others.
The most popular correct method, is called the Fisher Yates shuffle, and was 
introduced in data science as early as 1938!
In JavaScript the method can be translated to this:

Example

const points = [40, 100, 1, 5, 25, 10];
for (let i = points.length -1; i > 0; 
  i--) {  let j = Math.floor(Math.random() * i)  let k = points[i]  
  points[i] = points[j]  points[j] = k}

Try it Yourself »



Find the Highest (or Lowest) Array Value
There are no built-in functions for finding the max or min 
value in an array.
However, after you have sorted an array, you can use the 
index to obtain the highest and lowest values.
Sorting ascending:

Example

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
// now points[0] contains the lowest value
// and points[points.length-1] contains the highest value
Try it Yourself »

Sorting descending:

Example

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
// now points[0] contains the highest value
// and points[points.length-1] contains the lowest value
Try it Yourself »


Sorting a whole array is a very inefficient method if you only want to find the highest (or lowest) value.


Using Math.max() on an Array
You can use Math.max.apply to find the highest number in an array:

Example

function myArrayMax(arr) {
    return Math.max.apply(null, arr);}


Try it Yourself »


Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).

Using Math.min() on an Array
You can use Math.min.apply to find the lowest number in an array:

Example

function myArrayMin(arr) {
  return Math.min.apply(null, arr);}


Try it Yourself »


Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).

My Min / Max JavaScript Methods
The fastest solution is to use a ""home made"" method.
This function loops through an array comparing each value with the highest 
value found: 

Example (Find Max)

function myArrayMax(arr) {
  let len = arr.length;
  let max = -Infinity;
  while (len--) {
        
  if (arr[len] > max) {      
  max = arr[len];    }  }  return max;}

Try it Yourself »


This function loops through an array comparing each value with the lowest 
value found: 

Example (Find Min)

  function myArrayMin(arr) {  let len = arr.length;  let min = Infinity;  while (len--) {    
  if (arr[len] < min) {      
  min = arr[len];    }  }  return min;}

Try it Yourself »



Sorting Object Arrays
JavaScript arrays often contain objects:

Example

const cars = [
  
 {type:""Volvo"", year:2016},
  
 {type:""Saab"", year:2001},
  
 {type:""BMW"", year:2010}];

Even if objects have properties of different data types, the sort() method 
can be used to sort the array. 
The solution is to write a compare function to compare the property values:

Example

 cars.sort(function(a, b){return a.year - b.year});
Try it Yourself »

Comparing string properties is a little more complex:

Example

cars.sort(function(a, b){
  let x = a.type.toLowerCase();
  let y = b.type.toLowerCase();
    if (x < y) {return -1;}  
 if (x > y) {return 1;}  return 0;});
Try it Yourself »


Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Array method to sort the fruits array alphabetically.


const fruits = [""Banana"", ""Orange"", ""Apple"", ""Kiwi""];
;



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
59,https://www.w3schools.com/js/js_array_iteration.asp,"JavaScript Array Iteration

❮ Previous
Next ❯


Array iteration methods operate on every array item.

JavaScript Array forEach()
The forEach() method calls a function (a callback function) once for each array element.

Example

const numbers = [45, 4, 9, 16, 25];
let txt = """";
numbers.forEach(myFunction);
function myFunction(value, index, array) {
   
txt += value + ""<br>"";
}

Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself

The example above uses only the value parameter. The example can be rewritten 
to:

Example

const numbers = [45, 4, 9, 16, 25];
let txt = """";
numbers.forEach(myFunction);
function myFunction(value) {
   
txt += value + ""<br>""; 
}

Try it Yourself »


JavaScript Array map()
The map() method creates a new array by performing a function on each array element.
The map() method does not execute the function for array 
elements without values.
The map() method does not change the original array.
This example multiplies each array value by 2: 

Example

const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

function myFunction(value, index, array) {
    return value * 2;
}

Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself

When a callback function uses only the value parameter, the index and array 
parameters can be omitted: 

Example

const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);

function myFunction(value) {
    return value * 2;
}

Try it Yourself »








JavaScript Array filter()
The filter() method creates a new array with array elements that passes a test.
This example creates a new array from elements with a value larger than 18:

Example

const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {  return value > 18;} 
Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself

In the example above, the callback function does not use the index and array 
parameters, so they can be omitted:

Example

const numbers = [45, 4, 9, 16, 25];
const over18 = 
  numbers.filter(myFunction);function myFunction(value) {  return value > 18;} 
Try it Yourself »


JavaScript Array reduce()
The reduce() method runs a function on each array element to produce (reduce it to) a single value.
The reduce() method works from left-to-right in the array. See also reduceRight().

The reduce() method does not reduce the original array.

This example finds the sum of all numbers in an array:

Example

const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value, index, array) {  
  return total + value;} 
Try it Yourself »

Note that the function takes 4 arguments:

The total (the initial value / previously returned value)
The item value
The item index 
The array itself

The example above does not use the index and array parameters. It can be 
rewritten to:

Example

const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value) {  
  return total + value;} 
Try it Yourself »

The reduce() method can accept an initial value:

Example

const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 
  100);
function myFunction(total, value) {  return total + value;} 
Try it Yourself »


JavaScript Array reduceRight()
The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.
The reduceRight() works from right-to-left in the array. See also reduce().

The reduceRight() method does not reduce the original array.

This example finds the sum of all numbers in an array:

Example

const numbers = [45, 4, 9, 16, 25];
let sum = numbers1.reduceRight(myFunction);
function myFunction(total, value, index, array) {  
  return total + value;} 
Try it Yourself »

Note that the function takes 4 arguments:

The total (the initial value / previously returned value)
The item value
The item index 
The array itself

The example above does not use the index and array parameters. It can be 
rewritten to:

Example

const numbers = [45, 4, 9, 16, 25];
let sum = numbers1.reduceRight(myFunction);
function myFunction(total, value) {  return total + value;} 
Try it Yourself »


JavaScript Array every()
The every() method check if all array values pass a test.
This example check if all array values are larger than 18:

Example

const numbers = [45, 4, 9, 16, 25];
let allOver18 = 
  numbers.every(myFunction);function myFunction(value, index, array) {
    return 
  value > 18;} 
Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself

When a callback function uses the first parameter only (value), the other 
parameters can be omitted:

Example

const numbers = [45, 4, 9, 16, 25];
let allOver18 = 
  numbers.every(myFunction);function myFunction(value) {  return 
  value > 18;} 
Try it Yourself »


JavaScript Array some()
The some() method check if some array values pass a test.
This example check if some array values are larger than 18:

Example

const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);function myFunction(value, index, array) {
    return 
  value > 18;} 
Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself


JavaScript Array indexOf()
The indexOf() method searches an array for an element value and returns its position.

Note: The first item has position 0, the second item has position 1, and so on.


Example
Search an array for the item ""Apple"":

const fruits = [""Apple"", ""Orange"", ""Apple"", ""Mango""];
let position = fruits.indexOf(""Apple"") + 1;

Try it Yourself »

Syntax


array.indexOf(item, start)




item
Required. The item to search for.


start
Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the end.


Array.indexOf() returns -1 if the item is not found.
If the item is present more than once, it returns the position of the first 
occurrence.

JavaScript Array lastIndexOf()
Array.lastIndexOf() is the same as Array.indexOf(), but 
returns the position of the last occurrence of the specified element.

Example
Search an array for the item ""Apple"":

const fruits = [""Apple"", ""Orange"", ""Apple"", ""Mango""];
let position = fruits.lastIndexOf(""Apple"") + 1;

Try it Yourself »

Syntax

array.lastIndexOf(item, start)


item
Required. The item to search for


start
Optional. Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning



JavaScript Array find()
The find() method returns the value of the first array element that passes a 
test function.
This example finds (returns the value of) the first element that is larger 
than 18:

Example

const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.find(myFunction);function myFunction(value, index, array) {  return 
  value > 18;} 
Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself


Browser Support
find() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



find() is not supported in Internet Explorer.

JavaScript Array findIndex()
The findIndex() method returns the index of the first array element that 
passes a test function.
This example finds the index of the first element that is larger than 18:

Example

const numbers = [4, 9, 16, 25, 29];
let first = 
  numbers.findIndex(myFunction);function myFunction(value, index, array) {
    return 
  value > 18;} 
Try it Yourself »

Note that the function takes 3 arguments:

The item value
The item index 
The array itself


Browser Support
findIndex() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



findIndex() is not supported in Internet Explorer.



JavaScript Array.from()
The Array.from() method returns an Array object from any object with a length 
property or any iterable object.

Example
Create an Array from a String:

Array.from(""ABCDEFG"");

Try it Yourself »


Browser Support
from() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



from() is not supported in Internet Explorer.

JavaScript Array Keys()
The Array.keys() method returns an Array Iterator object with the keys of an array.

Example
Create an Array Iterator object, containing the keys of the array:

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
const keys = fruits.keys();
for (let x of keys) {
  text += x + ""<br>"";}

Try it Yourself »


Browser Support
keys() is an ES6  feature (JavaScript 2015).
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



keys() is not supported in Internet Explorer.

JavaScript Array includes()
ECMAScript 2016 introduced Array.includes() to arrays.
This allows us to check if an element is present in an array (including NaN, unlike indexOf).

Example

const fruits = [""Banana"", ""Orange"", ""Apple"", ""Mango""];
fruits.includes(""Mango""); // is true

Try it Yourself »

Syntax

array.includes(search-item)


Array.includes() allows to check for NaN values. Unlike Array.indexOf().

Array.includes() is not supported in Internet Explorer and Edge 12/13.
The first browser versions with full support are:

Browser Support
includes() is an ECMAScript 2016 feature.
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



includes() is not supported in Internet Explorer.


Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


❮ Previous
Next ❯",js
60,https://www.w3schools.com/js/js_array_const.asp,"googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });


JavaScript Array Const

❮ Previous
Next ❯


ECMAScript 2015 (ES6)
in 2015, JavaScript introduced an important new keyword: const.
It has become a common practice to declare arrays using const:

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];

Try it Yourself »


Cannot be Reassigned
An array declared with const cannot be reassigned:

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];
cars = [""Toyota"", ""Volvo"", ""Audi""];    // ERROR

Try it Yourself »


Arrays are Not Constants
The keyword const is a little misleading.
It does NOT define a constant array. It defines a constant reference to an array.
Because of this, we can still change the elements of a constant array.

Elements Can be Reassigned
You can change the elements of a constant array:

Example

// You can create a constant array:
const cars = [""Saab"", ""Volvo"", ""BMW""];
// You can change an element:
cars[0] = ""Toyota"";
// You can add an element:
cars.push(""Audi"");

Try it Yourself »


Browser Support
The const keyword is not supported in Internet Explorer 10 or earlier.
The following table defines the first browser versions with full support for the const keyword: 










Chrome 49
IE 11 / Edge
Firefox 36
Safari 10
Opera 36


Mar, 2016
Oct, 2013
Feb, 2015
Sep, 2016
Mar, 2016




Assigned when Declared
JavaScript const variables must be assigned a value when they are declared:
Meaning: An arrays declared with const must be initialized when it is declared.
Using const without initializing the array is a syntax 
error:

Example
This will not work:

const cars;
cars = [""Saab"", ""Volvo"", ""BMW""];


Arrays declared with var can be initialized at any time.
You can even use the array before it is declared:

Example
This is OK:

cars = [""Saab"", ""Volvo"", ""BMW""];
var cars;

Try it Yourself »


Const Block Scope
An array declared with const has Block Scope.
An array declared in a block is not the same as an array declared outside the block:

Example

const cars = [""Saab"", ""Volvo"", ""BMW""];
// Here cars[0] is ""Saab""
{
  const cars = [""Toyota"", ""Volvo"", ""BMW""]; 
  // Here cars[0] is ""Toyota""
}
// Here cars[0] is ""Saab""

Try it Yourself »

An array declared with var does not have block scope:

Example

var cars = [""Saab"", ""Volvo"", ""BMW""];
// Here cars[0] is ""Saab""
{
  var cars = [""Toyota"", ""Volvo"", ""BMW""]; 
  // Here cars[0] is ""Toyota""
}
// Here cars[0] is ""Toyota""

Try it Yourself »

You can learn more about Block Scope in the chapter: JavaScript Scope.






    googletag.cmd.push(function() { googletag.display('div-gpt-ad-1493883843099-0'); });
    



Redeclaring Arrays
Redeclaring an array declared with var is allowed anywhere in a program:

Example

var cars = [""Volvo"", ""BMW""];   // Allowed
var cars = [""Toyota"", ""BMW""];  // Allowed
cars = [""Volvo"", ""Saab""];      // Allowed


Redeclaring or reassigning an array to const, in the same scope, or in 
the same block, is not allowed:

Example

var cars = [""Volvo"", ""BMW""];     // Allowed
const cars = [""Volvo"", ""BMW""];   // Not allowed
{
  var cars = [""Volvo"", ""BMW""];   // Allowed
  const cars = [""Volvo"", ""BMW""]; // Not allowed
}


Redeclaring or reassigning an existing const array, in the same scope, or in 
the same block, is not allowed:

Example

const cars = [""Volvo"", ""BMW""];   // Allowed
const cars = [""Volvo"", ""BMW""];   // Not allowed
var cars = [""Volvo"", ""BMW""];     // Not allowed
cars = [""Volvo"", ""BMW""];         // Not allowed

{
  const cars = [""Volvo"", ""BMW""]; // Allowed
  const cars = [""Volvo"", ""BMW""]; // Not allowed
  var cars = [""Volvo"", ""BMW""];   // Not allowed
  cars = [""Volvo"", ""BMW""];       // Not allowed
}


Redeclaring an array with const, in another scope, or in another block, is allowed:

Example

const cars = [""Volvo"", ""BMW""];   // Allowed
{
  const cars = [""Volvo"", ""BMW""]; // Allowed
}
{
  const cars = [""Volvo"", ""BMW""]; // Allowed
}



Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


❮ Previous
Next ❯",js
61,https://www.w3schools.com/js/js_dates.asp,"JavaScript Date Objects

❮ Previous
Next ❯


xxx=new Date()
JavaScript Date Object lets us work with dates:
document.write(xxx)

Year: document.write(xxx.getFullYear())
Month: document.write(xxx.getMonth()+1)
Day: document.write(xxx.getDate())
Hours: document.write(xxx.getHours())
Minutes: document.write(xxx.getMinutes())
Seconds: document.write(xxx.getSeconds())


Example

const d = new Date();

Try it Yourself »


JavaScript Date Output
By default, JavaScript will use the browser's time zone and display a date as a full text string:
document.write(xxx)

You will learn much more about how to display dates, later in this tutorial.


Creating Date Objects
Date objects are created with the 
new Date() constructor.
There are 4 ways to create a new date object:


new Date()new Date(year, month, day, hours, minutes, seconds, milliseconds)
  new Date(milliseconds)
new Date(date string)



new Date()
new Date() creates a new date object with the current date and time:

Example

const d = new Date();

Try it Yourself »


Date objects are static. The computer time is ticking, but date objects are not.


new Date(year, month, ...)
new Date(year, month, ...) creates a new date object with a specified date and time.
7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):

Example

const d = new Date(2018, 11, 24, 10, 33, 30, 0);

Try it Yourself »


Note: JavaScript counts months from 0 to 11:
January = 0.
December = 11.

Specifying a month higher than 11, will not result in an error but add the overflow to the next year:

Specifying:

const d = new Date(2018, 15, 24, 10, 33, 30);

Is the same as:

const d = new Date(2019, 3, 24, 10, 33, 30);

Try it Yourself »

Specifying a day higher than max, will not result in an error but add the overflow to the next month:

Specifying:

const d = new Date(2018, 5, 35, 10, 33, 30);

Is the same as:

const d = new Date(2018, 6, 5, 10, 33, 30);

Try it Yourself »


Using 6, 4, 3, or 2 Numbers
6 numbers specify year, month, day, hour, minute, second:

Example

const d = new Date(2018, 11, 24, 10, 33, 30);

Try it Yourself »

5 numbers specify year, month, day, hour, and minute:

Example

const d = new Date(2018, 11, 24, 10, 33);

Try it Yourself »

4 numbers specify year, month, day, and hour:

Example

const d = new Date(2018, 11, 24, 10);

Try it Yourself »

3 numbers specify year, month, and day:

Example

const d = new Date(2018, 11, 24);

Try it Yourself »

2 numbers specify year and month:

Example

const d = new Date(2018, 11);

Try it Yourself »


You cannot omit month. If you supply only one parameter it will be treated as milliseconds.


Example

const d = new Date(2018);

Try it Yourself »


Previous Century
One and two digit years will be interpreted as 19xx:

Example

const d = new Date(99, 11, 24);

Try it Yourself »


Example

const d = new Date(9, 11, 24);

Try it Yourself »


new Date(dateString)
new Date(dateString) creates a new date object from a date string:

Example

const d = new Date(""October 13, 2014 11:13:00"");

Try it Yourself »


Date strings are described in the next chapter.


JavaScript Stores Dates as Milliseconds
JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).

Zero time is January 01, 1970 00:00:00 UTC.

Now the time is: document.write(xxx.getTime()) milliseconds past January 01, 1970

new Date(milliseconds)
new Date(milliseconds) creates a new date object as zero time plus milliseconds:

Example

const d = new Date(0);

Try it Yourself »

01 January 1970 plus 100 000 000 000 milliseconds is approximately 03 March 1973:

Example

const d = new Date(100000000000);

Try it Yourself »

January 01 1970 minus 100 000 000 000 milliseconds is approximately October 31 1966:

Example

const d = new Date(-100000000000);

Try it Yourself »


Example

const d = new Date(86400000);

Try it Yourself »


One day (24 hours) is 86 400 000 milliseconds.








Date Methods
When a Date object is created, a number of methods allow you to operate on 
it.
Date methods allow you to get and set the year, month, day, hour, 
minute, second, and millisecond of date objects, using either local time or UTC 
(universal, or GMT) time.

Date methods and time zones are covered in the next chapters.


Displaying Dates
JavaScript will (by default) output dates in full text string format:

Example

document.write(new Date())


Try it Yourself »

When you display a date object in HTML, it is automatically converted to a 
string, with the toString() method.

Example

const d = new Date();
d.toString();

Try it Yourself »

The toUTCString() method converts a date to a UTC string (a date display 
standard).

Example

const d = new Date();
d.toUTCString();

Try it Yourself »

The toDateString() method converts a date to a more readable 
format:

Example

const d = new Date();
d.toDateString();

Try it Yourself »

The toISOString() method converts a Date object to a string, using the ISO standard format:

Example

const d = new Date();
d.toISOString();

Try it Yourself »


Complete JavaScript Date Reference
For a complete Date reference, go to our:
Complete JavaScript Date Reference.
The reference contains descriptions and examples of all Date properties and 
methods.


❮ Previous
Next ❯",js
62,https://www.w3schools.com/js/js_date_formats.asp,"JavaScript Date Formats

❮ Previous
Next ❯


JavaScript Date Input
There are generally 3 types of JavaScript date input formats:


Type
Example


ISO Date
""2015-03-25""  (The International Standard)


Short Date
""03/25/2015""


Long Date
""Mar 25 2015"" or ""25 Mar 2015""



The ISO format follows a strict standard in JavaScript.
The other formats are not 
 so well defined and might be browser specific.


JavaScript Date Output
Independent of input format, JavaScript will (by default) output dates in full 
text string format:


document.write(new Date())




JavaScript ISO Dates
ISO 8601 is the international standard for the representation of dates and 
times.
The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:

Example (Complete date)

const d = new Date(""2015-03-25"");

Try it Yourself »


The computed date will be relative to your time zone.Depending on your time zone, the result above 
will vary between March 24 and March 25.








ISO Dates (Year and Month)
ISO dates can be written without specifying the day (YYYY-MM):

Example

const d = new Date(""2015-03"");

Try it Yourself »


Time zones will vary the result above between February 28 and March 01.


ISO Dates (Only Year)
ISO dates can be written without month and day (YYYY):

Example

const d = new Date(""2015"");

Try it Yourself »


Time zones will vary the result above between December 31 2014 and January 01 2015.


ISO Dates (Date-Time)
ISO dates can be written with added hours, minutes, and seconds 
(YYYY-MM-DDTHH:MM:SSZ):

Example

const d = new Date(""2015-03-25T12:00:00Z"");

Try it Yourself »

Date and time is separated with a capital T.
UTC time is defined with a capital letter Z.
If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM 
instead: 

Example

const d = new Date(""2015-03-25T12:00:00-06:30"");

Try it Yourself »


UTC (Universal Time Coordinated)  is the same as GMT (Greenwich Mean Time).


Omitting T or Z in a date-time string can give different results in different browsers.


Time Zones
When setting a date, without specifying the time zone, JavaScript will use 
the browser's time zone.
When getting a date, without specifying the time zone, the result is 
converted to the browser's time zone.
In other words: If a date/time is created in GMT (Greenwich Mean Time), the 
date/time will be converted to CDT (Central US Daylight Time) if a user browses 
from central US.

JavaScript Short Dates.
Short dates are written with an ""MM/DD/YYYY"" syntax like this:

Example

const d = new Date(""03/25/2015"");
Try it Yourself »


WARNINGS !

In some browsers, months or days with no leading zeroes may produce an error: 

const d = new Date(""2015-3-25"");



The behavior of ""YYYY/MM/DD"" is undefined.Some browsers will 
try to guess the format. Some will return NaN.

const d = new Date(""2015/03/25"");


The behavior of  ""DD-MM-YYYY"" is also undefined.Some browsers will 
try to guess the format. Some will return NaN.

const d = new Date(""25-03-2015"");



JavaScript Long Dates.
Long dates are most often written with a ""MMM DD YYYY"" syntax like this: 

Example

const d = new Date(""Mar 25 2015"");

Try it Yourself »

Month and day can be in any order:

Example

const d = new Date(""25 Mar 2015"");

Try it Yourself »

And, month can be written in full (January), or abbreviated (Jan):

Example

const d = new Date(""January 25 2015"");

Try it Yourself »


Example

const d = new Date(""Jan 25 2015"");

Try it Yourself »

Commas are ignored. Names are case insensitive:

Example

const d = new Date(""JANUARY, 25, 2015"");

Try it Yourself »


Date Input - Parsing Dates
If you have a valid date string, you can use the 
Date.parse() method to convert it to milliseconds.
Date.parse() returns the number of milliseconds between the date and January 
1, 1970:

Example

let msec = Date.parse(""March 21, 2012"");

Try it Yourself »

You can then use the number of milliseconds to convert it to a date object:

Example

let msec = Date.parse(""March 21, 2012"");
const d = new Date(msec);

Try it Yourself »


Complete JavaScript Date Reference
For a complete Date reference, go to our:
Complete JavaScript Date Reference.
The reference contains descriptions and examples of all Date properties and 
methods.


❮ Previous
Next ❯",js
63,https://www.w3schools.com/js/js_date_methods.asp,"JavaScript Get Date Methods

❮ Previous
Next ❯


These methods can be used for getting information from a date object:


Method
Description


getFullYear()
Get the year as a four digit number (yyyy)


getMonth()
Get the month as a number (0-11)


getDate()
Get the day as a number (1-31)


getHours()
Get the hour (0-23)


getMinutes()
Get the minute (0-59)


getSeconds()
Get the second (0-59)


getMilliseconds()
Get the millisecond (0-999)


getTime()
Get the time (milliseconds since January 1, 1970)


getDay()
Get the weekday as a number (0-6)


Date.now()
Get the time. ECMAScript 5.



The getTime() Method
The getTime() method returns the number of milliseconds since January 1, 1970:

Example

const d = new Date();
d.getTime();

Try it Yourself »


The getFullYear() Method
The getFullYear() method returns the year of a date as a four digit number:

Example

const d = new Date();
d.getFullYear();

Try it Yourself »








The getMonth() Method
The getMonth() method returns the month of a date as a number (0-11):

Example

const d = new Date();
d.getMonth();

Try it Yourself »


In JavaScript, the first month (January) is month number 0, so December returns month number 11.

You can use an array of names, and getMonth() to return the month as a name:

Example

const months = [""January"", ""February"", ""March"", ""April"", ""May"",
""June"", ""July"", ""August"", ""September"", ""October"",
""November"", ""December""];

const d = new Date();
let month = months[d.getMonth()];

Try it Yourself »


The getDate() Method
The getDate() method returns the day of a date as a number (1-31):

Example

const d = new Date();
d.getDate();

Try it Yourself »


The getHours() Method
The getHours() method returns the hours of a date as a number (0-23):

Example

const d = new Date();
d.getHours();

Try it Yourself »


The getMinutes() Method
The getMinutes() method returns the minutes of a date as a number (0-59):

Example

const d = new Date();
d.getMinutes();

Try it Yourself »


The getSeconds() Method
The getSeconds() method returns the seconds of a date as a number (0-59):

Example

const d = new Date();
d.getSeconds();

Try it Yourself »


The getMilliseconds() Method
The getMilliseconds() method returns the milliseconds of a date as a number (0-999):

Example

const d = new Date();
d.getMilliseconds();

Try it Yourself »


The getDay() Method
The getDay() method returns the weekday of a date as a number (0-6):

Example

const d = new Date();
d.getDay();

Try it Yourself »


In JavaScript, the first day of the week (0) means ""Sunday"", even if some countries 
in the world consider the first day of the week to be ""Monday""

You can use an array of names, and getDay() to return the weekday as a name:

Example

const days = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"",
""Thursday"", ""Friday"", ""Saturday""];

const d = new Date();
let day = days[d.getDay()];

Try it Yourself »


UTC Date Methods
UTC date methods are used for working with UTC dates (Universal Time Zone dates):


Method
Description


getUTCDate()
Same as getDate(), but returns the UTC date


getUTCDay()
Same as getDay(), but returns the UTC day


getUTCFullYear()
Same as getFullYear(), but returns the UTC year


getUTCHours()
Same as getHours(), but returns the UTC hour


getUTCMilliseconds()
Same as getMilliseconds(), but returns the UTC milliseconds


getUTCMinutes()
Same as getMinutes(), but returns the UTC minutes


getUTCMonth()
Same as getMonth(), but returns the UTC month


getUTCSeconds()
Same as getSeconds(), but returns the UTC seconds



Complete JavaScript Date Reference
For a complete Date reference, go to our:
Complete JavaScript Date Reference.
The reference contains descriptions and examples of all Date properties and 
methods.


Test Yourself With Exercises

Exercise:
Use the correct Date method to get the month (0-11) out of a date object.


const d = new Date();
month = ;



Submit Answer »
Start the Exercise




❮ Previous
Next ❯",js
64,https://www.w3schools.com/js/js_date_methods_set.asp,"JavaScript Set Date Methods

❮ Previous
Next ❯


Set Date methods let you set date values (years, 
months, days, hours, minutes, seconds, milliseconds) for a Date Object.

Set Date Methods
Set Date methods are used for setting a part of a date:


Method
Description


setDate()
Set the day as a number (1-31)


setFullYear()
Set the year (optionally month and day)


setHours()
Set the hour (0-23)


setMilliseconds()
Set the milliseconds (0-999)


setMinutes()
Set the minutes (0-59)


setMonth()
Set the month (0-11)


setSeconds()
Set the seconds (0-59)


setTime()
Set the time (milliseconds since January 1, 1970)



The setFullYear() Method
The setFullYear() method sets the year of a date object. In this example to 2020:

Example

const d = new Date();
d.setFullYear(2020);

Try it Yourself »

The setFullYear() method can optionally set month and day:

Example

const d = new Date();
d.setFullYear(2020, 11, 3);

Try it Yourself »








The setMonth() Method
The setMonth() method sets the month of a date object (0-11):

Example

const d = new Date();
d.setMonth(11);

Try it Yourself »

The setDate() Method
The setDate() method sets the day of a date object (1-31):

Example

const d = new Date();
d.setDate(15);

Try it Yourself »

The setDate() method can also be used to add days to a date:

Example

const d = new Date();
d.setDate(d.getDate() + 50);

Try it Yourself »


If adding days shifts the month or year, the changes are handled automatically by the Date object.


The setHours() Method
The setHours() method sets the hours of a date object (0-23):

Example

const d = new Date();
d.setHours(22);

Try it Yourself »


The setMinutes() Method
The setMinutes() method sets the minutes of a date object (0-59):

Example

const d = new Date();
d.setMinutes(30);

Try it Yourself »


The setSeconds() Method
The setSeconds() method sets the seconds of a date object (0-59):

Example

const d = new Date();
d.setSeconds(30);

Try it Yourself »


Compare Dates
Dates can easily be compared.
The following example compares today's date with January 14, 2100:

Example

let text = """";
const today = new Date();
const someday = new Date();
 someday.setFullYear(2100, 0, 14);if (someday > today) {  text = ""Today is before January 14, 2100."";} else {
    text = ""Today is after January 14, 2100."";}

Try it Yourself »


JavaScript counts months from 0 to 11. January is 0. December is 11.


Complete JavaScript Date Reference
For a complete Date reference, go to our:
Complete JavaScript Date Reference.
The reference contains descriptions and examples of all Date properties and 
methods.


Test Yourself With Exercises

Exercise:
Use the correct Date method to set the year of a date object to 2020.


const d = new Date();
d.;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",js
66,https://www.w3schools.com/python/default.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
67,https://www.w3schools.com/python/python_intro.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
68,https://www.w3schools.com/python/python_getstarted.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
69,https://www.w3schools.com/python/python_syntax.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
70,https://www.w3schools.com/python/python_comments.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
71,https://www.w3schools.com/python/python_variables.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
72,https://www.w3schools.com/python/python_variables.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
73,https://www.w3schools.com/python/python_variables_names.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
74,https://www.w3schools.com/python/python_variables_multiple.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
75,https://www.w3schools.com/python/python_variables_output.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
76,https://www.w3schools.com/python/python_variables_global.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
77,https://www.w3schools.com/python/python_variables_exercises.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
78,https://www.w3schools.com/python/python_datatypes.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
79,https://www.w3schools.com/python/python_numbers.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
80,https://www.w3schools.com/python/python_casting.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
81,https://www.w3schools.com/python/python_strings.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
82,https://www.w3schools.com/python/python_strings.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
83,https://www.w3schools.com/python/python_strings_slicing.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
84,https://www.w3schools.com/python/python_strings_modify.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
85,https://www.w3schools.com/python/python_strings_concatenate.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
86,https://www.w3schools.com/python/python_strings_format.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
87,https://www.w3schools.com/python/python_strings_escape.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
88,https://www.w3schools.com/python/python_strings_methods.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
89,https://www.w3schools.com/python/python_strings_exercises.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
90,https://www.w3schools.com/python/python_booleans.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
91,https://www.w3schools.com/python/python_operators.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
92,https://www.w3schools.com/python/python_lists.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
93,https://www.w3schools.com/python/python_lists.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
94,https://www.w3schools.com/python/python_lists_access.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
95,https://www.w3schools.com/python/python_lists_change.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
96,https://www.w3schools.com/python/python_lists_add.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
97,https://www.w3schools.com/python/python_lists_remove.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python
98,https://www.w3schools.com/python/python_lists_loop.asp,"JavaScript Math Object

❮ Previous
Next ❯


The JavaScript Math object allows you to perform mathematical tasks on 
numbers.


Example

Math.PI;

Try it Yourself »


The Math Object
Unlike other objects, the Math object has no constructor.
The Math object is static.
All methods and properties can be used without creating a Math object first.

Math Properties (Constants)
The syntax for any Math property is : Math.property.
JavaScript provides 8 mathematical constants that can be accessed as Math properties:

Example

Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Try it Yourself »


Math Methods
The syntax for Math any methods is : Math.method(number)

Number to Integer
There are 4 common methods to round a number to an integer:

Math.round(x)Returns x rounded to its nearest integer
Math.ceil(x)Returns x rounded up to its nearest integer
Math.floor(x)Returns x rounded down to its nearest integer
Math.trunc(x)Returns the integer part of x (new in ES6)


Math.round()
Math.round(x) returns the nearest integer:

Examples

Math.round(4.6);

Try it Yourself »

Math.round(4.5);

Try it Yourself »

Math.round(4.4);

Try it Yourself »


Math.ceil()
Math.ceil(x) returns the value of x rounded up to its nearest integer:

Example

Math.ceil(4.9);
Math.ceil(4.7);
Math.ceil(4.4);
Math.ceil(4.2);
Math.ceil(-4.2);

Try it Yourself »


Math.floor()
Math.floor(x) returns the value of x rounded down to its nearest integer:

Example

Math.floor(4.9);
Math.floor(4.7);
Math.floor(4.4);
Math.floor(4.2);
Math.floor(-4.2);

Try it Yourself »


Math.trunc()
Math.trunc(x) returns the integer part of x:

Example

Math.trunc(4.9);
Math.trunc(4.7);
Math.trunc(4.4);
Math.trunc(4.2);
Math.trunc(-4.2);

Try it Yourself »


Math.sign()
Math.sign(x) returns if x is negative, null or positive:

Example

Math.sign(-4);
Math.sign(0);
Math.sign(4);

Try it Yourself »


Math.trunc() and Math.sign() were added to JavaScript 2015 - ES6.








Math.pow()
Math.pow(x, y) returns the value of x to the power of y:

Example

Math.pow(8, 2);

Try it Yourself »


Math.sqrt()
Math.sqrt(x) returns the square root of x:

Example

Math.sqrt(64);

Try it Yourself »


Math.abs()
Math.abs(x) returns the absolute (positive) value of x:

Example

Math.abs(-4.7);

Try it Yourself »


Math.sin()
Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)

Try it Yourself »


Math.cos()
Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).
If you want to use degrees instead of radians, you have to convert degrees to radians:
Angle in radians = Angle in degrees x PI / 180.

Example

Math.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)

Try it Yourself »


Math.min() and Math.max()
Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:

Example

Math.min(0, 150, 30, 20, -8, -200);

Try it Yourself »


Example

Math.max(0, 150, 30, 20, -8, -200);

Try it Yourself »


Math.random()
Math.random() returns a random number between 0 (inclusive), and 1 
(exclusive):

Example

Math.random();

Try it Yourself »


You will learn more about Math.random() in the next chapter of this tutorial.


The Math.log() Method
Math.log(x) returns the natural logarithm of x.
The natural logarithm returns the time needed to reach a certain level of growth:

Examples

Math.log(1);

Try it Yourself »

Math.log(2);

Try it Yourself »

Math.log(3);

Try it Yourself »

Math.E and Math.log() are twins.

How many times must we multiply Math.E to get 10?

Math.log(10);

Try it Yourself »


The Math.log2() Method
Math.log2(x) returns the base 2 logarithm of x.

How many times must we multiply 2 to get 8?

Math.log2(8);

Try it Yourself »


The Math.log10() Method
Math.log10(x) returns the base 10 logarithm of x.

How many times must we multiply 10 to get 1000?

Math.log10(1000);

Try it Yourself »


JavaScript Math Methods


Method
Description


abs(x)
Returns the absolute value of x


acos(x)
Returns the arccosine of x, in radians


acosh(x)
Returns the hyperbolic arccosine of x


asin(x)
Returns the arcsine of x, in radians


asinh(x)
Returns the hyperbolic arcsine of x


atan(x)
Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians


atan2(y, x)
Returns the arctangent of the quotient of its arguments


atanh(x)
Returns the hyperbolic arctangent of x


cbrt(x)
Returns the cubic root of x


ceil(x)
Returns x, rounded upwards to the nearest integer


cos(x)
Returns the cosine of x (x is in radians)


cosh(x)
Returns the hyperbolic cosine of x


exp(x)
Returns the value of Ex


floor(x)
Returns x, rounded downwards to the nearest integer


log(x)
Returns the natural logarithm (base E) of x


max(x, y, z, ..., n)
Returns the number with the highest value


min(x, y, z, ..., n)
Returns the number with the lowest value


pow(x, y)
Returns the value of x to the power of y


random()
Returns a random number between 0 and 1


round(x)
Rounds x to the nearest integer


sign(x)
Returns if x is negative, null or positive (-1, 0, 1)


sin(x)
Returns the sine of x (x is in radians)


sinh(x)
Returns the hyperbolic sine of x


sqrt(x)
Returns the square root of x


tan(x)
Returns the tangent of an angle


tanh(x)
Returns the hyperbolic tangent of a number


trunc(x)
Returns the integer part of a number (x)



Complete Math Reference
For a complete reference, go to our Complete Math Object Reference.
The reference contains descriptions and examples of all Math properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Math method to create a random number.


let r = ;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯",python

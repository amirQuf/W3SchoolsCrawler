JavaScript String Methods

❮ Previous
Next ❯


String methods help you to work with strings.

String Methods and Properties
Primitive values, like "John Doe", cannot have properties 
or methods (because they are not objects). 
But with JavaScript, methods and properties are also available to 
primitive values, because JavaScript treats primitive values 
as objects when executing methods and properties.

JavaScript String Length
The length property returns the length of a string:

Example

let txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let length = txt.length;

Try it Yourself »


Extracting String Parts
There are 3 methods for extracting a part of a string:

slice(start, end)
substring(start, end)
substr(start, length)


JavaScript String slice()
slice() extracts a part of a string and returns the 
extracted part in a new string.
The method takes 2 parameters: the start position, and the end position (end 
not included).
This example slices out a portion of a string from position 7 to position 12 (13-1):

Example

let str = "Apple, Banana, Kiwi";
let part = str.slice(7, 13);

Try it Yourself »


Note
JavaScript counts positions from zero.
First position is 0.
Second position is 1.

If a parameter is negative, the position is counted from the 
end of the string.
This example slices out a portion of a string from position -12 to position 
-6: 

Example

let str = "Apple, Banana, Kiwi";
let part = str.slice(-12, -6);

Try it Yourself »

If you omit the second parameter, the method will slice out the rest of the string:

Example

let part = str.slice(7);

Try it Yourself »

or, counting from the end:

Example

let part = str.slice(-12);

Try it Yourself »








JavaScript String substring()
substring() is similar to slice().
The difference is that substring() cannot accept negative indexes.

Example

let str = "Apple, Banana, Kiwi";
let part = str.substring(7, 13);

Try it Yourself »

If you omit the second parameter, substring() will slice out the rest of the 
string.

JavaScript String substr()
substr() is similar to slice().
The difference is 
that the second parameter specifies the length 
of the extracted part.

Example

let str = "Apple, Banana, Kiwi";
let part = str.substr(7, 6);

Try it Yourself »

If you omit the second parameter, substr() will slice out the rest of the 
string.

Example

let str = "Apple, Banana, Kiwi";
let part = str.substr(7);

Try it Yourself »

If the first parameter is negative, the position counts from the end of the 
string.

Example

let str = "Apple, Banana, Kiwi";
let part = str.substr(-4);

Try it Yourself »


Replacing String Content
The replace() method replaces a specified value with another 
value in a string:

Example

let text = "Please visit Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");

Try it Yourself »


Note
The replace() method does not change the string it is called on.
The replace() method returns a new string.

By default, the replace() method replaces only the first match:

Example

let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace("Microsoft", "W3Schools");


Try it Yourself »


By default, the replace() method is case sensitive. Writing MICROSOFT (with 
upper-case) will not work:

Example

let text = "Please visit Microsoft!";
let newText = text.replace("MICROSOFT", "W3Schools");


Try it Yourself »


To replace case insensitive, use a regular expression with an /i flag (insensitive):

Example

let text = "Please visit Microsoft!";
let newText = text.replace(/MICROSOFT/i, "W3Schools");


Try it Yourself »



Note
Regular expressions are written without quotes.

To replace all matches, use a regular expression with a /g flag (global match):

Example

let text = "Please visit Microsoft and Microsoft!";
let newText = text.replace(/Microsoft/g, "W3Schools");


Try it Yourself »



Note
You will learn a lot more about regular expressions in the chapter JavaScript Regular 
Expressions.


Converting to Upper and Lower Case
A string is converted to upper case with toUpperCase():
A string is converted to lower case with toLowerCase():

JavaScript String toUpperCase()

Example

let text1 = "Hello World!";
let text2 = text1.toUpperCase();

Try it Yourself »

JavaScript String toLowerCase()

Example

let text1 = "Hello World!";       // String
let text2 = text1.toLowerCase();  // text2 is text1 
converted to lower

Try it Yourself »


JavaScript String concat()
concat() joins two or more strings:

Example

let text1 = "Hello";
let text2 = "World";
let text3 = text1.concat(" ", text2);

Try it Yourself »

The concat() method can be used instead of the plus operator. 
These two lines do the same:

Example

text = "Hello" + " " + "World!";
text = "Hello".concat(" ", "World!");


Note
All string methods return a new string. They don't modify the original string.
Formally said:Strings are immutable: Strings cannot be changed, only replaced.


JavaScript String trim()
The trim() method removes whitespace from both sides of a string:

Example

let text1 = "      Hello World!      ";
let text2 = text1.trim();

Try it Yourself »



JavaScript String Padding
ECMAScript 2017 added two String methods: padStart
and padEnd to support padding at the beginning and at the end of a string.

JavaScript String padStart()

Example

let text = "5";
let padded = text.padStart(4,0);

Try it Yourself »

Browser Support
padStart() is an ECMAScript 2017 feature.
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



padStart() is not supported in Internet Explorer.

JavaScript String padEnd()

Example

let text = "5";
let padded = text.padEnd(4,0);

Try it Yourself »

Browser Support
padEnd() is an ECMAScript 2017 feature.
It is supported in all modern browsers:










Chrome
Edge
Firefox
Safari
Opera


Yes
Yes
Yes
Yes
Yes



padEnd() is not supported in Internet Explorer.

Extracting String Characters
There are 3 methods for extracting string characters:

charAt(position)
charCodeAt(position)
Property access [ ]


JavaScript String charAt()
The charAt() method returns the character at a specified 
index (position) in a string:

Example

let text = "HELLO WORLD";
let char = text.charAt(0);

Try it Yourself »


JavaScript String charCodeAt()
The charCodeAt() method returns the unicode of the character 
at a specified index in a string:
The method returns a UTF-16 code (an integer between 0 and 65535).

Example

let text = "HELLO WORLD";
let char = text.charCodeAt(0);

Try it Yourself »


Property Access
ECMAScript 5 (2009) allows property access [ ] on strings:

Example

let text = "HELLO WORLD";
let char = text[0];

Try it Yourself »


Note
Property access might be a little unpredictable: 

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!)



Example

let text = "HELLO WORLD";
text[0] = "A";    // Gives no error, but does not work

Try it Yourself »


Converting a String to an Array

If you want to work with a string as an array, you can convert it to an array.

JavaScript String split()
A string can be converted to an array with the split() method:

Example

text.split(",")    // Split on commas
text.split(" ")    // Split on spaces
text.split("|")    // Split on pipe

Try it Yourself »

If the separator is omitted, the returned array will contain the whole string 
in index [0].
If the separator is "", the returned array will be an array of single 
characters:

Example

text.split("")

Try it Yourself »


Complete String Reference
For a complete String reference, go to our:
Complete JavaScript String Reference.
The reference contains descriptions and examples of all string properties and methods.


Test Yourself With Exercises

Exercise:
Convert the text into an UPPERCASE text:


let txt = "Hello World!";
txt = txt.;



Submit Answer »
Start the Exercise



❮ Previous
Next ❯
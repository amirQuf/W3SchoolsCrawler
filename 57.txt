JavaScript Array Methods

❮ Previous
Next ❯


Converting Arrays to Strings
The JavaScript method toString() converts an array to a 
string of (comma separated) array values.

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

Result:

 Banana,Orange,Apple,Mango

Try it Yourself »

The join() method also joins all array elements into a string.
It behaves just like toString(), but in addition you can specify the separator:

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");

Result:

 Banana * Orange * Apple * Mango
Try it Yourself »


Popping and Pushing
When you work with arrays, it is easy to remove elements and add 
new elements.
This is what popping and pushing is:
Popping items out of an array, or pushing 
items into an array.







JavaScript Array pop()
The pop() method removes the last element from an array: 

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();

Try it Yourself »

The pop() method returns the value that was "popped out":

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.pop();

Try it Yourself »


JavaScript Array push()
The push() method adds a new element to an array (at the end):

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");

Try it Yourself »

The push() method returns the new array length:

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.push("Kiwi");

Try it Yourself »

Shifting Elements
Shifting is equivalent to popping, but working on the first element instead of 
the last.

JavaScript Array shift()
The shift() method removes the first array element and "shifts" all 
other elements to a lower index.

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();

Try it Yourself »

The shift() method returns the value that was "shifted out":

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits.shift();

Try it Yourself »


JavaScript Array unshift()
The unshift() method adds a new element to an array (at the beginning), and "unshifts" 
older elements: 

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");

Try it Yourself »

The unshift() method returns the new array length.

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");

Try it Yourself »


Changing Elements
Array elements are accessed using their index number:

Array indexes start with 0:
[0] is the first array element[1] is the second[2] is the third ...


Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0] = "Kiwi";

Try it Yourself »


JavaScript Array length
The length property provides an easy way to append a new element to an array:

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";

Try it Yourself »


JavaScript Array delete()

Warning !
Array elements can be deleted using the JavaScript operator delete.
Using delete leaves undefined holes in the 
array.
Use pop() or shift() instead.


Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];

Try it Yourself »


Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) 
existing arrays:

Example (Merging Two Arrays)

const myGirls = ["Cecilie", "Lone"];
const myBoys = ["Emil", "Tobias", "Linus"];

const myChildren = myGirls.concat(myBoys);

Try it Yourself »


The concat() method does not change the existing arrays. It always returns a new array.

The concat() method can take any number of array arguments:

Example (Merging Three Arrays)

const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);

Try it Yourself »

The concat() method can also take strings as arguments:

Example (Merging an Array with Values)

const arr1 = ["Emil", "Tobias", "Linus"];
const myChildren = arr1.concat("Peter"); 
Try it Yourself »


Splicing and Slicing Arrays
The splice() method adds new items to an array.
The slice() method slices out a piece of an array.

JavaScript Array splice()
The splice() method can be used to add new items to an array: 

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");

Try it Yourself »

The first parameter (2) defines the position where new elements should be 
added (spliced in).
The second parameter (0) defines how many elements should be
removed.
The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be
added.
The splice() method returns an array with the deleted items: 

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 2, "Lemon", "Kiwi");

Try it Yourself »


Using splice() to Remove Elements
With clever parameter setting, you can use splice() to remove elements without leaving 
"holes" in the array: 

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);

Try it Yourself »

The first parameter (0) defines the position where new elements should be 
added (spliced in).
The second parameter (1) defines how many elements should be
removed.
The rest of the parameters are omitted. No new elements will be added.

JavaScript Array slice()
The slice() method slices out a piece of an array into a new 
array.
This example slices out a part of an array starting from array element 1 
("Orange"):

Example

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1);

Try it Yourself »


Note
The slice() method creates a new array.
The slice() method does not remove any elements from the source array.

This example slices out a part of an array starting from array element 3 
("Apple"):

Example

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(3);

Try it Yourself »

The slice() method can take two arguments like slice(1, 3).
The method then selects elements from the start argument, and up to (but not 
including) the end argument.

Example

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);

Try it Yourself »

If the end argument is omitted, like in the first examples, the slice() 
method slices out the rest of the array.

Example

const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(2);

Try it Yourself »


Automatic toString()
JavaScript automatically converts an array to a comma separated string when a 
primitive value is expected.
This is always the case when you try to output an array. 
These two examples will produce the same result:

Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

Try it Yourself »


Example

const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;

Try it Yourself »


Note
All JavaScript objects have a toString() method.


Finding Max and Min Values in an Array
There are no built-in functions for finding the highest 
or lowest value in a JavaScript array.
You will learn how you solve this problem in the next 
chapter of this tutorial.

Sorting Arrays
Sorting arrays are covered in the next chapter of this tutorial.

Complete Array Reference
For a complete Array reference, go to our:
Complete JavaScript Array Reference.
The reference contains descriptions and examples of all Array 
properties and methods.


Test Yourself With Exercises

Exercise:
Use the correct Array method to remove the last item of the fruits array.


const fruits = ["Banana", "Orange", "Apple"];
;



Submit Answer »
Start the Exercise




❮ Previous
Next ❯